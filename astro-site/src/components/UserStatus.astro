---
// „É¶„Éº„Ç∂„ÉºË™çË®ºÁä∂ÊÖã„Å®„Éó„É©„É≥Ë°®Á§∫„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
---

<div id="user-status-container" class="user-status">
    <div id="user-info" class="user-info hidden">
        <span class="plan-badge">
            <span class="plan-icon"></span>
            <span class="plan-name"></span>
        </span>
        <span class="user-email"></span>
        <a href="/dashboard" class="dashboard-btn">„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
        <button id="logout-btn" class="logout-btn">„É≠„Ç∞„Ç¢„Ç¶„Éà</button>
    </div>
    <div id="guest-info" class="guest-info">
        <a href="/auth/login" class="login-btn">„É≠„Ç∞„Ç§„É≥</a>
        <a href="/auth/signup" class="signup-btn">Êñ∞Ë¶èÁôªÈå≤</a>
    </div>
</div>

<style>
    .user-status {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 12px;
        flex-wrap: nowrap;
    }

    .user-info.hidden {
        display: none;
    }

    .plan-badge {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 13px;
        font-weight: 600;
        background: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.3);
    }

    .plan-badge.free {
        background: rgba(148, 163, 184, 0.1);
        border-color: rgba(148, 163, 184, 0.3);
        color: #94a3b8;
    }

    .plan-badge.standard {
        background: rgba(16, 185, 129, 0.1);
        border-color: rgba(16, 185, 129, 0.3);
        color: #10b981;
    }

    .plan-badge.premium {
        background: rgba(245, 158, 11, 0.1);
        border-color: rgba(245, 158, 11, 0.3);
        color: #f59e0b;
    }

    .plan-icon {
        font-size: 14px;
    }

    .user-email {
        color: #cbd5e1;
        font-size: 14px;
    }

    .dashboard-btn {
        padding: 6px 12px;
        background: rgba(59, 130, 246, 0.08);
        color: var(--body-text-color, #e2e8f0);
        border: 1px solid rgba(59, 130, 246, 0.15);
        border-radius: 6px;
        font-size: 13px;
        text-decoration: none;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        white-space: nowrap;
    }

    .dashboard-btn:hover {
        background: rgba(59, 130, 246, 0.15);
        border-color: rgba(59, 130, 246, 0.3);
        color: var(--accent-color, #3b82f6);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(59, 130, 246, 0.2);
    }

    .logout-btn {
        padding: 6px 12px;
        background: rgba(148, 163, 184, 0.08);
        color: #94a3b8;
        border: 1px solid rgba(148, 163, 184, 0.15);
        border-radius: 6px;
        font-size: 13px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        white-space: nowrap;
        font-weight: 500;
    }

    .logout-btn:hover {
        background: rgba(148, 163, 184, 0.15);
        border-color: rgba(148, 163, 184, 0.3);
        color: #e2e8f0;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(148, 163, 184, 0.2);
    }

    .guest-info {
        display: flex;
        gap: 10px;
    }

    .guest-info.hidden {
        display: none;
    }

    .login-btn, .signup-btn {
        padding: 6px 16px;
        border-radius: 6px;
        text-decoration: none;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s;
    }

    .login-btn {
        color: #94a3b8;
        border: 1px solid rgba(148, 163, 184, 0.3);
    }

    .login-btn:hover {
        background: rgba(148, 163, 184, 0.1);
        color: #e2e8f0;
    }

    .signup-btn {
        background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
        color: white;
    }

    .signup-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    /* Mobile responsive styles */
    @media (max-width: 900px) {
        .user-info {
            gap: 8px;
        }
        
        .user-email {
            display: none;
        }
        
        .plan-name {
            display: none;
        }
        
        .dashboard-btn, .logout-btn {
            padding: 6px 10px;
            font-size: 12px;
        }
    }
    
    @media (max-width: 768px) {
        .user-status {
            display: none; /* „É¢„Éê„Ç§„É´„É°„Éã„É•„Éº„Å´Áµ±Âêà */
        }
    }
    
    @media (max-width: 480px) {
        .guest-info {
            gap: 6px;
        }
        
        .login-btn, .signup-btn {
            padding: 4px 10px;
            font-size: 12px;
        }
    }
</style>

<script type="module">
    // Supabase„ÇíCDN„Åã„ÇâÁõ¥Êé•„Ç§„É≥„Éù„Éº„Éà
    import { createClient } from 'https://cdn.skypack.dev/@supabase/supabase-js@2';
    
    const supabaseUrl = 'https://qysycsrhaatudnksbpqe.supabase.co';
    const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF5c3ljc3JoYWF0dWRua3NicHFlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU5MzM3MjcsImV4cCI6MjA3MTUwOTcyN30.UDWi7FYqpJNpMhvMMaZoGMXwuD1R2PNH4Tk6Xs1u1pU';
    const supabase = createClient(supabaseUrl, supabaseAnonKey);

    // „Éò„É´„Éë„ÉºÈñ¢Êï∞
    async function getUserWithPlan() {
        const { data: { user }, error } = await supabase.auth.getUser();
        if (error || !user) return { user: null, plan: 'free' };

        // „ÉÜ„Çπ„ÉàÊ±∫Ê∏à„Éª„Éá„É¢„É¢„Éº„Éâ„ÅÆ„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÇíÂÖà„Å´„ÉÅ„Çß„ÉÉ„ÇØ
        const testSubscription = localStorage.getItem('test_subscription_' + user.id);
        const demoSubscription = localStorage.getItem('demo_subscription_' + user.id);
        
        if (testSubscription) {
            const testData = JSON.parse(testSubscription);
            console.log('Test subscription found in UserStatus:', testData);
            return { user, plan: testData.planType.toLowerCase() };
        } else if (demoSubscription) {
            const demoData = JSON.parse(demoSubscription);
            console.log('Demo subscription found in UserStatus:', demoData);
            return { user, plan: demoData.planType.toLowerCase() };
        }

        // „Éó„É≠„Éï„Ç£„Éº„É´„Åã„Çâ„Éó„É©„É≥ÊÉÖÂ†±„ÇíÂèñÂæó
        try {
            const { data: profile, error } = await supabase
                .from('profiles')
                .select('*')
                .eq('id', user.id)
                .maybeSingle();

            if (error) {
                console.warn('Profile fetch error:', error);
                return { user, plan: 'free' };
            }

            if (profile) {
                console.log('Profile data:', profile); // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞
            }

            // Êó¢Â≠ò„ÅÆ„Ç´„É©„É†Âêç„ÇíË©¶„Åô
            const planName = profile?.subscription_tier?.toLowerCase() || 
                           profile?.subscription_plan?.toLowerCase() || 
                           profile?.subscription_status?.toLowerCase() ||
                           profile?.plan?.toLowerCase();

            let plan = 'free';
            if (planName?.includes('premium')) plan = 'premium';
            else if (planName?.includes('standard')) plan = 'standard';

            return { user, plan };
        } catch (error) {
            console.warn('Profile query error:', error);
            return { user, plan: 'free' };
        }
    }

    function getPlanDisplayName(plan) {
        const names = {
            free: 'Free',
            standard: 'Standard',
            premium: 'Premium'
        };
        return names[plan] || 'Free';
    }

    function getPlanIcon(plan) {
        const icons = {
            free: 'üëÄ',
            standard: '‚≠ê',
            premium: 'üíé'
        };
        return icons[plan] || 'üëÄ';
    }

    async function updateUserStatus() {
        const userInfo = document.getElementById('user-info');
        const guestInfo = document.getElementById('guest-info');
        
        try {
            const { user, plan } = await getUserWithPlan();
            
            if (user) {
                // „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„ÅÆÂ†¥Âêà
                userInfo.classList.remove('hidden');
                guestInfo.classList.add('hidden');
                
                // „Éó„É©„É≥„Éê„ÉÉ„Ç∏„ÅÆÊõ¥Êñ∞
                const planBadge = userInfo.querySelector('.plan-badge');
                const planIcon = userInfo.querySelector('.plan-icon');
                const planName = userInfo.querySelector('.plan-name');
                const userEmail = userInfo.querySelector('.user-email');
                
                planBadge.className = `plan-badge ${plan}`;
                planIcon.textContent = getPlanIcon(plan);
                planName.textContent = getPlanDisplayName(plan);
                userEmail.textContent = user.email;
            } else {
                // Êú™„É≠„Ç∞„Ç§„É≥„ÅÆÂ†¥Âêà
                userInfo.classList.add('hidden');
                guestInfo.classList.remove('hidden');
            }
        } catch (error) {
            console.error('Error updating user status:', error);
        }
    }

    // „É≠„Ç∞„Ç¢„Ç¶„ÉàÂá¶ÁêÜ
    document.getElementById('logout-btn')?.addEventListener('click', async () => {
        try {
            const { error } = await supabase.auth.signOut();
            if (error) throw error;
            
            // „Éà„ÉÉ„Éó„Éö„Éº„Ç∏„Å∏„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
            window.location.href = '/';
        } catch (error) {
            console.error('Logout error:', error);
            alert('„É≠„Ç∞„Ç¢„Ç¶„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
    });

    // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÅÆÂ§âÂåñ„ÇíÁõ£Ë¶ñ
    function watchLocalStorage() {
        // „Éö„Éº„Ç∏Ë°®Á§∫ÊôÇ„Å´Êõ¥Êñ∞
        updateUserStatus();
        
        // 1Áßí„Åî„Å®„Å´„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà„ÉÜ„Çπ„ÉàÊ±∫Ê∏à„ÅÆÂ§âÊõ¥„ÇíÊ§úÂá∫Ôºâ
        setInterval(() => {
            const currentUser = supabase.auth.getUser().then(({data: {user}}) => {
                if (user) {
                    const testSub = localStorage.getItem('test_subscription_' + user.id);
                    const demoSub = localStorage.getItem('demo_subscription_' + user.id);
                    if (testSub || demoSub) {
                        console.log('[UserStatus] Detected subscription change, updating...');
                        updateUserStatus();
                    }
                }
            });
        }, 1000);
    }

    // ÂàùÊúüË°®Á§∫„Å®authÁä∂ÊÖã„ÅÆÁõ£Ë¶ñ
    document.addEventListener('DOMContentLoaded', () => {
        updateUserStatus();
        watchLocalStorage();
        
        // Ë™çË®ºÁä∂ÊÖã„ÅÆÂ§âÂåñ„ÇíÁõ£Ë¶ñ
        supabase.auth.onAuthStateChange(() => {
            updateUserStatus();
        });
    });
    
    // „Éö„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Åü„Å®„Åç„Å´Êõ¥Êñ∞Ôºà„Éñ„É©„Ç¶„Ç∂Êàª„Çã„Éú„Çø„É≥ÂØæÂøúÔºâ
    document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
            console.log('[UserStatus] Page became visible, updating status...');
            updateUserStatus();
        }
    });
</script>