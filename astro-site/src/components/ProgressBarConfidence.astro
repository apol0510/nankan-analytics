---
// プログレスバー信頼値コンポーネント
// 戦略別の累積スコアベース信頼値をアニメーション付きで表示

export interface Props {
    strategyType: 'A' | 'B' | 'C';
    progressConfidence: number;
    baseScore: number;
    reduction: number;
    strategyTitle: string;
}

const { strategyType, progressConfidence, baseScore, reduction, strategyTitle } = Astro.props;

// デバッグ出力
console.log(`🎯 ProgressBarConfidence ${strategyType}:`, {
    progressConfidence,
    baseScore,
    reduction,
    strategyTitle
});

// 戦略別カラー設定
const getStrategyColor = (type: string, confidence: number) => {
    const baseColors = {
        'A': '#10b981', // 緑系（少点数的中型）
        'B': '#3b82f6', // 青系（バランス型）
        'C': '#f59e0b'  // オレンジ系（高配当追求型）
    };

    // 信頼値に応じて透明度調整
    const alpha = Math.max(0.7, confidence / 100);
    const baseColor = baseColors[type] || '#6b7280';

    return baseColor;
};

const strategyColor = getStrategyColor(strategyType, progressConfidence);
const barWidth = Math.max(progressConfidence, 5); // 最小5%表示
---

<div class="progress-confidence-container">
    <div class="progress-header">
        <span class="strategy-title">{strategyTitle}</span>
        <span class="confidence-value">{progressConfidence}%</span>
    </div>

    <div class="progress-bar-wrapper">
        <div
            class="progress-bar"
            style={`
                --target-width: ${barWidth}%;
                background-color: ${strategyColor};
                animation-delay: ${strategyType === 'A' ? '0.2s' : strategyType === 'B' ? '0.4s' : '0.6s'};
            `}
        >
            <div class="progress-shine"></div>
        </div>
        <div class="progress-track"></div>
    </div>

    <div class="calculation-detail">
        <span class="base-score">ベース: {baseScore}pt</span>
        <span class="reduction">-{reduction}</span>
        <span class="result">= {progressConfidence}%</span>
    </div>
</div>

<style>
.progress-confidence-container {
    margin: 15px 0;
    background: rgba(15, 23, 42, 0.6);
    border-radius: 12px;
    padding: 16px;
    border: 1px solid rgba(59, 130, 246, 0.2);
}

.progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
}

.strategy-title {
    font-size: 14px;
    font-weight: 600;
    color: #e2e8f0;
}

.confidence-value {
    font-size: 18px;
    font-weight: 700;
    color: #10b981;
    text-shadow: 0 0 8px rgba(16, 185, 129, 0.3);
}

.progress-bar-wrapper {
    position: relative;
    height: 24px;
    background: rgba(15, 23, 42, 0.8);
    border-radius: 12px;
    overflow: hidden;
    border: 1px solid rgba(71, 85, 105, 0.3);
    margin-bottom: 10px;
}

.progress-track {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg,
        rgba(71, 85, 105, 0.2) 0%,
        rgba(71, 85, 105, 0.1) 50%,
        rgba(71, 85, 105, 0.2) 100%);
}

.progress-bar {
    position: relative;
    height: 100%;
    border-radius: 12px;
    background: linear-gradient(90deg,
        var(--bar-color, #10b981) 0%,
        rgba(255, 255, 255, 0.2) 50%,
        var(--bar-color, #10b981) 100%);
    box-shadow:
        0 0 20px rgba(16, 185, 129, 0.4),
        inset 0 2px 4px rgba(255, 255, 255, 0.2);

    /* アニメーション設定 */
    width: 0% !important;
    animation: progressFill 2s ease-out forwards;
    transition: all 0.3s ease;
}

.progress-bar:hover {
    transform: scaleY(1.1);
    box-shadow:
        0 0 30px rgba(16, 185, 129, 0.6),
        inset 0 2px 4px rgba(255, 255, 255, 0.3);
}

.progress-shine {
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg,
        transparent 0%,
        rgba(255, 255, 255, 0.4) 50%,
        transparent 100%);
    animation: shine 2s ease-in-out infinite;
    animation-delay: inherit;
}

.calculation-detail {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    font-size: 12px;
    color: #94a3b8;
    font-family: 'Courier New', monospace;
}

.base-score {
    color: #3b82f6;
    font-weight: 600;
}

.reduction {
    color: #ef4444;
    font-weight: 600;
}

.result {
    color: #10b981;
    font-weight: 700;
    text-shadow: 0 0 4px rgba(16, 185, 129, 0.3);
}

/* アニメーション定義 */
@keyframes progressFill {
    0% {
        width: 0%;
        opacity: 0;
    }
    20% {
        opacity: 1;
    }
    100% {
        width: var(--target-width, 50%);
        opacity: 1;
    }
}

@keyframes shine {
    0% {
        left: -100%;
    }
    50% {
        left: 0%;
    }
    100% {
        left: 100%;
    }
}

/* レスポンシブ対応 */
@media (max-width: 768px) {
    .progress-confidence-container {
        padding: 12px;
    }

    .confidence-value {
        font-size: 16px;
    }

    .progress-bar-wrapper {
        height: 20px;
    }

    .calculation-detail {
        font-size: 10px;
        gap: 6px;
    }
}

/* 戦略別カラーカスタマイズ */
.strategy-A .progress-bar {
    --bar-color: #10b981;
}

.strategy-B .progress-bar {
    --bar-color: #3b82f6;
}

.strategy-C .progress-bar {
    --bar-color: #f59e0b;
}
</style>

<script>
// プログレスバーアニメーション制御
document.addEventListener('DOMContentLoaded', () => {
    const progressBars = document.querySelectorAll('.progress-bar');
    console.log('🎯 Found progress bars:', progressBars.length);

    progressBars.forEach((bar, index) => {
        const targetWidth = bar.style.getPropertyValue('--target-width');
        console.log(`🎯 Progress bar ${index} target width:`, targetWidth);

        // 即座にアニメーション開始
        setTimeout(() => {
            bar.style.animationPlayState = 'running';
            console.log(`🎯 Starting animation for bar ${index}`);
        }, 500 + (index * 200)); // 順次アニメーション
    });

    // フォールバック: Intersection Observer
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                entry.target.style.animationPlayState = 'running';
                console.log(`🎯 Intersection animation started for bar ${index}`);
            }
        });
    }, { threshold: 0.1 });

    progressBars.forEach(bar => observer.observe(bar));
});
</script>