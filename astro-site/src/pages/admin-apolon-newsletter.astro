---
// Apolon„É°„É´„Éû„Ç¨ÈÖç‰ø°ÁÆ°ÁêÜÁîªÈù¢ÔºàÂÆåÂÖ®Áã¨Á´ãÁâàÔºâ
import BaseLayout from '../layouts/BaseLayout.astro';

// ApolonÈ°ßÂÆ¢Áµ±Ë®à„ÇíÂèñÂæó
let customerStats = {
    total: 0,
    active: 0,
    unsubscribed: 0
};

let debugInfo = {
    hasApiKey: false,
    hasBaseId: false,
    apiCallSuccess: false,
    recordCount: 0,
    errorMessage: ''
};

try {
    const AIRTABLE_API_KEY = import.meta.env.AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = import.meta.env.AIRTABLE_BASE_ID;
    const APOLON_TABLE = 'Apolon_Customers'; // ApolonÂ∞ÇÁî®„ÉÜ„Éº„Éñ„É´

    debugInfo.hasApiKey = !!AIRTABLE_API_KEY;
    debugInfo.hasBaseId = !!AIRTABLE_BASE_ID;

    if (AIRTABLE_API_KEY && AIRTABLE_BASE_ID) {
        let allRecords = [];
        let offset = null;

        do {
            let url = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${APOLON_TABLE}?pageSize=100`;
            if (offset) {
                url += `&offset=${offset}`;
            }

            const response = await fetch(url, {
                headers: {
                    'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            });

            debugInfo.apiCallSuccess = response.ok;

            if (response.ok) {
                const data = await response.json();
                allRecords.push(...data.records);
                offset = data.offset;
            } else {
                debugInfo.errorMessage = `API Error: ${response.status}`;
                break;
            }
        } while (offset);

        debugInfo.recordCount = allRecords.length;
        customerStats.total = allRecords.length;

        // Status„Åß„Ç´„Ç¶„É≥„Éà
        allRecords.forEach(record => {
            const status = record.fields.Status || record.fields.status || 'active';
            if (status === 'active') {
                customerStats.active++;
            } else if (status === 'unsubscribed') {
                customerStats.unsubscribed++;
            }
        });
    }
} catch (error) {
    debugInfo.errorMessage = error.message;
}
---

<BaseLayout title="Apolon„É°„É´„Éû„Ç¨ÈÖç‰ø° - ÁÆ°ÁêÜÁîªÈù¢">
    <style>
        .newsletter-admin {
            min-height: 100vh;
            background: #f8fafc;
            padding: 20px;
        }

        /* ApolonÂ∞ÇÁî®„Ç´„É©„ÉºÔºàËµ§Á≥ªÔºâ */
        .admin-header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
            border: 3px solid #dc2626;
        }

        .admin-header h1 {
            font-size: 2rem;
            color: white;
            margin-bottom: 5px;
            font-weight: 700;
        }

        .admin-header .subtitle {
            color: rgba(255, 255, 255, 0.95);
            font-size: 1rem;
            font-weight: 500;
        }

        .warning-box {
            background: #fff3cd;
            border: 2px solid #ffc107;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
        }

        .warning-box strong {
            color: #dc2626;
            font-size: 1.1rem;
        }

        .admin-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .card h2 {
            color: #1f2937;
            font-size: 1.3rem;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #dc2626;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
            border: 2px solid #fecaca;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #dc2626;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #991b1b;
            font-weight: 500;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            color: #374151;
            font-weight: 500;
            margin-bottom: 8px;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s;
        }

        .form-control:focus {
            outline: none;
            border-color: #dc2626;
            box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
        }

        textarea.form-control {
            min-height: 300px;
            font-family: monospace;
            resize: vertical;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 15px;
        }

        .btn-apolon {
            background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
            color: white;
        }

        .btn-apolon:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn-secondary:hover {
            background: #4b5563;
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .alert-success {
            background: #d1fae5;
            border: 1px solid #34d399;
            color: #065f46;
        }

        .alert-error {
            background: #fee2e2;
            border: 1px solid #f87171;
            color: #991b1b;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .hidden {
            display: none;
        }

        .schedule-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }

        input[type="datetime-local"] {
            flex: 1;
            padding: 10px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
        }

        .site-badge {
            display: inline-block;
            background: #dc2626;
            color: white;
            padding: 5px 12px;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 600;
            margin-left: 10px;
        }
    </style>

    <div class="newsletter-admin">
        <div class="admin-container">
            <div class="admin-header">
                <h1>üê¥ Apolon„É°„É´„Éû„Ç¨ÈÖç‰ø°ÁÆ°ÁêÜ <span class="site-badge">APOLONÂ∞ÇÁî®</span></h1>
                <p class="subtitle">apolon@nankankeiba.jp „Åã„ÇâÈÖç‰ø°</p>
            </div>

            <div class="warning-box">
                <strong>‚ö†Ô∏è ÈáçË¶ÅÔºö„Åì„ÅÆ„Éö„Éº„Ç∏„ÅØApolon‰ºöÂì°Â∞ÇÁî®„Åß„Åô</strong><br>
                NANKAN‰ºöÂì°„Å∏„ÅÆÈÖç‰ø°„ÅØÂà•„ÅÆÁÆ°ÁêÜÁîªÈù¢„Çí„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ
            </div>

            <div class="card">
                <h2>üìä Apolon‰ºöÂì°Áµ±Ë®à</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">{customerStats.total}</div>
                        <div class="stat-label">Á∑è‰ºöÂì°Êï∞</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{customerStats.active}</div>
                        <div class="stat-label">ÈÖç‰ø°‰∏≠</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{customerStats.unsubscribed}</div>
                        <div class="stat-label">ÈÖç‰ø°ÂÅúÊ≠¢</div>
                    </div>
                </div>

                {debugInfo.errorMessage && (
                    <div class="alert alert-error">
                        „Ç®„É©„Éº: {debugInfo.errorMessage}
                    </div>
                )}
            </div>

            <div class="card">
                <h2>üìß „É°„Éº„É´ÈÖç‰ø°</h2>

                <div id="alertContainer"></div>

                <form id="newsletterForm">
                    <div class="form-group">
                        <label for="subject">‰ª∂Âêç *</label>
                        <input
                            type="text"
                            id="subject"
                            name="subject"
                            class="form-control"
                            required
                            placeholder="‰æã: „Äê„Ç¢„Éù„É≠„É≥„Äë‰ªäÈÄ±„ÅÆÈáçË≥û„É¨„Éº„ÇπÊîªÁï•ÊÉÖÂ†±"
                        >
                    </div>

                    <div class="form-group">
                        <label for="htmlContent">„É°„Éº„É´Êú¨ÊñáÔºàHTMLÔºâ *</label>
                        <textarea
                            id="htmlContent"
                            name="htmlContent"
                            class="form-control"
                            required
                            placeholder="HTML„Ç≥„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                        ></textarea>
                    </div>

                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="scheduleCheckbox"> ‰∫àÁ¥ÑÈÖç‰ø°
                        </label>
                        <div id="scheduleControls" class="schedule-controls hidden">
                            <input
                                type="datetime-local"
                                id="scheduledAt"
                                name="scheduledAt"
                            >
                            <span style="color: #6b7280; font-size: 0.9rem;">
                                Êó•Êú¨ÊôÇÈñì„ÅßÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                            </span>
                        </div>
                    </div>

                    <div class="button-group">
                        <button type="submit" class="btn btn-apolon">
                            üì§ ÈÖç‰ø°ÈñãÂßã
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="location.href='/admin'">
                            ‚Üê ÁÆ°ÁêÜÁîªÈù¢„Éà„ÉÉ„Éó„Å´Êàª„Çã
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script is:inline>
        // ‰∫àÁ¥ÑÈÖç‰ø°„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπÂà∂Âæ°
        const scheduleCheckbox = document.getElementById('scheduleCheckbox');
        const scheduleControls = document.getElementById('scheduleControls');

        scheduleCheckbox.addEventListener('change', (e) => {
            if (e.target.checked) {
                scheduleControls.classList.remove('hidden');
                // „Éá„Éï„Ç©„É´„Éà: 1ÊôÇÈñìÂæå
                const now = new Date();
                now.setHours(now.getHours() + 1);
                const formatted = now.toISOString().slice(0, 16);
                document.getElementById('scheduledAt').value = formatted;
            } else {
                scheduleControls.classList.add('hidden');
            }
        });

        // „Éï„Ç©„Éº„É†ÈÄÅ‰ø°Âá¶ÁêÜ
        const form = document.getElementById('newsletterForm');
        const alertContainer = document.getElementById('alertContainer');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="loading"></span> ÈÖç‰ø°‰∏≠...';

            alertContainer.innerHTML = '';

            const subject = document.getElementById('subject').value;
            const htmlContent = document.getElementById('htmlContent').value;
            const isScheduled = scheduleCheckbox.checked;
            const scheduledAt = isScheduled ? document.getElementById('scheduledAt').value : null;

            try {
                const payload = {
                    subject,
                    htmlContent
                };

                if (isScheduled && scheduledAt) {
                    // ISOÂΩ¢Âºè„Å´Â§âÊèõ
                    payload.scheduledAt = new Date(scheduledAt).toISOString();
                }

                console.log('üê¥ ApolonÈÖç‰ø°„É™„ÇØ„Ç®„Çπ„Éà:', payload);

                const response = await fetch('/.netlify/functions/send-apolon-newsletter', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    alertContainer.innerHTML = `
                        <div class="alert alert-success">
                            ‚úÖ ${result.message}<br>
                            ${result.data ? `ÈÖç‰ø°ÂÖà: ${result.data.recipientCount}‰ª∂` : ''}
                            ${result.isScheduled ? `<br>‰∫àÂÆöÊôÇÂàª: ${new Date(result.scheduledFor).toLocaleString('ja-JP')}` : ''}
                        </div>
                    `;

                    // „Éï„Ç©„Éº„É†„É™„Çª„ÉÉ„Éà
                    form.reset();
                    scheduleControls.classList.add('hidden');
                    scheduleCheckbox.checked = false;
                } else {
                    throw new Error(result.error || 'ÈÖç‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                }
            } catch (error) {
                console.error('üê¥ ApolonÈÖç‰ø°„Ç®„É©„Éº:', error);
                alertContainer.innerHTML = `
                    <div class="alert alert-error">
                        ‚ùå „Ç®„É©„Éº: ${error.message}
                    </div>
                `;
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        });
    </script>
</BaseLayout>
