---
export const prerender = true;
import BaseLayout from '../layouts/BaseLayout.astro';
import AccessControl from '../components/AccessControl.astro';
import ProgressBarConfidence from '../components/ProgressBarConfidence.astro';
import allRacesData from '../data/allRacesPrediction.json';
import { processRaceData, normalizeHorseData, getRoleDisplayConfig, validateDataIntegrity, getHorseConfidenceFromMark, calculateMarkBasedConfidence, convertToStarRating, getRecommendationStars, generateStandardizedBets, calculateScoreBasedStats, getPredictionDataWithStrategies, calculateProgressBarConfidence } from '../lib/shared-prediction-logic.js';

// 🛡️ 復活防止対策: processRaceDataのエラーハンドリング強化
let mainRace, race12R, sortedRaces;
try {
    const processedData = processRaceData(allRacesData);
    mainRace = processedData.mainRace;
    race12R = processedData.race12R;
    sortedRaces = processedData.sortedRaces || [];

    // デバッグ用ログ
    console.log('🔍 ProcessRaceData結果:', {
        mainRace: mainRace ? 'あり' : 'なし',
        race12R: race12R ? 'あり' : 'なし',
        sortedRacesLength: sortedRaces?.length || 0
    });
} catch (error) {
    console.error('❌ processRaceData エラー:', error);
    // フォールバック: 直接allRacesDataから取得
    mainRace = allRacesData?.races?.find(race => race.isMainRace === true) || null;
    race12R = allRacesData?.races?.find(r => r.raceNumber === '12R') || null;
    sortedRaces = allRacesData?.races?.sort((a, b) => a.displayOrder - b.displayOrder) || [];
}

// 日付と会場を取得
const raceDate = allRacesData.raceDate; // "2025-09-18"
const track = allRacesData.track; // "大井競馬"

// 日付を日本語形式に変換
const [year, month, day] = raceDate.split('-');
const formattedDate = `${year}年${parseInt(month)}月${parseInt(day)}日`;

// Standard会員向け: 後半3レース（10R, 11R=メインレース, 12R）
// 🛡️ 復活防止対策: sortedRacesの安全性チェック
const standardRaces = (Array.isArray(sortedRaces) ? sortedRaces : []).filter(race =>
    race?.raceNumber === '10R' || race?.raceNumber === '11R' || race?.raceNumber === '12R'
);

console.log('🔍 StandardRaces結果:', {
    sortedRacesIsArray: Array.isArray(sortedRaces),
    sortedRacesLength: sortedRaces?.length || 0,
    standardRacesLength: standardRaces?.length || 0,
    standardRaceNumbers: standardRaces.map(r => r?.raceNumber).join(', ')
});

// 昨日・先週の的中結果データ（トップページに反映される）
// 昨日の的中結果データ（9/19 大井競馬）
export const yesterdayResults = {
    date: "9/19",
    track: "大井競馬",
    hitRate: 83.3,
    hitCount: 10,
    totalCount: 12,
    totalPayout: 19920,
    recoveryRate: 166, // 🛡️ 復活防止: 回収率フィールド追加
    results: [
        { race: '1R', result: 'win', payout: 2890 },
        { race: '2R', result: 'win', payout: 4160 },
        { race: '3R', result: 'win', payout: 940 },
        { race: '4R', result: 'win', payout: 3870 },
        { race: '5R', result: 'win', payout: 1070 },
        { race: '6R', result: 'lose', payout: 0 },
        { race: '7R', result: 'win', payout: 690 },
        { race: '8R', result: 'win', payout: 2190 },
        { race: '9R', result: 'win', payout: 470 },
        { race: '10R', result: 'win', payout: 3070 },
        { race: '11R', result: 'lose', payout: 0 },
        { race: '12R', result: 'win', payout: 570 },
    ]
};


// 週間の的中結果データ（9/15〜9/19 大井競馬）
export const weeklyResults = {
    period: "9/15〜9/19",
    track: "大井競馬",
    hitRate: 81.7,
    hitCount: 49,
    totalCount: 60,
    totalPayout: 124880,
    recoveryRate: 208
};

export const dailyTabs = [
    { date: '919', hitRate: 83, label: '9/19 (83%)' },
    { date: '918', hitRate: 75, label: '9/18 (75%)' },
    { date: '917', hitRate: 83, label: '9/17 (83%)' },
    { date: '916', hitRate: 92, label: '9/16 (92%)' },
    { date: '915', hitRate: 75, label: '9/15 (75%)' },
];

export const dailyResultsData = {
    '915': [
        { race: '1R', result: 'lose', payout: 0 },
        { race: '2R', result: 'win', payout: 460 },
        { race: '3R', result: 'win', payout: 490 },
        { race: '4R', result: 'win', payout: 280 },
        { race: '5R', result: 'win', payout: 590 },
        { race: '6R', result: 'win', payout: 1280 },
        { race: '7R', result: 'lose', payout: 0 },
        { race: '8R', result: 'win', payout: 13430 },
        { race: '9R', result: 'win', payout: 440 },
        { race: '10R', result: 'win', payout: 470 },
        { race: '11R', result: 'lose', payout: 0 },
        { race: '12R', result: 'win', payout: 11500 },
    ],
    '916': [
        { race: '1R', result: 'win', payout: 4220 },
        { race: '2R', result: 'win', payout: 410 },
        { race: '3R', result: 'win', payout: 1000 },
        { race: '4R', result: 'win', payout: 1720 },
        { race: '5R', result: 'win', payout: 1730 },
        { race: '6R', result: 'win', payout: 620 },
        { race: '7R', result: 'win', payout: 2190 },
        { race: '8R', result: 'win', payout: 8100 },
        { race: '9R', result: 'win', payout: 190 },
        { race: '10R', result: 'win', payout: 1410 },
        { race: '11R', result: 'lose', payout: 0 },
        { race: '12R', result: 'win', payout: 500 },
    ],
    '917': [
        { race: '1R', result: 'win', payout: 2250 },
        { race: '2R', result: 'win', payout: 1060 },
        { race: '3R', result: 'win', payout: 2380 },
        { race: '4R', result: 'lose', payout: 0 },
        { race: '5R', result: 'win', payout: 3300 },
        { race: '6R', result: 'win', payout: 330 },
        { race: '7R', result: 'win', payout: 550 },
        { race: '8R', result: 'win', payout: 5580 },
        { race: '9R', result: 'win', payout: 4110 },
        { race: '10R', result: 'lose', payout: 0 },
        { race: '11R', result: 'win', payout: 1700 },
        { race: '12R', result: 'win', payout: 7600 },
    ],
    '918': [
        { race: '1R', result: 'lose', payout: 0 },
        { race: '2R', result: 'lose', payout: 0 },
        { race: '3R', result: 'win', payout: 3030 },
        { race: '4R', result: 'lose', payout: 0 },
        { race: '5R', result: 'win', payout: 5680 },
        { race: '6R', result: 'win', payout: 320 },
        { race: '7R', result: 'win', payout: 2300 },
        { race: '8R', result: 'win', payout: 270 },
        { race: '9R', result: 'win', payout: 2650 },
        { race: '10R', result: 'win', payout: 4820 },
        { race: '11R', result: 'win', payout: 710 },
        { race: '12R', result: 'win', payout: 5290 },
    ],
    '919': [
        { race: '1R', result: 'win', payout: 2890 },
        { race: '2R', result: 'win', payout: 4160 },
        { race: '3R', result: 'win', payout: 940 },
        { race: '4R', result: 'win', payout: 3870 },
        { race: '5R', result: 'win', payout: 1070 },
        { race: '6R', result: 'lose', payout: 0 },
        { race: '7R', result: 'win', payout: 690 },
        { race: '8R', result: 'win', payout: 2190 },
        { race: '9R', result: 'win', payout: 470 },
        { race: '10R', result: 'win', payout: 3070 },
        { race: '11R', result: 'lose', payout: 0 },
        { race: '12R', result: 'win', payout: 570 },
    ],
};

---

<BaseLayout title="スタンダード会員予想" description={`AI技術による${track}後半3レース（10R, 11R, 12R）の詳細分析。機械学習モデルによる高精度予想のスタンダード版を提供中。`}>
    <AccessControl requiredPlan="standard">
        <div class="page-container">
        <!-- ヘッダーセクション -->
        <div class="header-section">
            <div class="ai-badge">
                <span class="pulse"></span>
                <span class="ai-status">AI分析完了</span>
            </div>
            <h1 class="race-title">{formattedDate} {track} - 後半3レース予想</h1>
            <div class="ai-metrics">
                <div class="metric">
                    <div class="metric-value">{standardRaces.length}</div>
                    <div class="metric-label">分析レース数</div>
                </div>
                <div class="metric">
                    <div class="metric-value">3</div>
                    <div class="metric-label">高信頼度レース</div>
                </div>
                <div class="metric">
                    <div class="metric-value">A</div>
                    <div class="metric-label">総合推奨度</div>
                </div>
                <div class="metric">
                    <div class="metric-value">145%</div>
                    <div class="metric-label">全体期待回収率</div>
                </div>
            </div>
        </div>

        <!-- 昨日の結果セクション -->
        <section style="margin-bottom: 60px;">
            <div class="analysis-section">
                <h2 style="font-size: 2.5rem; font-weight: 800; color: var(--primary-color); text-align: center; margin-bottom: 15px;">
                    🏆 昨日の的中結果
                </h2>
                <p style="text-align: center; color: var(--body-text-color); font-size: 1.1rem; margin-bottom: 40px; opacity: 0.9;">
                    {yesterdayResults.date} {yesterdayResults.track}での予想成績
                </p>

                <!-- 昨日のサマリー統計 -->
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 20px; max-width: 900px; margin-left: auto; margin-right: auto;">
                    <div style="background: linear-gradient(135deg, rgba(16, 185, 129, 0.15) 0%, rgba(34, 197, 94, 0.1) 100%); border: 2px solid rgba(16, 185, 129, 0.3); border-radius: 16px; padding: 25px; text-align: center;">
                        <div style="font-size: 3rem; font-weight: 800; color: #10b981; margin-bottom: 10px;">
                            {yesterdayResults.hitRate}%
                        </div>
                        <div style="color: var(--body-text-color); font-weight: 600;">
                            的中率 ({yesterdayResults.hitCount}/{yesterdayResults.totalCount})
                        </div>
                    </div>

                    <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.15) 0%, rgba(99, 102, 241, 0.1) 100%); border: 2px solid rgba(59, 130, 246, 0.3); border-radius: 16px; padding: 25px; text-align: center;">
                        <div style="font-size: 3rem; font-weight: 800; color: #3b82f6; margin-bottom: 10px;">
                            ¥{yesterdayResults.totalPayout.toLocaleString()}
                        </div>
                        <div style="color: var(--body-text-color); font-weight: 600;">
                            総配当金額
                        </div>
                    </div>

                    <div style="background: linear-gradient(135deg, rgba(139, 92, 246, 0.15) 0%, rgba(236, 72, 153, 0.1) 100%); border: 2px solid rgba(139, 92, 246, 0.3); border-radius: 16px; padding: 25px; text-align: center;">
                        <div style="font-size: 3rem; font-weight: 800; color: #8b5cf6; margin-bottom: 10px;">
                            {yesterdayResults.recoveryRate}%
                        </div>
                        <div style="color: var(--body-text-color); font-weight: 600;">
                            回収率
                        </div>
                    </div>
                </div>

                <!-- 昨日のレース詳細結果 -->
                <div style="background: rgba(255, 255, 255, 0.03); border-radius: 16px; padding: 30px; border: 1px solid rgba(148, 163, 184, 0.1); margin-top: 30px;">
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 12px; max-width: 1000px; margin: 0 auto;">
                        {yesterdayResults.results.map((race) => (
                            <div style={`display: flex; flex-direction: column; align-items: center; padding: 15px 10px; ${race.result === 'win'
                                ? 'background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.1) 100%); border: 1px solid rgba(16, 185, 129, 0.3);'
                                : 'background: rgba(239, 68, 68, 0.1); border: 1px solid rgba(239, 68, 68, 0.2);'} border-radius: 12px;`}>
                                <span style="color: var(--body-text-color); font-weight: 600; font-size: 0.9rem; margin-bottom: 8px;">{race.race}</span>
                                <span style={`font-size: 1.3rem; ${race.result === 'win' ? 'color: #10b981;' : 'color: #ef4444;'}`}>
                                    {race.result === 'win' ? '⭕' : '❌'}
                                </span>
                                {race.result === 'win' ? (
                                    <>
                                        <span style="color: #10b981; font-weight: 700; font-size: 0.75rem; opacity: 0.8;">馬単</span>
                                        <span style="color: #10b981; font-weight: 700; font-size: 0.85rem; margin-top: 2px;">¥{race.payout.toLocaleString()}</span>
                                    </>
                                ) : (
                                    <span style="color: #6b7280; font-size: 0.85rem; margin-top: 5px;">-</span>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </section>

        <!-- スタンダード会員バッジ -->
        <div class="premium-status">
            <span class="premium-icon">⭐</span>
            <span class="premium-status-text">スタンダード会員限定コンテンツ</span>
        </div>

        <!-- スタンダードレースアコーディオン（データドリブン） -->
        {standardRaces.map((raceData) => {
            const raceNum = raceData.raceNumber.replace('R', '');
            const isMainRace = raceData.isMainRace;

            // 🛡️ 復活防止対策: データ正規化システム安全使用
            const normalizedHorses = normalizeHorseData(raceData) || [];
            const raceHorses = Array.isArray(normalizedHorses) ? normalizedHorses : []; // 正規化されたデータを使用

            console.log(`🔍 Race ${raceData.raceNumber} - raceHorses長:`, raceHorses.length);

            // データ整合性チェック（開発環境でのみログ出力）
            const integrity = validateDataIntegrity(raceData);
            if (integrity.length > 0) {
                console.warn(`Race ${raceData.raceNumber} integrity issues:`, integrity);
            }

            // 戦略データ取得（JSONデータ完全優先システム）
            // 🔒 動的生成を完全に無効化し、JSONデータのみ使用
            let raceStrategies;

            // JSONデータが存在するかチェック（一つでも存在すればJSON使用）
            const hasJsonStrategies = raceData.strategies &&
                (raceData.strategies.safe || raceData.strategies.balance || raceData.strategies.aggressive);

            if (hasJsonStrategies) {
                // JSONデータを完全優先使用
                console.log(`🔒 Race ${raceData.raceNumber}: JSONデータ完全使用（動的生成無効）`);
                raceStrategies = raceData.strategies;

                // JSONデータの内容を確認ログ
                if (raceStrategies.safe?.bets) {
                    console.log(`  ✅ Safe: ${raceStrategies.safe.bets.length}件の買い目`);
                }
                if (raceStrategies.balance?.bets) {
                    console.log(`  ✅ Balance: ${raceStrategies.balance.bets.length}件の買い目`);
                }
                if (raceStrategies.aggressive?.bets) {
                    console.log(`  ✅ Aggressive: ${raceStrategies.aggressive.bets.length}件の買い目`);
                }
            } else {
                // JSONデータがない場合のみ動的生成（フォールバック）
                console.warn(`⚠️ Race ${raceData.raceNumber}: JSONデータが存在しません。フォールバックとして動的生成を使用`);
                const processedData = getPredictionDataWithStrategies(raceData.horses);
                raceStrategies = processedData.strategies;
            }

            // リスク表示用のスコア変数を定義
            const raceMainHorseScore = getHorseConfidenceFromMark(raceData.horses.main);
            const raceSubHorseScore = getHorseConfidenceFromMark(raceData.horses.sub);

            // プログレスバー用の計算（戦略A/B/C）🔧引数順序修正
            const progressBarA = calculateProgressBarConfidence('A', raceMainHorseScore);
            const progressBarB = calculateProgressBarConfidence('B', raceMainHorseScore, raceSubHorseScore);
            const progressBarC = calculateProgressBarConfidence('C', raceMainHorseScore, raceSubHorseScore);

            return (
                <div class={`race-${raceNum}r-accordion`}>
                    <div class="race-accordion-header" onclick={`toggleRace${raceNum}R()`}>
                        <div class="race-basic-info">
                            <span class="race-number">{raceData.raceNumber}</span>
                            <span class="race-name">{(raceData.raceName || '競走名').replace(/\s*[ダ芝]\d+[,.]?\d*m.*$/, '').replace(/\s*（\d+頭）.*$/, '').replace(/\s*発走時刻.*$/, '')}</span>
                            <span class="race-tier-badge">{`第${raceNum}レース`}</span>
                            {isMainRace && <span class="main-race-badge">メインレース</span>}
                        </div>
                        <div class="race-preview">
                            <span class="toggle-icon" id={`toggle-${raceNum}r`}>▼</span>
                        </div>
                    </div>

                    <div class="race-accordion-content" id={`race-${raceNum}r`} style="max-height: 0; opacity: 0;">
                        <div class={`race-content-${raceNum}r`}>

                            <!-- レース詳細情報 -->
                            <div class="race-details-info">
                                <h3 class="race-detail-title">{raceData.raceNumber} {raceData.raceName || '競走名'}</h3>
                            </div>

                            <!-- AI選出馬分析 -->
                            <div class="analysis-section">
                                <h2 class="section-title">
                                    <span>🤖</span>
                                    <span>AIモデル選出馬 - XGBoost×LSTM統合分析</span>
                                </h2>

                                {/* 20年運営対応: role-based表示（本命）- 最も大きく表示 */}
                                {Array.isArray(raceHorses) && raceHorses.filter(h => h?.role === '本命').map((horse, index) => {
                                    const roleConfig = getRoleDisplayConfig(horse.role);
                                    return (
                                    <div class="horse-card horse-card-main">
                                        <div class="horse-header">
                                            <div>
                                                <span class={roleConfig.markClass}>{horse.displayMark}</span>
                                                <span class="horse-number">{horse.number}</span>
                                                <span class="horse-name">{horse.name}</span>
                                                <span class={roleConfig.typeClass} style={roleConfig.style}>{horse.role}</span>
                                            </div>
                                        </div>
                                        <div class="ai-factors">
                                            {/* 累積スコアと星評価のみ表示 */}
                                            {horse.factors && horse.factors.filter(factor =>
                                                factor.text.includes('累積スコア') ||
                                                factor.text.includes('総合評価')
                                            ).map(factor => (
                                                <div class="factor">
                                                    <span class="factor-icon">{factor.icon}</span>
                                                    <span>{factor.text}</span>
                                                </div>
                                            ))}
                                        </div>

                                        {/* 本命馬のみ特徴量重要度を表示 */}
                                        {raceData.horses?.main?.importance && (
                                            <div class="feature-importance">
                                                <h4 style="color: #94a3b8; font-size: 0.9rem; margin-bottom: 10px;">特徴量重要度</h4>
                                                {raceData.horses.main.importance.map(item => (
                                                    <div class="importance-bar">
                                                        <span class="importance-label">{item.label}</span>
                                                        <div class="importance-value">
                                                            <div class="importance-fill" style={`width: ${item.value * 100}%;`}>{Math.round(item.value * 100)}%</div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                    );
                                })}

                                {/* 20年運営対応: role-based表示（対抗）- 中サイズで表示 */}
                                {Array.isArray(raceHorses) && raceHorses.filter(h => h?.role === '対抗').map((horse, index) => {
                                    const roleConfig = getRoleDisplayConfig(horse.role);
                                    return (
                                    <div class="horse-card horse-card-sub">
                                        <div class="horse-header">
                                            <div>
                                                <span class={roleConfig.markClass}>{horse.displayMark}</span>
                                                <span class="horse-number">{horse.number}</span>
                                                <span class="horse-name">{horse.name}</span>
                                                <span class={roleConfig.typeClass} style={roleConfig.style}>{horse.role}</span>
                                            </div>
                                        </div>
                                        <div class="ai-factors">
                                            {/* 累積スコアと星評価のみ表示 */}
                                            {horse.factors && horse.factors.filter(factor =>
                                                factor.text.includes('累積スコア') ||
                                                factor.text.includes('総合評価')
                                            ).map(factor => (
                                                <div class="factor">
                                                    <span class="factor-icon">{factor.icon}</span>
                                                    <span>{factor.text}</span>
                                                </div>
                                            ))}
                                        </div>

                                        {/* 対抗馬の特徴量重要度を表示 */}
                                        {raceData.horses?.sub?.importance && (
                                            <div class="feature-importance">
                                                <h4 style="color: #94a3b8; font-size: 0.9rem; margin-bottom: 10px;">特徴量重要度</h4>
                                                {raceData.horses.sub.importance.map(item => (
                                                    <div class="importance-bar">
                                                        <span class="importance-label">{item.label}</span>
                                                        <div class="importance-value">
                                                            <div class="importance-fill" style={`width: ${item.value * 100}%;`}>{Math.round(item.value * 100)}%</div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                    );
                                })}

                                {/* 20年運営対応: role-based表示（単穴）- 中サイズで表示 */}
                                {Array.isArray(raceHorses) && raceHorses.filter(h => h?.role === '単穴').map((horse, index) => {
                                    const roleConfig = getRoleDisplayConfig(horse.role);
                                    return (
                                    <div class="horse-card horse-card-sub">
                                        <div class="horse-header">
                                            <div>
                                                <span class={roleConfig.markClass}>{horse.displayMark}</span>
                                                <span class="horse-number">{horse.number}</span>
                                                <span class="horse-name">{horse.name}</span>
                                                <span class={roleConfig.typeClass} style={roleConfig.style}>{horse.role}</span>
                                            </div>
                                        </div>
                                        <div class="ai-factors">
                                            {/* 累積スコアと星評価のみ表示 */}
                                            {horse.factors && horse.factors.filter(factor =>
                                                factor.text.includes('累積スコア') ||
                                                factor.text.includes('総合評価')
                                            ).map(factor => (
                                                <div class="factor">
                                                    <span class="factor-icon">{factor.icon}</span>
                                                    <span>{factor.text}</span>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    );
                                })}

                                {/* 20年運営対応: role-based表示（連下）- まとめて表示 */}
                                {raceHorses && raceHorses.filter(h => h.role === '連下').length > 0 && (
                                    <div class="horse-card horse-card-minor">
                                        <div class="horse-header">
                                            <div>
                                                <span class="horse-mark-minor">{raceHorses.find(h => h.role === '連下')?.displayMark || '△'}</span>
                                                <span style="color: #f59e0b; font-weight: 600;">連下候補馬</span>
                                            </div>
                                        </div>
                                        <div class="horse-grid">
                                            {Array.isArray(raceHorses) && raceHorses.filter(h => h?.role === '連下').map(horse => {
                                                const scoreText = horse.factors?.find(f => f.text.includes('累積スコア'))?.text;
                                                const score = scoreText ? scoreText.match(/\d+/)?.[0] : '';
                                                return (
                                                    <div class="horse-grid-item">
                                                        <span class="horse-number-small">{horse.number}</span>
                                                        <span class="horse-name-small">{horse.name}{score ? `(${score}pt)` : ''}</span>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    </div>
                                )}

                                {/* 20年運営対応: role-based表示（押さえ）- まとめて表示 */}
                                {raceHorses && raceHorses.filter(h => h.role === '押さえ').length > 0 && (
                                    <div class="horse-card horse-card-minor">
                                        <div class="horse-header">
                                            <div>
                                                <span class="horse-mark-minor">{raceHorses.find(h => h.role === '押さえ')?.displayMark || '×'}</span>
                                                <span style="color: #64748b; font-weight: 600;">抑え候補馬</span>
                                            </div>
                                        </div>
                                        <div class="horse-grid">
                                            {Array.isArray(raceHorses) && raceHorses.filter(h => h?.role === '押さえ').map(horse => {
                                                const scoreText = horse.factors?.find(f => f.text.includes('累積スコア'))?.text;
                                                const score = scoreText ? scoreText.match(/\d+/)?.[0] : '';
                                                return (
                                                    <div class="horse-grid-item">
                                                        <span class="horse-number-small">{horse.number}</span>
                                                        <span class="horse-name-small">{horse.name}{score ? `(${score}pt)` : ''}</span>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    </div>
                                )}
                            </div>

                            <!-- AI推奨投資戦略 -->
                            {raceStrategies && (
                                <div class="recommendation-section">
                                    <h2 class="section-title">
                                        <span>📊</span>
                                        <span>AI推奨投資戦略 - 最適化買い目</span>
                                    </h2>

                                    <!-- 戦略1: 少点数的中型モデル -->
                                    {raceStrategies.safe && (
                                        <div class="bet-strategy">
                                            <div class="strategy-title">🎯 少点数的中型モデル</div>
                                            <div class="bet-list">
                                                {raceData.strategies?.safe?.bets && raceData.strategies.safe.bets.map(bet => {
                                                    // 🔧 復活防止対策: JSONデータ構造に対応した取得方法
                                                    const betStr = typeof bet === 'string' ? bet : (bet?.numbers || bet?.horses || JSON.stringify(bet));

                                                    // 🔧 点数計算修正: 「X点」表記から正確に抽出
                                                    let points = 1; // デフォルト
                                                    if (betStr && typeof betStr === 'string') {
                                                        // 「3点」のような表記から点数を抽出
                                                        const pointMatch = betStr.match(/(\d+)点/);
                                                        if (pointMatch) {
                                                            points = parseInt(pointMatch[1]);
                                                        } else {
                                                            // フォールバック: 従来の計算方法
                                                            if (betStr.includes('⇔')) {
                                                                const parts = betStr.split('⇔');
                                                                if (parts.length === 2) {
                                                                    const leftHorses = parts[0].trim().split(',').filter(h => h.trim());
                                                                    const rightHorses = parts[1].trim().split(/[,、]/).filter(h => h.trim());
                                                                    points = leftHorses.length * rightHorses.length * 2;
                                                                }
                                                            } else if (betStr.includes('→')) {
                                                                const parts = betStr.split('→');
                                                                if (parts.length === 2) {
                                                                    const leftHorses = parts[0].trim().split(',').filter(h => h.trim());
                                                                    const rightHorses = parts[1].trim().split(/[,、]/).filter(h => h.trim());
                                                                    points = leftHorses.length * rightHorses.length;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    // 買い目表示用: 点数表記を除いた馬券部分のみ表示
                                                    const displayBet = betStr.replace(/\s*\d+点\s*$/, '');

                                                    return (
                                                    <div class="bet-item">
                                                        <span class="bet-type">馬単</span>
                                                        <span class="bet-horses">{displayBet}</span>
                                                        <span class="bet-points">{points}点</span>
                                                    </div>
                                                );
                                            })}
                                            </div>

                                            <!-- プログレスバー信頼値 -->
                                            <ProgressBarConfidence
                                                strategyType="A"
                                                progressConfidence={progressBarA.progressConfidence}
                                                baseScore={progressBarA.baseScore}
                                                reduction={progressBarA.reduction}
                                                strategyTitle="🎯 少点数的中型モデル"
                                            />

                                            <div class="strategy-features">
                                                <div class="feature-item">
                                                    <span class="feature-label">🎯 的中重視</span>
                                                    <span class="feature-badge blue">中</span>
                                                </div>
                                                <div class="feature-item">
                                                    <span class="feature-label">💰 配当期待</span>
                                                    <span class="feature-badge gray">低</span>
                                                </div>
                                            </div>
                                        </div>
                                    )}

                                    <!-- 戦略2: バランス型 -->
                                    {raceStrategies.balance && (
                                        <div class="bet-strategy">
                                            <div class="strategy-title">⚖️ バランス型モデル</div>
                                            <div class="bet-list">
                                                {raceData.strategies?.balance?.bets && raceData.strategies.balance.bets.map(bet => {
                                                    // 🔧 復活防止対策: JSONデータ構造に対応した取得方法
                                                    const betStr = typeof bet === 'string' ? bet : (bet?.numbers || bet?.horses || JSON.stringify(bet) || '');

                                                    // 🔧 点数計算修正: 「X点」表記から正確に抽出
                                                    let points = 1; // デフォルト
                                                    if (betStr && typeof betStr === 'string') {
                                                        // 「3点」のような表記から点数を抽出
                                                        const pointMatch = betStr.match(/(\d+)点/);
                                                        if (pointMatch) {
                                                            points = parseInt(pointMatch[1]);
                                                        } else {
                                                            // フォールバック: 従来の計算方法
                                                            if (betStr.includes('⇔')) {
                                                                const parts = betStr.split('⇔');
                                                                if (parts.length === 2) {
                                                                    const leftHorses = parts[0].trim().split(',').filter(h => h.trim());
                                                                    const rightHorses = parts[1].trim().split(/[,、]/).filter(h => h.trim());
                                                                    points = leftHorses.length * rightHorses.length * 2;
                                                                }
                                                            } else if (betStr.includes('→')) {
                                                                const parts = betStr.split('→');
                                                                if (parts.length === 2) {
                                                                    const leftHorses = parts[0].trim().split(',').filter(h => h.trim());
                                                                    const rightHorses = parts[1].trim().split(/[,、]/).filter(h => h.trim());
                                                                    points = leftHorses.length * rightHorses.length;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    // 買い目表示用: 点数表記を除いた馬券部分のみ表示
                                                    const displayBet = betStr.replace(/\s*\d+点\s*$/, '');

                                                    return (
                                                        <div class="bet-item">
                                                            <span class="bet-type">馬単</span>
                                                            <span class="bet-horses">{displayBet}</span>
                                                            <span class="bet-points">{points}点</span>
                                                        </div>
                                                    );
                                                })}
                                            </div>

                                            <!-- プログレスバー信頼値 -->
                                            <ProgressBarConfidence
                                                strategyType="B"
                                                progressConfidence={progressBarB.progressConfidence}
                                                baseScore={progressBarB.baseScore}
                                                reduction={progressBarB.reduction}
                                                strategyTitle="⚖️ バランス型モデル"
                                            />

                                            <div class="strategy-features">
                                                <div class="feature-item">
                                                    <span class="feature-label">🎯 的中重視</span>
                                                    <span class="feature-badge blue">中</span>
                                                </div>
                                                <div class="feature-item">
                                                    <span class="feature-label">💰 配当期待</span>
                                                    <span class="feature-badge blue">中</span>
                                                </div>
                                            </div>
                                        </div>
                                    )}

                                    <!-- 戦略3: 高配当狙い -->
                                    {raceStrategies.aggressive && (
                                        <div class="bet-strategy">
                                            <div class="strategy-title">🚀 高配当追求型モデル</div>
                                            <div class="bet-list">
                                                {raceData.strategies?.aggressive?.bets && raceData.strategies.aggressive.bets.map(bet => {
                                                    const betStr = typeof bet === 'string' ? bet : (bet?.horses || bet?.numbers || JSON.stringify(bet) || '');
                                                    let points = 1;
                                                    if (betStr && typeof betStr === 'string') {
                                                        if (betStr.includes('⇔')) {
                                                            const targets = betStr.split('⇔')[1]?.split(',').length || 1;
                                                            points = targets * 2;
                                                        } else if (betStr.includes('→')) {
                                                            const targets = betStr.split('→')[1]?.split(',').length || 1;
                                                            points = targets;
                                                        }
                                                    }

                                                    // 買い目表示用: 点数表記を除いた馬券部分のみ表示
                                                    const displayBet = betStr.replace(/\s*\d+点\s*$/, '');

                                                    return (
                                                        <div class="bet-item">
                                                            <span class="bet-type">馬単</span>
                                                            <span class="bet-horses">{displayBet}</span>
                                                            <span class="bet-points">{points}点</span>
                                                        </div>
                                                    );
                                                })}
                                            </div>

                                            <!-- プログレスバー信頼値 -->
                                            <ProgressBarConfidence
                                                strategyType="C"
                                                progressConfidence={progressBarC.progressConfidence}
                                                baseScore={progressBarC.baseScore}
                                                reduction={progressBarC.reduction}
                                                strategyTitle="🚀 高配当追求型モデル"
                                            />

                                            <div class="strategy-features">
                                                <div class="feature-item">
                                                    <span class="feature-label">🎯 的中重視</span>
                                                    <span class="feature-badge gray">低</span>
                                                </div>
                                                <div class="feature-item">
                                                    <span class="feature-label">💰 配当期待</span>
                                                    <span class="feature-badge green">高</span>
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            )}

                        </div>
                    </div>
                </div>
            );
        })}

        </div>

        <!-- プレミアムCTAバナー -->
        <section style="margin-bottom: 60px;">
            <div style="background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(251, 146, 60, 0.1) 100%); border: 2px solid rgba(245, 158, 11, 0.3); border-radius: 20px; padding: 40px; text-align: center; position: relative; overflow: hidden;">
                <!-- 背景装飾 -->
                <div style="position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: radial-gradient(circle, rgba(245, 158, 11, 0.05) 0%, transparent 70%); pointer-events: none;"></div>

                <div style="position: relative; z-index: 2;">
                    <div style="display: flex; align-items: center; justify-content: center; gap: 15px; margin-bottom: 20px;">
                        <span style="font-size: 2.5rem;">👑</span>
                        <h3 style="font-size: 2rem; font-weight: 800; background: linear-gradient(135deg, #f59e0b, #fb923c); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; margin: 0;">
                            プレミアム会員で収益最大化
                        </h3>
                        <span style="font-size: 2.5rem;">👑</span>
                    </div>

                    <p style="font-size: 1.2rem; color: var(--body-text-color); margin-bottom: 30px; line-height: 1.6; max-width: 800px; margin-left: auto; margin-right: auto;">
                        <strong style="color: #f59e0b;">全12レース完全分析</strong> + <strong style="color: #f59e0b;">特別投資戦略</strong> + <strong style="color: #f59e0b;">詳細リスク解析</strong><br>
                        月間回収率<span style="color: #f59e0b; font-weight: 800;">200%超</span>を目指す本格的な競馬投資をスタート
                    </p>

                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; max-width: 800px; margin-left: auto; margin-right: auto;">
                        <div class="premium-feature-card" style="background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3); border-radius: 15px; padding: 20px; text-align: center;">
                            <div style="font-size: 1.5rem; margin-bottom: 5px;">🎯</div>
                            <div style="font-weight: 700; color: #f59e0b; margin-bottom: 5px;">全12レース</div>
                            <div style="font-size: 0.9rem; color: var(--body-text-color);">完全AI分析</div>
                        </div>
                        <div class="premium-feature-card" style="background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3); border-radius: 15px; padding: 20px; text-align: center;">
                            <div style="font-size: 1.5rem; margin-bottom: 5px;">💎</div>
                            <div style="font-weight: 700; color: #f59e0b; margin-bottom: 5px;">特別戦略</div>
                            <div style="font-size: 0.9rem; color: var(--body-text-color);">限定アルゴリズム</div>
                        </div>
                        <div class="premium-feature-card" style="background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3); border-radius: 15px; padding: 20px; text-align: center;">
                            <div style="font-size: 1.5rem; margin-bottom: 5px;">📊</div>
                            <div style="font-weight: 700; color: #f59e0b; margin-bottom: 5px;">詳細解析</div>
                            <div style="font-size: 0.9rem; color: var(--body-text-color);">リスク最適化</div>
                        </div>
                        <div class="premium-feature-card" style="background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3); border-radius: 15px; padding: 20px; text-align: center;">
                            <div style="font-size: 1.5rem; margin-bottom: 5px;">⚡</div>
                            <div style="font-weight: 700; color: #f59e0b; margin-bottom: 5px;">即時配信</div>
                            <div style="font-size: 0.9rem; color: var(--body-text-color);">最新情報</div>
                        </div>
                    </div>

                    <div style="display: flex; flex-direction: column; align-items: center; gap: 15px;">
                        <a href="/pricing" class="premium-cta-btn" style="display: inline-flex; align-items: center; gap: 10px; background: linear-gradient(135deg, #f59e0b, #fb923c); color: white; padding: 18px 40px; border-radius: 50px; text-decoration: none; font-weight: 700; font-size: 1.2rem; box-shadow: 0 8px 25px rgba(245, 158, 11, 0.4); transition: all 0.3s ease; position: relative; overflow: hidden;">
                            <span style="position: relative; z-index: 2;">👑 プレミアム会員になる</span>
                            <div class="shine" style="position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent); transition: left 0.5s ease;"></div>
                        </a>
                    </div>
                </div>
            </div>
        </section>

        <!-- 先週の結果セクション -->
        <section style="margin-bottom: 60px;">
            <div class="analysis-section">
                <h2 style="font-size: 2.5rem; font-weight: 800; color: var(--primary-color); text-align: center; margin-bottom: 15px;">
                    🏆 先週の的中結果
                </h2>
                <p style="text-align: center; color: var(--body-text-color); font-size: 1.1rem; margin-bottom: 40px; opacity: 0.9;">
                    {weeklyResults.period} {weeklyResults.track}での予想成績
                </p>

                <!-- 先週のタブ表示 -->
                <div style="display: flex; justify-content: center; gap: 10px; margin-bottom: 30px;">
                    {dailyTabs.map((tab, index) => (
                        <button
                            type="button"
                            data-tab-index={index}
                            style={`padding: 12px 24px; border-radius: 25px; border: 2px solid; font-weight: 600; transition: all 0.3s ease; cursor: pointer; ${
                                index === 0
                                    ? 'background: linear-gradient(135deg, #3b82f6, #8b5cf6); color: white; border-color: #3b82f6;'
                                    : 'background: transparent; color: var(--body-text-color); border-color: rgba(148, 163, 184, 0.3);'
                            }`}
                            class={`tab-btn ${index === 0 ? 'active' : ''}`}
                        >
                            {tab.label}
                        </button>
                    ))}
                </div>

                <!-- タブ内容表示 -->
                {dailyTabs.map((tab, tabIndex) => {
                    const dayRaces = dailyResultsData[tab.date] || [];
                    const hitCount = dayRaces.filter(race => race.result === 'win').length;
                    const totalPayout = dayRaces.reduce((sum, race) => sum + race.payout, 0);
                    const recoveryRate = Math.round((totalPayout / (dayRaces.length * 100)) * 100);

                    return (
                        <div id={`tab-${tabIndex}`} style={`${tabIndex === 0 ? 'display: block;' : 'display: none;'}`} class="tab-content">
                            <div style="background: rgba(255, 255, 255, 0.03); border-radius: 16px; padding: 30px; border: 1px solid rgba(148, 163, 184, 0.1);">
                                <!-- 削除: 日別タイトルと統計カード
                                <div style="text-align: center; margin-bottom: 30px;">
                                    <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color); margin-bottom: 10px;">
                                        {tab.date.slice(0, 2)}/{tab.date.slice(2)} 大井競馬
                                    </div>
                                    <div style="display: flex; justify-content: center; gap: 30px; flex-wrap: wrap;">
                                        <div style="text-align: center;">
                                            <div style="font-size: 2rem; font-weight: 800; color: #10b981;">{tab.hitRate}%</div>
                                            <div style="color: var(--body-text-color); font-weight: 600; font-size: 0.9rem;">的中率</div>
                                        </div>
                                        <div style="text-align: center;">
                                            <div style="font-size: 2rem; font-weight: 800; color: #3b82f6;">¥{totalPayout.toLocaleString()}</div>
                                            <div style="color: var(--body-text-color); font-weight: 600; font-size: 0.9rem;">総配当</div>
                                        </div>
                                        <div style="text-align: center;">
                                            <div style="font-size: 2rem; font-weight: 800; color: #8b5cf6;">{recoveryRate}%</div>
                                            <div style="color: var(--body-text-color); font-weight: 600; font-size: 0.9rem;">回収率</div>
                                        </div>
                                    </div>
                                </div>
                                -->

                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 12px; max-width: 1000px; margin: 0 auto;">
                                    {dayRaces.map((race) => (
                                        <div style={`display: flex; flex-direction: column; align-items: center; padding: 15px 10px; ${race.result === 'win'
                                            ? 'background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.1) 100%); border: 1px solid rgba(16, 185, 129, 0.3);'
                                            : 'background: rgba(239, 68, 68, 0.1); border: 1px solid rgba(239, 68, 68, 0.2);'} border-radius: 12px;`}>
                                            <span style="color: var(--body-text-color); font-weight: 600; font-size: 0.9rem; margin-bottom: 8px;">{race.race}</span>
                                            <span style={`font-size: 1.3rem; ${race.result === 'win' ? 'color: #10b981;' : 'color: #ef4444;'}`}>
                                                {race.result === 'win' ? '⭕' : '❌'}
                                            </span>
                                            {race.result === 'win' ? (
                                                <>
                                                    <span style="color: #10b981; font-weight: 700; font-size: 0.75rem; opacity: 0.8;">馬単</span>
                                                    <span style="color: #10b981; font-weight: 700; font-size: 0.85rem; margin-top: 2px;">¥{race.payout.toLocaleString()}</span>
                                                </>
                                            ) : (
                                                <span style="color: #6b7280; font-size: 0.85rem; margin-top: 5px;">-</span>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    );
                })}
            </div>
        </section>

    </AccessControl>
</BaseLayout>

<script>
// DOMContentLoadedでタブボタンにイベントリスナーを追加
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.tab-btn').forEach((btn, index) => {
        btn.addEventListener('click', function() {
            const tabIndex = parseInt(this.getAttribute('data-tab-index'));
            switchTab(tabIndex);
        });
    });
});

function switchTab(tabIndex) {
    // 全てのタブコンテンツを非表示にする
    document.querySelectorAll('.tab-content').forEach(content => {
        content.style.display = 'none';
    });

    // 全てのタブボタンを非アクティブ状態にする
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
        btn.style.background = 'transparent';
        btn.style.color = 'var(--body-text-color)';
        btn.style.borderColor = 'rgba(148, 163, 184, 0.3)';
    });

    // 選択されたタブコンテンツを表示
    const selectedContent = document.getElementById(`tab-${tabIndex}`);
    if (selectedContent) {
        selectedContent.style.display = 'block';
    }

    // 選択されたタブボタンをアクティブ状態にする
    const selectedBtn = document.querySelectorAll('.tab-btn')[tabIndex];
    if (selectedBtn) {
        selectedBtn.classList.add('active');
        selectedBtn.style.background = 'linear-gradient(135deg, #3b82f6, #8b5cf6)';
        selectedBtn.style.color = 'white';
        selectedBtn.style.borderColor = '#3b82f6';
    }
}
</script>

<style>
    body {
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        color: #e2e8f0;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        margin: 0;
        padding: 0;
        line-height: 1.6;
    }

    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px 20px;
    }

    .header-section {
        background: linear-gradient(135deg, rgba(139, 92, 246, 0.1) 0%, rgba(59, 130, 246, 0.1) 100%);
        border-radius: 20px;
        padding: 40px;
        margin-bottom: 40px;
        border: 1px solid rgba(139, 92, 246, 0.2);
        text-align: center;
    }

    .ai-badge {
        display: inline-flex;
        align-items: center;
        gap: 10px;
        background: rgba(16, 185, 129, 0.1);
        border: 1px solid rgba(16, 185, 129, 0.3);
        padding: 8px 20px;
        border-radius: 25px;
        margin-bottom: 20px;
    }

    .pulse {
        width: 8px;
        height: 8px;
        background: #10b981;
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(16, 185, 129, 0); }
        100% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0); }
    }

    .ai-status {
        color: #10b981;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .race-title {
        font-size: 2.5rem;
        font-weight: 800;
        background: linear-gradient(135deg, #8b5cf6, #3b82f6);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 30px;
        line-height: 1.2;
    }

    .ai-metrics {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 30px;
    }

    .metric {
        text-align: center;
        padding: 20px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .metric-value {
        font-size: 2rem;
        font-weight: 800;
        color: #3b82f6;
        margin-bottom: 5px;
    }

    .metric-label {
        color: #94a3b8;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .premium-status {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        color: white;
        padding: 15px 30px;
        border-radius: 25px;
        margin-bottom: 30px;
        font-weight: 600;
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
    }

    .premium-icon {
        font-size: 1.2rem;
    }

    .upgrade-banner {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(251, 146, 60, 0.1) 100%);
        border: 1px solid rgba(245, 158, 11, 0.3);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 30px;
    }

    .upgrade-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .upgrade-text {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #e2e8f0;
        font-weight: 600;
    }

    .upgrade-icon {
        font-size: 1.5rem;
    }

    .upgrade-btn-small {
        background: linear-gradient(135deg, #f59e0b, #fb923c);
        color: white;
        padding: 10px 20px;
        border-radius: 20px;
        text-decoration: none;
        font-weight: 600;
        font-size: 0.9rem;
        transition: transform 0.2s;
    }

    .upgrade-btn-small:hover {
        transform: scale(1.05);
    }

    /* アコーディオン統一スタイル */
    [class*="race-"][class*="r-accordion"] {
        background: rgba(16, 185, 129, 0.05);
        border-radius: 12px;
        border: 1px solid rgba(16, 185, 129, 0.2);
        margin-bottom: 25px;
        overflow: hidden;
    }

    .race-accordion-header {
        padding: 20px 25px;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(16, 185, 129, 0.05) 100%);
        transition: all 0.3s ease;
        border-bottom: 1px solid rgba(16, 185, 129, 0.2);
    }

    .race-accordion-header:hover {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.15) 0%, rgba(16, 185, 129, 0.08) 100%);
    }

    .race-basic-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .race-number {
        background: linear-gradient(135deg, #8b5cf6, #7c3aed);
        color: white;
        padding: 8px 15px;
        border-radius: 8px;
        font-weight: 700;
        font-size: 1.1rem;
    }

    .race-name {
        color: #e2e8f0;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .race-tier-badge {
        background: rgba(16, 185, 129, 0.2);
        color: #10b981;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .race-start-time {
        background: rgba(59, 130, 246, 0.2);
        color: #3b82f6;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
        margin-left: 6px;
    }

    .main-race-badge {
        background: linear-gradient(135deg, #f59e0b, #fb923c);
        color: white;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 700;
        text-transform: uppercase;
        animation: pulse-gold 2s infinite;
    }

    @keyframes pulse-gold {
        0%, 100% { box-shadow: 0 0 5px rgba(245, 158, 11, 0.5); }
        50% { box-shadow: 0 0 20px rgba(245, 158, 11, 0.8); }
    }

    .toggle-icon {
        font-size: 1.2rem;
        color: #10b981;
        transition: transform 0.3s ease;
    }

    .race-accordion-content {
        overflow: hidden;
        transition: all 0.3s ease;
        background: rgba(15, 23, 42, 0.95);
    }

    .analysis-section {
        margin-bottom: 40px;
        padding: 30px;
        background: rgba(30, 41, 59, 0.7);
        border-radius: 15px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .section-title {
        display: flex;
        align-items: center;
        gap: 12px;
        font-size: 1.4rem;
        font-weight: 700;
        color: #e2e8f0;
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 2px solid rgba(139, 92, 246, 0.3);
    }

    .section-title span:first-child {
        font-size: 1.5rem;
    }

    .horse-card {
        background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.8) 100%);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 20px;
        border: 1px solid rgba(100, 116, 139, 0.3);
        transition: all 0.3s ease;
    }

    .horse-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        border-color: rgba(139, 92, 246, 0.5);
    }

    .horse-card-main {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(30, 41, 59, 0.9) 100%);
    }

    .horse-card-sub {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(30, 41, 59, 0.9) 100%);
    }

    .horse-card-minor {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(30, 41, 59, 0.9) 100%);
    }

    .horse-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .horse-mark-main {
        font-size: 1.8rem;
        color: #10b981;
        font-weight: 900;
        margin-right: 10px;
    }

    .horse-mark-sub {
        font-size: 1.5rem;
        color: #3b82f6;
        font-weight: 900;
        margin-right: 10px;
    }

    .horse-mark-minor {
        font-size: 1.3rem;
        color: #f59e0b;
        font-weight: 900;
        margin-right: 10px;
    }

    .horse-number {
        background: linear-gradient(135deg, #8b5cf6, #7c3aed);
        color: white;
        padding: 4px 10px;
        border-radius: 6px;
        font-weight: 700;
        margin-right: 15px;
        font-size: 0.9rem;
    }

    .horse-name {
        font-size: 1.2rem;
        font-weight: 700;
        color: #e2e8f0;
        margin-right: 15px;
    }

    .ai-factors {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 15px;
    }

    .factor {
        display: flex;
        align-items: center;
        gap: 8px;
        background: rgba(139, 92, 246, 0.1);
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 0.9rem;
        color: #e2e8f0;
        border: 1px solid rgba(139, 92, 246, 0.2);
    }

    .factor-icon {
        color: #8b5cf6;
        font-weight: 600;
    }

    .feature-importance {
        margin-top: 20px;
        padding: 20px;
        background: rgba(15, 23, 42, 0.8);
        border-radius: 10px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .importance-bar {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 12px;
    }

    .importance-label {
        min-width: 120px;
        color: #94a3b8;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .importance-value {
        flex: 1;
        height: 16px;
        background: rgba(100, 116, 139, 0.3);
        border-radius: 8px;
        position: relative;
        overflow: hidden;
    }

    .importance-fill {
        height: 100%;
        background: linear-gradient(90deg, #8b5cf6, #3b82f6);
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        font-weight: 600;
        color: white;
        transition: width 0.8s ease;
    }

    .horse-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 15px;
    }

    .horse-grid-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        background: rgba(15, 23, 42, 0.6);
        border-radius: 8px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .horse-number-small {
        background: linear-gradient(135deg, #6b7280, #4b5563);
        color: white;
        padding: 3px 8px;
        border-radius: 4px;
        font-weight: 700;
        font-size: 0.8rem;
        min-width: 25px;
        text-align: center;
    }

    .horse-name-small {
        color: #e2e8f0;
        font-weight: 600;
        font-size: 0.85rem;
    }

    .recommendation-section {
        margin-bottom: 40px;
        padding: 30px;
        background: rgba(30, 41, 59, 0.7);
        border-radius: 15px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .bet-strategy {
        background: rgba(15, 23, 42, 0.8);
        border-radius: 12px;
        padding: 25px;
        margin-bottom: 25px;
        border: 1px solid rgba(100, 116, 139, 0.3);
        transition: all 0.3s ease;
    }

    .bet-strategy:hover {
        border-color: rgba(139, 92, 246, 0.5);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .strategy-title {
        font-size: 1.2rem;
        font-weight: 700;
        color: #e2e8f0;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .bet-list {
        margin-bottom: 20px;
    }

    .bet-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 15px;
        margin-bottom: 10px;
        background: rgba(30, 41, 59, 0.6);
        border-radius: 8px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .bet-type {
        background: linear-gradient(135deg, #8b5cf6, #7c3aed);
        color: white;
        padding: 4px 12px;
        border-radius: 15px;
        font-weight: 600;
        font-size: 0.85rem;
        min-width: 60px;
        text-align: center;
    }

    .bet-horses {
        color: #e2e8f0;
        font-weight: 600;
        flex: 1;
        text-align: center;
    }

    .bet-points {
        color: #10b981;
        font-weight: 700;
        background: rgba(16, 185, 129, 0.1);
        padding: 4px 10px;
        border-radius: 15px;
        border: 1px solid rgba(16, 185, 129, 0.3);
    }


    /* レスポンシブ対応 */
    @media (max-width: 768px) {
        .page-container {
            padding: 20px 15px;
        }

        .race-title {
            font-size: 1.8rem;
        }

        .ai-metrics {
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .horse-card {
            padding: 20px;
        }

        .race-accordion-header {
            padding: 15px 20px;
        }

        .race-basic-info {
            flex-wrap: wrap;
            gap: 10px;
        }

        .horse-grid {
            grid-template-columns: 1fr;
        }

        .importance-label {
            min-width: 100px;
            font-size: 0.8rem;
        }

        .upgrade-content {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }
    }

    /* 戦略特徴バッジ */
    .strategy-features {
        display: flex;
        gap: 12px;
        margin-top: 10px;
        flex-wrap: wrap;
    }

    .feature-item {
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .feature-label {
        font-size: 0.85rem;
        color: #94a3b8;
    }

    .feature-badge {
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .feature-badge.green {
        background: rgba(16, 185, 129, 0.2);
        color: #10b981;
    }

    .feature-badge.blue {
        background: rgba(59, 130, 246, 0.2);
        color: #3b82f6;
    }

    .feature-badge.gray {
        background: rgba(148, 163, 184, 0.2);
        color: #94a3b8;
    }

    /* レース詳細情報スタイル */
    .race-details-info {
        padding: 20px 30px;
        background: rgba(15, 23, 42, 0.6);
        border-radius: 10px;
        margin-bottom: 25px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .race-detail-title {
        color: #e2e8f0;
        font-size: 1.3rem;
        font-weight: 700;
        margin: 0;
        line-height: 1.4;
    }

    /* プレミアムCTAバナー ホバー効果 */
    .premium-cta-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 35px rgba(245, 158, 11, 0.6);
    }

    .premium-cta-btn:hover .shine {
        left: 100%;
    }

    .premium-feature-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .premium-feature-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(245, 158, 11, 0.2);
    }
</style>

<script is:inline>
    // アコーディオン共通化: 一つ開けたら他を自動で閉じる
    function createToggleFunction(raceNumber) {
        return function() {
            const content = document.getElementById(`race-${raceNumber}r`);
            const icon = document.getElementById(`toggle-${raceNumber}r`);

            if (!content || !icon) return;

            // 他のアコーディオンをすべて閉じる
            for (let i = 1; i <= 12; i++) {
                if (i !== raceNumber) {
                    const otherContent = document.getElementById(`race-${i}r`);
                    const otherIcon = document.getElementById(`toggle-${i}r`);
                    if (otherContent && otherIcon) {
                        otherContent.style.maxHeight = '0px';
                        otherContent.style.opacity = '0';
                        otherIcon.textContent = '▼';
                        otherIcon.style.transform = 'rotate(0deg)';
                    }
                }
            }

            // 現在のアコーディオンの状態をチェックして開く
            if (content.style.maxHeight === '0px' || content.style.maxHeight === '') {
                content.style.maxHeight = content.scrollHeight + 'px';
                content.style.opacity = '1';
                icon.textContent = '◎';
                icon.style.transform = 'rotate(180deg)';
            } else {
                // 既に開いている場合は閉じる
                content.style.maxHeight = '0px';
                content.style.opacity = '0';
                icon.textContent = '▼';
                icon.style.transform = 'rotate(0deg)';
            }
        };
    }

    // 1R-12Rのすべてのトグル関数を生成
    for (let i = 1; i <= 12; i++) {
        window[`toggleRace${i}R`] = createToggleFunction(i);
    }

    // 週別結果タブ切り替え機能
    function showWeeklyResults(date) {
        // Hide all result divs
        const allResults = document.querySelectorAll('.weekly-results');
        allResults.forEach(result => result.style.display = 'none');

        // Remove active class from all tabs
        const allTabs = document.querySelectorAll('.weekly-tab');
        allTabs.forEach(tab => {
            tab.className = 'weekly-tab';
            tab.style.background = 'rgba(148, 163, 184, 0.1)';
            tab.style.color = 'var(--body-text-color)';
            tab.style.border = '1px solid rgba(148, 163, 184, 0.2)';
        });

        // Show selected result div
        const selectedResult = document.getElementById('results-' + date);
        if (selectedResult) {
            selectedResult.style.display = 'grid';
        }

        // Add active class to selected tab
        const selectedTab = document.getElementById('tab-' + date);
        if (selectedTab) {
            selectedTab.className = 'weekly-tab active';
            selectedTab.style.background = 'linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.3) 100%)';
            selectedTab.style.color = '#10b981';
            selectedTab.style.border = '1px solid rgba(16, 185, 129, 0.3)';
        }
    }

    // グローバルに関数を公開
    window.showWeeklyResults = showWeeklyResults;
</script>