---
// ログインページ
---

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ログイン | NANKANアナリティクス</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #e2e8f0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .auth-container {
            background: rgba(30, 41, 59, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 16px;
            padding: 40px;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
        }

        .logo {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo h1 {
            color: #3b82f6;
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 8px;
        }

        .logo p {
            color: #94a3b8;
            font-size: 14px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            color: #cbd5e1;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 8px;
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            background: rgba(15, 23, 42, 0.8);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 8px;
            color: #e2e8f0;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .btn {
            width: 100%;
            padding: 12px 24px;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 16px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.4);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .auth-links {
            text-align: center;
            margin-top: 20px;
        }

        .auth-links a {
            color: #3b82f6;
            text-decoration: none;
            font-size: 14px;
            margin: 0 8px;
        }

        .auth-links a:hover {
            text-decoration: underline;
        }

        .error-message {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #fca5a5;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
        }

        .success-message {
            background: rgba(34, 197, 94, 0.1);
            border: 1px solid rgba(34, 197, 94, 0.3);
            color: #86efac;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
        }

        .loading {
            display: none;
            align-items: center;
            justify-content: center;
            margin-top: 10px;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid #475569;
            border-top: 2px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="logo">
            <h1>🤖 NANKANアナリティクス</h1>
            <p>AI・機械学習で勝つ競馬予想</p>
        </div>

        <div id="welcome-message" style="background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%); padding: 16px; border-radius: 8px; margin-bottom: 20px; text-align: center; display: none;">
            <h2 style="font-size: 18px; margin-bottom: 8px;">お申し込みありがとうございます</h2>
            <p style="font-size: 14px; opacity: 0.95;">会員プランのご利用には、ログインまたは新規登録が必要です</p>
        </div>

        <div id="message-container"></div>

        <form id="login-form">
            <div class="form-group">
                <label class="form-label" for="email">メールアドレス</label>
                <input type="email" id="email" name="email" class="form-input" autocomplete="email" required>
            </div>

            <div class="form-group">
                <label class="form-label" for="password">パスワード</label>
                <input type="password" id="password" name="password" class="form-input" autocomplete="current-password" required>
            </div>

            <button type="submit" class="btn" id="login-btn">
                ログイン
            </button>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <span style="margin-left: 10px;">処理中...</span>
            </div>
        </form>

        <div class="auth-links" style="padding: 20px; background: rgba(59, 130, 246, 0.1); border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 8px; margin-top: 20px;">
            <p style="margin-bottom: 12px; font-size: 14px; color: #cbd5e1;">まだアカウントをお持ちでない方</p>
            <a href="/auth/signup" style="display: inline-block; padding: 10px 20px; background: #3b82f6; color: white; border-radius: 6px; text-decoration: none; font-weight: 600;">新規登録はこちら</a>
        </div>

        <div class="auth-links" style="margin-top: 12px;">
            <a href="/auth/forgot-password" style="font-size: 13px; color: #94a3b8;">パスワードを忘れた方</a>
        </div>

        <div class="auth-links" style="margin-top: 30px;">
            <a href="/" style="color: #94a3b8;">← トップページに戻る</a>
        </div>
    </div>

    <script type="module">
        // SupabaseをCDNから直接インポート
        import { createClient } from 'https://cdn.skypack.dev/@supabase/supabase-js@2';
        
        // ログイン試行回数管理
        const LOGIN_ATTEMPT_KEY = 'login_attempts';
        const LOGIN_LOCKOUT_KEY = 'login_lockout';
        const MAX_ATTEMPTS = 5;
        const LOCKOUT_DURATION = 15 * 60 * 1000; // 15分
        
        // デバイスフィンガープリントの生成
        function generateDeviceFingerprint() {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            ctx.textBaseline = 'top';
            ctx.font = '14px Arial';
            ctx.fillText('device-fp', 2, 2);
            const canvasData = canvas.toDataURL();
            
            const fp = {
                userAgent: navigator.userAgent,
                language: navigator.language,
                platform: navigator.platform,
                screenResolution: `${screen.width}x${screen.height}`,
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                canvas: canvasData.substring(0, 50),
                timestamp: new Date().toISOString()
            };
            
            const fpString = JSON.stringify(fp);
            let hash = 0;
            for (let i = 0; i < fpString.length; i++) {
                const char = fpString.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash;
            }
            return hash.toString(36);
        }
        
        // ログイン試行回数チェック
        function checkLoginAttempts() {
            const lockoutUntil = localStorage.getItem(LOGIN_LOCKOUT_KEY);
            if (lockoutUntil) {
                const lockoutTime = parseInt(lockoutUntil);
                if (Date.now() < lockoutTime) {
                    const remainingMinutes = Math.ceil((lockoutTime - Date.now()) / 60000);
                    return {
                        allowed: false,
                        message: `ログイン試行回数の上限に達しました。${remainingMinutes}分後に再試行してください。`
                    };
                } else {
                    localStorage.removeItem(LOGIN_LOCKOUT_KEY);
                    localStorage.removeItem(LOGIN_ATTEMPT_KEY);
                }
            }
            
            const attempts = parseInt(localStorage.getItem(LOGIN_ATTEMPT_KEY) || '0');
            if (attempts >= MAX_ATTEMPTS) {
                localStorage.setItem(LOGIN_LOCKOUT_KEY, Date.now() + LOCKOUT_DURATION);
                return {
                    allowed: false,
                    message: `ログイン試行回数の上限に達しました。15分後に再試行してください。`
                };
            }
            
            return { allowed: true, remaining: MAX_ATTEMPTS - attempts };
        }
        
        // ログイン試行回数を記録
        function recordLoginAttempt(success) {
            if (success) {
                localStorage.removeItem(LOGIN_ATTEMPT_KEY);
                localStorage.removeItem(LOGIN_LOCKOUT_KEY);
            } else {
                const attempts = parseInt(localStorage.getItem(LOGIN_ATTEMPT_KEY) || '0') + 1;
                localStorage.setItem(LOGIN_ATTEMPT_KEY, attempts);
                
                if (attempts >= MAX_ATTEMPTS) {
                    localStorage.setItem(LOGIN_LOCKOUT_KEY, Date.now() + LOCKOUT_DURATION);
                }
            }
        }
        
        const supabaseUrl = 'https://qysycsrhaatudnksbpqe.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF5c3ljc3JoYWF0dWRua3NicHFlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU5MzM3MjcsImV4cCI6MjA3MTUwOTcyN30.UDWi7FYqpJNpMhvMMaZoGMXwuD1R2PNH4Tk6Xs1u1pU';
        const client = createClient(supabaseUrl, supabaseAnonKey);

        const form = document.getElementById('login-form');
        const loginBtn = document.getElementById('login-btn');
        const loading = document.getElementById('loading');
        const messageContainer = document.getElementById('message-container');

        // URLパラメータからメッセージとリダイレクト先を取得
        const urlParams = new URLSearchParams(window.location.search);
        const message = urlParams.get('message');
        const redirect = urlParams.get('redirect');
        
        // 料金ページからのリダイレクトの場合、特別なメッセージを表示
        if (redirect && redirect.includes('/pricing')) {
            document.getElementById('welcome-message').style.display = 'block';
        }
        
        if (message) {
            showMessage(decodeURIComponent(message), 'success');
        }

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // ログイン試行回数チェック
            const attemptCheck = checkLoginAttempts();
            if (!attemptCheck.allowed) {
                showMessage(attemptCheck.message, 'error');
                return;
            }
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;

            if (!email || !password) {
                showMessage('メールアドレスとパスワードを入力してください。', 'error');
                return;
            }

            setLoading(true);
            clearMessages();

            try {
                // デバイスフィンガープリントを生成
                const deviceFingerprint = generateDeviceFingerprint();
                
                // Supabaseで直接ログイン
                const { data, error } = await client.auth.signInWithPassword({
                    email,
                    password
                });

                if (error) {
                    recordLoginAttempt(false);
                    let errorMessage = 'ログインに失敗しました。';
                    if (error.message.includes('Invalid login credentials')) {
                        errorMessage = 'メールアドレスまたはパスワードが正しくありません。';
                        const attempts = parseInt(localStorage.getItem(LOGIN_ATTEMPT_KEY) || '0');
                        if (attempts < MAX_ATTEMPTS) {
                            errorMessage += `（残り${MAX_ATTEMPTS - attempts}回）`;
                        }
                    } else if (error.message.includes('Email not confirmed')) {
                        errorMessage = 'メールアドレスの確認が完了していません。確認メールをご確認ください。';
                    } else if (error.message.includes('Invalid email')) {
                        errorMessage = '有効なメールアドレスを入力してください。';
                    }
                    throw new Error(errorMessage);
                }

                if (data?.user) {
                    recordLoginAttempt(true);
                    showMessage('ログインしています...', 'success');
                    
                    // デバイス情報とログイン情報を保存
                    try {
                        const { error: updateError } = await client
                            .from('profiles')
                            .update({
                                last_login: new Date().toISOString(),
                                last_device_fingerprint: deviceFingerprint,
                                last_ip: 'server-side-only' // サーバー側で取得
                            })
                            .eq('id', data.user.id);
                        
                        if (!updateError) {
                            console.log('ログイン情報を記録しました');
                        }
                        
                        // ログイン通知メール送信（サーバー側API経由）
                        fetch('/api/send-login-notification', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                email: email,
                                timestamp: new Date().toISOString(),
                                device: navigator.userAgent
                            })
                        }).catch(err => console.log('ログイン通知エラー:', err));
                        
                    } catch (profileError) {
                        console.log('プロフィール更新エラー:', profileError);
                    }
                    
                    // リダイレクト処理
                    const redirectTo = urlParams.get('redirect') || '/dashboard';
                    setTimeout(() => {
                        window.location.href = redirectTo;
                    }, 1000);
                } else {
                    recordLoginAttempt(false);
                    throw new Error('予期しないエラーが発生しました。');
                }
            } catch (error) {
                console.error('Login error:', error);
                showMessage(error.message || 'ログインに失敗しました。', 'error');
            } finally {
                setLoading(false);
            }
        });

        function setLoading(isLoading) {
            if (isLoading) {
                loginBtn.disabled = true;
                loginBtn.style.display = 'none';
                loading.style.display = 'flex';
            } else {
                loginBtn.disabled = false;
                loginBtn.style.display = 'block';
                loading.style.display = 'none';
            }
        }

        function showMessage(message, type = 'error') {
            const messageDiv = document.createElement('div');
            messageDiv.className = type === 'error' ? 'error-message' : 'success-message';
            messageDiv.textContent = message;
            messageContainer.appendChild(messageDiv);
        }

        function clearMessages() {
            messageContainer.innerHTML = '';
        }
    </script>
</body>
</html>