---
// 新規登録ページ
---

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>新規登録 | NANKANアナリティクス</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #e2e8f0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .auth-container {
            background: rgba(30, 41, 59, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 16px;
            padding: 40px;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
        }

        .logo {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo h1 {
            color: #3b82f6;
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 8px;
        }

        .logo p {
            color: #94a3b8;
            font-size: 14px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            color: #cbd5e1;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 8px;
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            background: rgba(15, 23, 42, 0.8);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 8px;
            color: #e2e8f0;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .btn {
            width: 100%;
            padding: 12px 24px;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 16px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.4);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .auth-links {
            text-align: center;
            margin-top: 20px;
        }

        .auth-links a {
            color: #3b82f6;
            text-decoration: none;
            font-size: 14px;
            margin: 0 8px;
        }

        .auth-links a:hover {
            text-decoration: underline;
        }

        .error-message {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #fca5a5;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
        }

        .success-message {
            background: rgba(34, 197, 94, 0.1);
            border: 1px solid rgba(34, 197, 94, 0.3);
            color: #86efac;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
        }

        .loading {
            display: none;
            align-items: center;
            justify-content: center;
            margin-top: 10px;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid #475569;
            border-top: 2px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .terms {
            font-size: 12px;
            color: #94a3b8;
            margin-bottom: 20px;
            line-height: 1.5;
        }

        .terms a {
            color: #3b82f6;
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="logo">
            <h1>🤖 NANKANアナリティクス</h1>
            <p>AI・機械学習で勝つ競馬予想</p>
        </div>

        <div id="message-container"></div>

        <form id="signup-form">
            <div class="form-group">
                <label class="form-label" for="display-name">お名前</label>
                <input type="text" id="display-name" name="displayName" class="form-input" autocomplete="name" required>
            </div>

            <div class="form-group">
                <label class="form-label" for="email">メールアドレス</label>
                <input type="email" id="email" name="email" class="form-input" autocomplete="email" required>
            </div>

            <div class="form-group">
                <label class="form-label" for="password">パスワード</label>
                <input type="password" id="password" name="password" class="form-input" minlength="6" autocomplete="new-password" required>
                <small style="color: #94a3b8; font-size: 12px;">6文字以上で入力してください</small>
            </div>

            <div class="form-group">
                <label class="form-label" for="confirm-password">パスワード確認</label>
                <input type="password" id="confirm-password" name="confirmPassword" class="form-input" autocomplete="new-password" required>
            </div>

            <div class="terms">
                新規登録することで、<a href="/terms">利用規約</a>と<a href="/privacy">プライバシーポリシー</a>に同意したものとみなされます。
            </div>

            <button type="submit" class="btn" id="signup-btn">
                新規登録
            </button>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <span style="margin-left: 10px;">処理中...</span>
            </div>
        </form>

        <div class="auth-links">
            すでにアカウントをお持ちですか？
            <a href="/auth/login">ログイン</a>
        </div>

        <div class="auth-links" style="margin-top: 30px;">
            <a href="/" style="color: #94a3b8;">← トップページに戻る</a>
        </div>
    </div>

    <script type="module">
        // SupabaseをCDNから直接インポート
        import { createClient } from 'https://cdn.skypack.dev/@supabase/supabase-js@2';
        
        const supabaseUrl = 'https://qysycsrhaatudnksbpqe.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF5c3ljc3JoYWF0dWRua3NicHFlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU5MzM3MjcsImV4cCI6MjA3MTUwOTcyN30.UDWi7FYqpJNpMhvMMaZoGMXwuD1R2PNH4Tk6Xs1u1pU';
        const client = createClient(supabaseUrl, supabaseAnonKey);

        const form = document.getElementById('signup-form');
        const signupBtn = document.getElementById('signup-btn');
        const loading = document.getElementById('loading');
        const messageContainer = document.getElementById('message-container');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const displayName = document.getElementById('display-name').value;
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirm-password').value;

            // バリデーション
            if (!displayName || !email || !password || !confirmPassword) {
                showMessage('すべての項目を入力してください。', 'error');
                return;
            }

            if (password !== confirmPassword) {
                showMessage('パスワードが一致しません。', 'error');
                return;
            }

            if (password.length < 6) {
                showMessage('パスワードは6文字以上で入力してください。', 'error');
                return;
            }

            setLoading(true);
            clearMessages();

            try {
                // Supabaseで直接ユーザー登録
                const { data, error } = await client.auth.signUp({
                    email,
                    password,
                    options: {
                        data: {
                            display_name: displayName
                        },
                        emailRedirectTo: 'https://nankan-analytics.keiba.link/auth/login?message=' + encodeURIComponent('メールアドレスの確認が完了しました。ログインしてください。')
                    }
                });

                if (error) {
                    console.error('Signup error details:', error);
                    let errorMessage = '登録に失敗しました。';
                    
                    // Supabaseのエラーメッセージパターンを幅広くキャッチ
                    const errorStr = error.message?.toLowerCase() || '';
                    
                    if (errorStr.includes('already registered') || 
                        errorStr.includes('already exists') ||
                        errorStr.includes('duplicate') ||
                        errorStr.includes('already been') ||
                        error.code === '23505' || // PostgreSQL duplicate key error
                        error.status === 400) { // 一般的な重複エラー
                        errorMessage = `
                            <strong>このメールアドレスは既に登録済みです</strong><br><br>
                            <strong>${email}</strong> は既にアカウントが作成されています。<br><br>
                            <a href="/auth/login" style="color: #3b82f6; text-decoration: underline;">ログインページ</a>からログインするか、
                            パスワードを忘れた場合は<a href="/auth/forgot-password" style="color: #3b82f6; text-decoration: underline;">こちら</a>からリセットしてください。
                        `;
                    } else if (errorStr.includes('password')) {
                        errorMessage = 'パスワードは6文字以上で入力してください。';
                    } else if (errorStr.includes('invalid email')) {
                        errorMessage = '有効なメールアドレスを入力してください。';
                    }
                    throw new Error(errorMessage);
                }

                // Supabaseが既存ユーザーでも成功を返すことがあるので、追加チェック
                if (data && !data.user) {
                    // userがnullの場合は既に登録済み
                    showMessage(`
                        <strong>このメールアドレスは既に登録済みです</strong><br><br>
                        <strong>${email}</strong> は既にアカウントが作成されています。<br><br>
                        <a href="/auth/login" style="color: #3b82f6; text-decoration: underline;">ログインページ</a>からログインするか、
                        パスワードを忘れた場合は<a href="/auth/forgot-password" style="color: #3b82f6; text-decoration: underline;">こちら</a>からリセットしてください。
                    `, 'error');
                    return;
                }
                
                if (data?.user) {
                    // 確認メールが必要かどうかをチェック
                    if (data.user.email_confirmed_at) {
                        // メールが既に確認済みの場合（稀なケース）
                        showMessage('登録が完了しました！ログインページに移動します。', 'success');
                        setTimeout(() => {
                            window.location.href = '/auth/login';
                        }, 2000);
                    } else {
                        // メール確認が必要な場合（通常のケース）
                        showMessage(`
                            <strong>登録が完了しました！</strong><br><br>
                            確認メールを <strong>${email}</strong> にお送りしました。<br>
                            メール内のリンクをクリックして、アカウントを有効化してください。<br><br>
                            <small>※ メールが届かない場合は、迷惑メールフォルダもご確認ください<br>
                            それでも届かない場合は、別のメールアドレスで登録してください</small>
                        `, 'success');
                        
                        // フォームをクリア
                        form.reset();
                        
                        // 自動リダイレクトはしない
                        // ユーザーが手動でログインページに移動できるようにボタンを表示
                        setTimeout(() => {
                            const buttonContainer = document.createElement('div');
                            buttonContainer.style.marginTop = '20px';
                            buttonContainer.style.display = 'flex';
                            buttonContainer.style.gap = '10px';
                            buttonContainer.style.flexWrap = 'wrap';
                            
                            const loginButton = document.createElement('a');
                            loginButton.href = '/auth/login';
                            loginButton.textContent = 'ログインページへ';
                            loginButton.className = 'btn';
                            loginButton.style.display = 'block';
                            loginButton.style.flex = '1';
                            
                            const resendButton = document.createElement('button');
                            resendButton.textContent = '確認メール再送信';
                            resendButton.className = 'btn';
                            resendButton.style.background = 'rgba(16, 185, 129, 0.8)';
                            resendButton.style.display = 'block';
                            resendButton.style.flex = '1';
                            resendButton.id = 'resend-confirmation-btn';
                            
                            buttonContainer.appendChild(loginButton);
                            buttonContainer.appendChild(resendButton);
                            messageContainer.appendChild(buttonContainer);
                            
                            // 再送信ボタンのイベントリスナー
                            resendButton.addEventListener('click', async () => {
                                try {
                                    resendButton.disabled = true;
                                    resendButton.textContent = '送信中...';
                                    
                                    const { error } = await client.auth.resend({
                                        type: 'signup',
                                        email: email
                                    });
                                    
                                    if (error) throw error;
                                    
                                    resendButton.textContent = '送信完了！';
                                    resendButton.style.background = 'rgba(16, 185, 129, 1)';
                                    setTimeout(() => {
                                        resendButton.textContent = '確認メール再送信';
                                        resendButton.disabled = false;
                                        resendButton.style.background = 'rgba(16, 185, 129, 0.8)';
                                    }, 3000);
                                } catch (error) {
                                    resendButton.textContent = '再送信失敗';
                                    resendButton.style.background = 'rgba(239, 68, 68, 0.8)';
                                    setTimeout(() => {
                                        resendButton.textContent = '確認メール再送信';
                                        resendButton.disabled = false;
                                        resendButton.style.background = 'rgba(16, 185, 129, 0.8)';
                                    }, 3000);
                                }
                            });
                        }, 1000);
                    }
                } else {
                    throw new Error('予期しないエラーが発生しました。');
                }
            } catch (error) {
                console.error('Signup error:', error);
                showMessage(error.message || '登録に失敗しました。', 'error');
            } finally {
                setLoading(false);
            }
        });

        // パスワード確認のリアルタイムバリデーション
        document.getElementById('confirm-password').addEventListener('input', (e) => {
            const password = document.getElementById('password').value;
            const confirmPassword = e.target.value;
            
            if (confirmPassword && password !== confirmPassword) {
                e.target.style.borderColor = '#ef4444';
            } else {
                e.target.style.borderColor = 'rgba(59, 130, 246, 0.3)';
            }
        });

        function setLoading(isLoading) {
            if (isLoading) {
                signupBtn.disabled = true;
                signupBtn.style.display = 'none';
                loading.style.display = 'flex';
            } else {
                signupBtn.disabled = false;
                signupBtn.style.display = 'block';
                loading.style.display = 'none';
            }
        }

        function showMessage(message, type = 'error') {
            const messageDiv = document.createElement('div');
            messageDiv.className = type === 'error' ? 'error-message' : 'success-message';
            messageDiv.innerHTML = message; // textContentからinnerHTMLに変更
            messageContainer.appendChild(messageDiv);
        }

        function clearMessages() {
            messageContainer.innerHTML = '';
        }
    </script>
</body>
</html>