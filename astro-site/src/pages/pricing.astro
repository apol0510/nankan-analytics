---
// ÊñôÈáë„Éó„É©„É≥„Éö„Éº„Ç∏
const stripePublishableKey = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY;
---

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="stripe-publishable-key" content={stripePublishableKey}>
    <title>ÊñôÈáë„Éó„É©„É≥ | NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #e2e8f0;
            min-height: 100vh;
        }

        .navbar {
            background: rgba(30, 41, 59, 0.9);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(59, 130, 246, 0.3);
            padding: 16px 0;
        }

        .navbar-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
        }

        .logo {
            color: #3b82f6;
            font-size: 20px;
            font-weight: 700;
            text-decoration: none;
        }

        .nav-right a {
            color: #94a3b8;
            text-decoration: none;
            margin-left: 16px;
        }

        .nav-loading {
            color: #94a3b8;
            font-size: 14px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 60px 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 60px;
        }

        .header h1 {
            font-size: 48px;
            font-weight: 700;
            margin-bottom: 16px;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            font-size: 20px;
            color: #94a3b8;
        }

        .pricing-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 32px;
            max-width: 800px;
            margin: 0 auto;
        }

        .plan-card {
            background: rgba(30, 41, 59, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 16px;
            padding: 32px;
            position: relative;
            transition: all 0.3s ease;
        }

        .plan-card:hover {
            transform: translateY(-4px);
            border-color: rgba(59, 130, 246, 0.6);
            box-shadow: 0 20px 40px -12px rgba(59, 130, 246, 0.3);
        }

        .plan-popular {
            border-color: #8b5cf6;
            background: rgba(139, 92, 246, 0.05);
        }

        .popular-badge {
            position: absolute;
            top: -12px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #8b5cf6 0%, #3b82f6 100%);
            color: white;
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .plan-name {
            font-size: 24px;
            font-weight: 700;
            color: #f1f5f9;
            margin-bottom: 8px;
        }

        .plan-description {
            color: #94a3b8;
            margin-bottom: 24px;
            line-height: 1.6;
        }

        .plan-price {
            display: flex;
            align-items: baseline;
            margin-bottom: 24px;
        }

        .price-amount {
            font-size: 48px;
            font-weight: 700;
            color: #f1f5f9;
        }

        .price-currency {
            font-size: 20px;
            color: #94a3b8;
            margin-right: 4px;
        }

        .price-period {
            font-size: 16px;
            color: #94a3b8;
            margin-left: 4px;
        }

        .features-list {
            list-style: none;
            margin-bottom: 32px;
        }

        .features-list li {
            display: flex;
            align-items: center;
            padding: 8px 0;
            color: #cbd5e1;
        }

        .features-list li::before {
            content: "‚úì";
            color: #10b981;
            font-weight: bold;
            margin-right: 12px;
            font-size: 16px;
        }

        .subscribe-btn {
            width: 100%;
            padding: 16px 24px;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .subscribe-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.5);
        }

        .subscribe-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .loading-spinner {
            display: none;
            width: 16px;
            height: 16px;
            border: 2px solid transparent;
            border-top: 2px solid #fff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .faq-section {
            margin-top: 80px;
            text-align: center;
        }

        .faq-title {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 40px;
            color: #f1f5f9;
        }

        .faq-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 24px;
            text-align: left;
        }

        .faq-item {
            background: rgba(30, 41, 59, 0.6);
            border: 1px solid rgba(59, 130, 246, 0.2);
            border-radius: 12px;
            padding: 24px;
        }

        .faq-question {
            font-size: 18px;
            font-weight: 600;
            color: #f1f5f9;
            margin-bottom: 12px;
        }

        .faq-answer {
            color: #94a3b8;
            line-height: 1.6;
        }

        @media (max-width: 768px) {
            .pricing-grid {
                grid-template-columns: 1fr;
                gap: 24px;
            }
            
            .container {
                padding: 40px 16px;
            }
            
            .header h1 {
                font-size: 36px;
            }
        }
    </style>
</head>
<body>
    <!-- „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Éê„Éº -->
    <nav class="navbar">
        <div class="navbar-content">
            <a href="/" class="logo">ü§ñ NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ</a>
            <div class="nav-right">
                <span class="nav-loading">Ë™≠„ÅøËæº„Åø‰∏≠...</span>
            </div>
        </div>
    </nav>

    <div class="container">
        <div class="header">
            <h1>ÊñôÈáë„Éó„É©„É≥</h1>
            <p>AI„ÅÆÂäõ„ÅßÁ´∂È¶¨‰∫àÊÉ≥„ÇíÊ¨°„ÅÆ„É¨„Éô„É´„Å∏</p>
        </div>

        <div class="pricing-grid">
            <!-- „Çπ„Çø„É≥„ÉÄ„Éº„Éâ„Éó„É©„É≥ -->
            <div class="plan-card">
                <div class="plan-name">„Çπ„Çø„É≥„ÉÄ„Éº„Éâ</div>
                <div class="plan-description">
                    ÂæåÂçä3„É¨„Éº„Çπ‰∫àÊÉ≥„Å®Âü∫Á§é„Ç≥„É≥„ÉÜ„É≥„ÉÑ
                </div>
                <div class="plan-price">
                    <span class="price-currency">¬•</span>
                    <span class="price-amount">5,980</span>
                    <span class="price-period">/Êúà</span>
                </div>
                <ul class="features-list">
                    <li>10R„Éª11R„Éª12R‰∫àÊÉ≥Èñ≤Ë¶ß</li>
                    <li>Âü∫Á§é„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç¢„ÇØ„Çª„Çπ</li>
                    <li>„É°„Éº„É´„Çµ„Éù„Éº„Éà</li>
                    <li>ÈÅéÂéª30Êó•ÂàÜ„ÅÆ„Éá„Éº„Çø</li>
                    <li>AIÂàÜÊûê„É¨„Éù„Éº„Éà</li>
                </ul>
                <button class="subscribe-btn" data-plan="standard">
                    <span class="loading-spinner"></span>
                    ‰ªä„Åô„ÅêÂßã„ÇÅ„Çã
                </button>
            </div>

            <!-- „Éó„É¨„Éü„Ç¢„É†„Éó„É©„É≥ -->
            <div class="plan-card plan-popular">
                <div class="popular-badge">‰∫∫Ê∞óNo.1</div>
                <div class="plan-name">„Éó„É¨„Éü„Ç¢„É†</div>
                <div class="plan-description">
                    ÂÖ®„É¨„Éº„Çπ‰∫àÊÉ≥„Å®„Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç¢„ÇØ„Çª„Çπ
                </div>
                <div class="plan-price">
                    <span class="price-currency">¬•</span>
                    <span class="price-amount">9,980</span>
                    <span class="price-period">/Êúà</span>
                </div>
                <ul class="features-list">
                    <li>1R-12R ÂÖ®„É¨„Éº„Çπ‰∫àÊÉ≥Èñ≤Ë¶ß</li>
                    <li>ÂÖ®„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç¢„ÇØ„Çª„Çπ</li>
                    <li>ÁÑ°Âà∂Èôê„Éá„Éº„Çø„Ç¢„ÇØ„Çª„Çπ</li>
                    <li>ÂÑ™ÂÖà„Çµ„Éù„Éº„Éà</li>
                    <li>AIÂàÜÊûê„É¨„Éù„Éº„Éà</li>
                    <li>„É™„Ç¢„É´„Çø„Ç§„É†ÈÄöÁü•</li>
                </ul>
                <button class="subscribe-btn" data-plan="premium">
                    <span class="loading-spinner"></span>
                    ‰ªä„Åô„ÅêÂßã„ÇÅ„Çã
                </button>
            </div>
        </div>

        <!-- FAQ „Çª„ÇØ„Ç∑„Éß„É≥ -->
        <div class="faq-section">
            <h2 class="faq-title">„Çà„Åè„ÅÇ„ÇãË≥™Âïè</h2>
            <div class="faq-grid">
                <div class="faq-item">
                    <div class="faq-question">ÊîØÊâï„ÅÑÊñπÊ≥ï„ÅØÔºü</div>
                    <div class="faq-answer">„ÇØ„É¨„Ç∏„ÉÉ„Éà„Ç´„Éº„ÉâÔºàVisa„ÄÅMasterCard„ÄÅAmerican Express„ÄÅJCBÔºâ„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ</div>
                </div>
                <div class="faq-item">
                    <div class="faq-question">„ÅÑ„Å§„Åß„ÇÇ„Ç≠„É£„É≥„Çª„É´„Åß„Åç„Åæ„Åô„ÅãÔºü</div>
                    <div class="faq-answer">„ÅØ„ÅÑ„ÄÇ„ÅÑ„Å§„Åß„ÇÇ„Ç≠„É£„É≥„Çª„É´ÂèØËÉΩ„Åß„ÄÅÊ¨°ÂõûÊõ¥Êñ∞Êó•„Åæ„ÅßÂà©Áî®„Åß„Åç„Åæ„Åô„ÄÇ</div>
                </div>
                <div class="faq-item">
                    <div class="faq-question">„Éó„É©„É≥Â§âÊõ¥„ÅØÂèØËÉΩ„Åß„Åô„ÅãÔºü</div>
                    <div class="faq-answer">„ÅØ„ÅÑ„ÄÇ„Ç¢„Ç´„Ç¶„É≥„ÉàÁÆ°ÁêÜÁîªÈù¢„Åã„Çâ„ÅÑ„Å§„Åß„ÇÇ„Éó„É©„É≥„ÅÆÂ§âÊõ¥„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ</div>
                </div>
                <div class="faq-item">
                    <div class="faq-question">ËøîÈáë‰øùË®º„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü</div>
                    <div class="faq-answer">ÂàùÂõûÁôªÈå≤„Åã„Çâ7Êó•Èñì„ÅØÂÖ®È°çËøîÈáë‰øùË®º„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Stripe.js „ÇíÈÄöÂ∏∏„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅßË™≠„ÅøËæº„Åø -->
    <script src="https://js.stripe.com/v3/"></script>
    
    <script type="module">
        // Supabase„Çí„Ç§„É≥„Éù„Éº„Éà
        import { createClient } from 'https://cdn.skypack.dev/@supabase/supabase-js';

        // StripeË®≠ÂÆöÔºà„Ç∞„É≠„Éº„Éê„É´„Å´Ë™≠„ÅøËæº„Åæ„Çå„ÅüStripe„Çí‰ΩøÁî®Ôºâ
        const stripePublishableKey = document.querySelector('meta[name="stripe-publishable-key"]')?.content;
        
        const getStripe = () => {
            return window.Stripe ? window.Stripe(stripePublishableKey) : null;
        };

        // ÊñôÈáë„Éó„É©„É≥Ë®≠ÂÆö
        const PRICING_PLANS = {
            STANDARD: {
                name: '„Çπ„Çø„É≥„ÉÄ„Éº„Éâ',
                description: 'ÂæåÂçä„É¨„Éº„Çπ‰∫àÊÉ≥„ÉªÂü∫Á§é„Ç≥„É≥„ÉÜ„É≥„ÉÑ',
                price: 5980,
                stripePriceId: 'price_1S0YFdFA5w33p4WyJNK6MoRR',
                features: ['10R„Éª11R„Éª12R‰∫àÊÉ≥Èñ≤Ë¶ß', 'Âü∫Á§é„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç¢„ÇØ„Çª„Çπ', '„É°„Éº„É´„Çµ„Éù„Éº„Éà', 'ÈÅéÂéª30Êó•ÂàÜ„ÅÆ„Éá„Éº„Çø']
            },
            PREMIUM: {
                name: '„Éó„É¨„Éü„Ç¢„É†',
                description: 'ÂÖ®„É¨„Éº„Çπ‰∫àÊÉ≥„Éª„Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ',
                price: 9980,
                stripePriceId: 'price_1S0YUfFA5w33p4WyVImKgx4c',
                features: ['1R-12R ÂÖ®„É¨„Éº„Çπ‰∫àÊÉ≥Èñ≤Ë¶ß', 'ÂÖ®„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç¢„ÇØ„Çª„Çπ', 'ÁÑ°Âà∂Èôê„Éá„Éº„Çø„Ç¢„ÇØ„Çª„Çπ', 'ÂÑ™ÂÖà„Çµ„Éù„Éº„Éà', 'AIÂàÜÊûê„É¨„Éù„Éº„Éà']
            }
        };

        // Checkout„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàêÈñ¢Êï∞
        const createCheckoutSession = async (priceId, userId, customerEmail) => {
            try {
                console.log('Creating checkout session for:', { priceId, userId, customerEmail });
                
                const response = await fetch('/api/create-checkout-session', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ priceId, userId, customerEmail })
                });
                
                console.log('API response status:', response.status);
                console.log('API response headers:', [...response.headers.entries()]);
                
                const responseText = await response.text();
                console.log('Raw API response:', responseText);
                
                let session;
                try {
                    session = JSON.parse(responseText);
                } catch (parseError) {
                    console.error('JSON parse error:', parseError);
                    throw new Error('API„É¨„Çπ„Éù„É≥„Çπ„ÅÆ„Éë„Éº„Çπ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + responseText);
                }
                
                if (!response.ok) {
                    console.error('API error response:', session);
                    console.log('Debug details:', session.debug);
                    
                    // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíË©≥Á¥∞„Å´Ë°®Á§∫
                    if (session.debug) {
                        console.log('Error Type:', session.debug.errorType);
                        console.log('Error Code:', session.debug.errorCode);
                        console.log('Key Prefix:', session.debug.keyPrefix);
                        console.log('Has Stripe Key:', session.debug.hasStripeKey);
                        console.log('Requested Price ID:', session.debug.requestedPriceId);
                        console.log('Site URL:', session.debug.siteUrl);
                    }
                    
                    const error = new Error(session.error || '„ÉÅ„Çß„ÉÉ„ÇØ„Ç¢„Ç¶„Éà„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                    error.debug = session.debug;
                    throw error;
                }
                return session;
            } catch (error) {
                console.error('Checkout session creation error:', error);
                throw error;
            }
        };

        // SupabaseË®≠ÂÆö
        const supabaseUrl = 'https://qysycsrhaatudnksbpqe.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF5c3ljc3JoYWF0dWRua3NicHFlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU5MzM3MjcsImV4cCI6MjA3MTUwOTcyN30.UDWi7FYqpJNpMhvMMaZoGMXwuD1R2PNH4Tk6Xs1u1pU';
        const supabase = createClient(supabaseUrl, supabaseAnonKey);
        
        const auth = {
            async getUser() {
                return await supabase.auth.getUser();
            },
            async signOut() {
                return await supabase.auth.signOut();
            }
        };

        // Ë≥ºË™≠„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
        document.querySelectorAll('.subscribe-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const planType = e.target.dataset.plan;
                await handleSubscribe(planType, e.target);
            });
        });

        async function handleSubscribe(planType, button) {
            try {
                // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖãÈñãÂßã
                setButtonLoading(button, true);

                // ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÂèñÂæóÔºàË§áÊï∞„ÅÆÊñπÊ≥ï„ÅßÁ¢∫Ë™çÔºâ
                let user = null;
                
                // ÊñπÊ≥ï1: window.currentUserÔºà„Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´Ë®≠ÂÆöÔºâ
                if (window.currentUser) {
                    user = window.currentUser;
                    console.log('Using cached user from window.currentUser:', user.email);
                } else {
                    // ÊñπÊ≥ï2: Supabase auth.getUser()
                    const { data: { user: supabaseUser }, error: authError } = await auth.getUser();
                    console.log('Supabase getUser in subscribe:', { user: supabaseUser?.email, error: authError });
                    
                    if (supabaseUser && !authError) {
                        user = supabaseUser;
                    } else {
                        // ÊñπÊ≥ï3: „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÁ¢∫Ë™ç
                        const session = localStorage.getItem('sb-' + 'qysycsrhaatudnksbpqe' + '-auth-token');
                        if (session) {
                            try {
                                const sessionData = JSON.parse(session);
                                if (sessionData.user) {
                                    user = sessionData.user;
                                    console.log('Using user from localStorage in subscribe:', user.email);
                                }
                            } catch (e) {
                                console.log('Error parsing session in subscribe:', e);
                            }
                        }
                    }
                }
                
                if (!user) {
                    console.log('User not authenticated, redirecting to login');
                    // Êú™Ë™çË®º„ÅÆÂ†¥Âêà„ÄÅ„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å∏„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÔºàÊó¢Â≠ò„É¶„Éº„Ç∂„Éº„ÇÇËÄÉÊÖÆÔºâ
                    window.location.href = '/auth/login?redirect=' + encodeURIComponent('/pricing');
                    return;
                }
                
                console.log('Proceeding with subscription for user:', user.email);

                // „Éó„É©„É≥„ÅÆË©≥Á¥∞ÂèñÂæó
                const planDetails = PRICING_PLANS[planType.toUpperCase()];
                if (!planDetails) {
                    throw new Error('Invalid plan type');
                }

                // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØ„Éá„É¢„É¢„Éº„Éâ„Çí‰ΩøÁî®
                const isDevelopment = window.location.hostname === 'localhost';
                
                if (isDevelopment) {
                    // „Éá„É¢„É¢„Éº„Éâ: API„Çí‰Ωø„Çè„ÅöÁõ¥Êé•Âá¶ÁêÜ
                    console.log('Demo mode: Simulating subscription for', user.email);
                    const session = {
                        demo: true,
                        message: `„Éá„É¢Ë≥ºÂÖ•ÂÆå‰∫ÜÔºÅ\n\n„Éó„É©„É≥: ${planType}\n„É¶„Éº„Ç∂„Éº: ${user.email}\n\n„Åì„Çå„ÅØÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„ÉÜ„Çπ„Éà„Åß„Åô„ÄÇ`
                    };
                    
                    // „Éá„É¢„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Âá¶ÁêÜ
                    localStorage.setItem('demo_subscription_' + user.id, JSON.stringify({
                        planType: planType,
                        createdAt: new Date().toISOString(),
                        demo: true
                    }));
                    
                    alert(session.message);
                    window.location.href = '/dashboard';
                    return;
                } else {
                    // Êú¨Áï™Áí∞Â¢É: ÂÆüÈöõ„ÅÆStripeÂá¶ÁêÜ
                    const session = await createCheckoutSession(
                        planDetails.stripePriceId,
                        user.id,
                        user.email
                    );
                }

                // Êú¨Áï™Áí∞Â¢É„Åß„ÅÆ„Éá„É¢„É¢„Éº„ÉâÂØæÂøúÔºàÊÆã„Åó„Å¶„Åä„ÅèÔºâ
                if (session && session.demo) {
                    // „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíÊõ¥Êñ∞
                    try {
                        const updateResponse = await fetch('/api/update-subscription-demo', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                userId: user.id,
                                planType: planType
                            })
                        });

                        const updateResult = await updateResponse.json();
                        
                        if (updateResponse.ok) {
                            // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´„Éá„É¢„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÊÉÖÂ†±„Çí‰øùÂ≠ò
                            localStorage.setItem('demo_subscription_' + user.id, JSON.stringify({
                                planType: planType,
                                createdAt: new Date().toISOString(),
                                demo: true
                            }));
                            
                            alert(`${session.message}\n\n„Éó„É©„É≥: ${planType}\n„É¶„Éº„Ç∂„Éº: ${user.email}\n\n„Éá„É¢Ë≥ºÂÖ•„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n\n‰ºöÂì°„Çπ„ÉÜ„Éº„Çø„Çπ„ÅåÊõ¥Êñ∞„Åï„Çå„Åæ„Åó„Åü„ÄÇ`);
                        } else {
                            // „Ç®„É©„Éº„Åß„ÇÇ„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´„ÅØ‰øùÂ≠òÔºà„Éá„É¢„Å™„ÅÆ„ÅßÔºâ
                            localStorage.setItem('demo_subscription_' + user.id, JSON.stringify({
                                planType: planType,
                                createdAt: new Date().toISOString(),
                                demo: true
                            }));
                            
                            alert(`„Éá„É¢Ë≥ºÂÖ•„ÅØÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n\n„Éó„É©„É≥: ${planType}\n„É¶„Éº„Ç∂„Éº: ${user.email}\n\n‚Äª„Éá„É¢„É¢„Éº„Éâ„ÅÆ„Åü„ÇÅ„ÄÅ‰ºöÂì°„Çπ„ÉÜ„Éº„Çø„Çπ„ÅØ„É≠„Éº„Ç´„É´„ÅßÁÆ°ÁêÜ„Åï„Çå„Åæ„Åô„ÄÇ`);
                        }
                    } catch (updateError) {
                        console.error('Subscription update error:', updateError);
                        alert(`„Éá„É¢Ë≥ºÂÖ•„ÅØÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„Åå„ÄÅ„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ`);
                    }
                    
                    window.location.href = '/dashboard';
                    return;
                }

                // Stripe Checkout „Å´„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
                const stripe = getStripe();
                if (!stripe) {
                    throw new Error('Stripe „ÅåË™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
                }
                const { error } = await stripe.redirectToCheckout({
                    sessionId: session.id
                });

                if (error) {
                    throw error;
                }

            } catch (error) {
                console.error('Subscription error:', error);
                
                let errorMessage = 'Ê±∫Ê∏àÂá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ';
                if (error.message.includes('network')) {
                    errorMessage = '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ';
                }
                
                // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„Åå„ÅÇ„Çå„Å∞Ë°®Á§∫
                if (error.debug) {
                    console.log('Debug info:', error.debug);
                    errorMessage += '\n\n„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±: ' + JSON.stringify(error.debug, null, 2);
                }
                
                alert(errorMessage);
            } finally {
                setButtonLoading(button, false);
            }
        }

        function setButtonLoading(button, isLoading) {
            const spinner = button.querySelector('.loading-spinner');
            const text = button.childNodes[button.childNodes.length - 1];
            
            if (isLoading) {
                button.disabled = true;
                spinner.style.display = 'inline-block';
                text.textContent = 'Âá¶ÁêÜ‰∏≠...';
            } else {
                button.disabled = false;
                spinner.style.display = 'none';
                text.textContent = '‰ªä„Åô„ÅêÂßã„ÇÅ„Çã';
            }
        }

        // „Éö„Éº„Ç∏„É≠„Éº„ÉâÊôÇ„Å´„É¶„Éº„Ç∂„ÉºÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        document.addEventListener('DOMContentLoaded', async () => {
            const navRight = document.querySelector('.nav-right');
            
            // „Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíË§áÊï∞„ÅÆÊñπÊ≥ï„ÅßÁ¢∫Ë™ç
            let user = null;
            
            try {
                // ÊñπÊ≥ï1: Supabase auth.getUser()
                const { data: { user: supabaseUser }, error: authError } = await auth.getUser();
                console.log('Supabase getUser result:', { user: supabaseUser?.email, error: authError });
                
                if (supabaseUser && !authError) {
                    user = supabaseUser;
                } else {
                    // ÊñπÊ≥ï2: „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ„Çª„ÉÉ„Ç∑„Éß„É≥Á¢∫Ë™ç
                    const session = localStorage.getItem('sb-' + 'qysycsrhaatudnksbpqe' + '-auth-token');
                    console.log('LocalStorage session check:', !!session);
                    
                    if (session) {
                        try {
                            const sessionData = JSON.parse(session);
                            if (sessionData.user) {
                                user = sessionData.user;
                                console.log('Found user in localStorage:', user.email);
                            }
                        } catch (e) {
                            console.log('Error parsing session:', e);
                        }
                    }
                }
                
                // „Çª„ÉÉ„Ç∑„Éß„É≥Á¢∫Ë™çÁî®„ÅÆ„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞Ë®≠ÂÆöÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
                window.currentUser = user;
                
                if (user) {
                    // „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„ÅÆÂ†¥Âêà„ÄÅ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÇíÊõ¥Êñ∞
                    navRight.innerHTML = `
                        <span style="color: #94a3b8; margin-right: 16px;">${user.email}</span>
                        <a href="/dashboard">„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
                        <a href="#" onclick="handleLogout()" style="margin-left: 16px;">„É≠„Ç∞„Ç¢„Ç¶„Éà</a>
                    `;
                    console.log('Navigation updated for logged in user:', user.email);
                } else {
                    // Êú™Ë™çË®º„ÅÆÂ†¥Âêà„ÄÅ„É≠„Ç∞„Ç§„É≥„ÉªÁôªÈå≤„É™„É≥„ÇØ„ÇíË°®Á§∫
                    navRight.innerHTML = `
                        <a href="/auth/login">„É≠„Ç∞„Ç§„É≥</a>
                        <a href="/auth/signup">Êñ∞Ë¶èÁôªÈå≤</a>
                    `;
                    console.log('Navigation updated for guest user');
                }
            } catch (error) {
                console.error('Authentication check error:', error);
                // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÄÅÊú™Ë™çË®ºÁä∂ÊÖã„Å®„Åó„Å¶Âá¶ÁêÜ
                navRight.innerHTML = `
                    <a href="/auth/login">„É≠„Ç∞„Ç§„É≥</a>
                    <a href="/auth/signup">Êñ∞Ë¶èÁôªÈå≤</a>
                `;
            }
        });

        // „É≠„Ç∞„Ç¢„Ç¶„ÉàÂá¶ÁêÜ
        window.handleLogout = async () => {
            try {
                await auth.signOut();
                window.location.reload();
            } catch (error) {
                console.error('Logout error:', error);
                alert('„É≠„Ç∞„Ç¢„Ç¶„Éà„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
            }
        };
    </script>
</body>
</html>