---
// 会員体験完全テストページ - エンドツーエンドテスト
export const prerender = false;
---

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>会員体験完全テスト | NANKANアナリティクス</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #e2e8f0;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px;
            background: rgba(30, 41, 59, 0.8);
            border-radius: 16px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .header h1 {
            color: #3b82f6;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .test-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }

        .test-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 16px;
            padding: 30px;
            border: 1px solid rgba(59, 130, 246, 0.2);
            text-align: center;
        }

        .test-card h2 {
            color: #3b82f6;
            margin-bottom: 20px;
            font-size: 1.5rem;
        }

        .test-steps {
            text-align: left;
            background: rgba(15, 23, 42, 0.6);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
        }

        .test-steps h3 {
            color: #8b5cf6;
            margin-bottom: 15px;
        }

        .test-steps ol {
            list-style: none;
            counter-reset: step-counter;
        }

        .test-steps li {
            counter-increment: step-counter;
            margin-bottom: 12px;
            padding-left: 30px;
            position: relative;
        }

        .test-steps li::before {
            content: counter(step-counter);
            position: absolute;
            left: 0;
            top: 0;
            background: #3b82f6;
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .test-btn {
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            border: none;
            padding: 15px 25px;
            border-radius: 10px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            margin: 10px;
        }

        .test-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(59, 130, 246, 0.4);
        }

        .test-btn.standard {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .test-btn.premium {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        .test-btn.reset {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }

        .flow-section {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 30px;
            border: 1px solid rgba(59, 130, 246, 0.2);
        }

        .flow-section h2 {
            color: #3b82f6;
            margin-bottom: 20px;
        }

        .flow-arrows {
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 15px;
            margin: 20px 0;
        }

        .flow-step {
            background: rgba(59, 130, 246, 0.1);
            padding: 12px 20px;
            border-radius: 8px;
            border: 1px solid rgba(59, 130, 246, 0.3);
            text-align: center;
            flex: 1;
            min-width: 150px;
        }

        .flow-arrow {
            color: #3b82f6;
            font-size: 1.5rem;
        }

        .warning-box {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }

        .warning-box h4 {
            color: #ef4444;
            margin-bottom: 8px;
        }

        .status-indicator {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-left: 10px;
        }

        .status-active {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }

        .status-inactive {
            background: rgba(107, 114, 128, 0.2);
            color: #9ca3af;
        }

        .current-status {
            background: rgba(15, 23, 42, 0.9);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 30px;
            border-left: 4px solid #3b82f6;
        }

        .quick-links {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
            margin-top: 20px;
        }

        .quick-link {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
            padding: 10px 20px;
            border-radius: 8px;
            text-decoration: none;
            transition: all 0.3s ease;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .quick-link:hover {
            background: rgba(59, 130, 246, 0.2);
        }

        @media (max-width: 768px) {
            .test-grid {
                grid-template-columns: 1fr;
            }
            
            .flow-arrows {
                flex-direction: column;
            }
            
            .flow-arrow {
                transform: rotate(90deg);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔍 会員体験完全テスト</h1>
            <p>Standard・Premium会員としての全フロー検証</p>
        </div>

        <div class="current-status">
            <h3>📊 現在のテスト状態</h3>
            <p>現在のテスト会員状態: <span id="current-membership-status">未設定</span></p>
            <p>最終更新: <span id="last-update-time">-</span></p>
        </div>

        <div class="test-grid">
            <!-- Standard会員テスト -->
            <div class="test-card">
                <h2>📚 Standard会員テスト</h2>
                <div class="test-steps">
                    <h3>🎯 テスト項目</h3>
                    <ol>
                        <li>ダッシュボード表示確認</li>
                        <li>10R・11R・12R予想アクセス</li>
                        <li>1R-9R制限表示確認</li>
                        <li>決済画面遷移テスト</li>
                        <li>プラン変更機能確認</li>
                    </ol>
                </div>
                <button class="test-btn standard" onclick="setStandardMembership()">
                    Standard会員として体験開始
                </button>
                <div class="quick-links">
                    <a href="/dashboard" class="quick-link" target="_blank">📊 ダッシュボード</a>
                    <a href="/" class="quick-link" target="_blank">🏇 予想ページ</a>
                </div>
            </div>

            <!-- Premium会員テスト -->
            <div class="test-card">
                <h2>👑 Premium会員テスト</h2>
                <div class="test-steps">
                    <h3>🎯 テスト項目</h3>
                    <ol>
                        <li>ダッシュボード表示確認</li>
                        <li>1R-12R全予想アクセス</li>
                        <li>AI分析レポート閲覧</li>
                        <li>無制限データアクセス</li>
                        <li>優先サポート表示</li>
                    </ol>
                </div>
                <button class="test-btn premium" onclick="setPremiumMembership()">
                    Premium会員として体験開始
                </button>
                <div class="quick-links">
                    <a href="/dashboard" class="quick-link" target="_blank">📊 ダッシュボード</a>
                    <a href="/" class="quick-link" target="_blank">🏇 予想ページ</a>
                </div>
            </div>
        </div>

        <!-- 決済フローテスト -->
        <div class="flow-section">
            <h2>💳 決済フロー完全テスト</h2>
            <div class="flow-arrows">
                <div class="flow-step">料金プラン選択</div>
                <span class="flow-arrow">→</span>
                <div class="flow-step">Stripeチェックアウト</div>
                <span class="flow-arrow">→</span>
                <div class="flow-step">決済完了</div>
                <span class="flow-arrow">→</span>
                <div class="flow-step">ダッシュボード遷移</div>
            </div>
            
            <div style="text-align: center; margin-top: 20px;">
                <a href="/pricing" class="test-btn">💳 決済フロー開始</a>
                <a href="/pricing-test-simple" class="test-btn">🧪 モック決済テスト</a>
            </div>

            <div class="warning-box">
                <h4>⚠️ 決済テスト注意事項</h4>
                <p>• 実際の決済テストはStripeテストモードで実行してください</p>
                <p>• テスト用カード: 4242 4242 4242 4242</p>
                <p>• 有効期限: 任意の将来日付、CVC: 任意の3桁</p>
            </div>
        </div>

        <!-- 検証項目チェックリスト -->
        <div class="flow-section">
            <h2>✅ 検証項目チェックリスト</h2>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
                <div class="test-steps">
                    <h3>🎯 ダッシュボード検証</h3>
                    <ol>
                        <li>プラン表示正確性</li>
                        <li>ステータス表示(active/inactive)</li>
                        <li>アクセス可能レース表示</li>
                        <li>次回更新日表示</li>
                        <li>プラン変更ボタン動作</li>
                    </ol>
                </div>
                
                <div class="test-steps">
                    <h3>🏇 予想ページ検証</h3>
                    <ol>
                        <li>無料レース(11R)アクセス</li>
                        <li>Standard制限レース確認</li>
                        <li>Premium全レースアクセス</li>
                        <li>制限時のメッセージ表示</li>
                        <li>会員登録誘導表示</li>
                    </ol>
                </div>
                
                <div class="test-steps">
                    <h3>💳 決済フロー検証</h3>
                    <ol>
                        <li>料金プラン選択画面</li>
                        <li>Stripe決済画面遷移</li>
                        <li>決済完了後リダイレクト</li>
                        <li>会員情報即時更新</li>
                        <li>エラーハンドリング動作</li>
                    </ol>
                </div>
            </div>
        </div>

        <!-- リセット機能 -->
        <div style="text-align: center; margin-top: 40px;">
            <button class="test-btn reset" onclick="resetMembership()">
                🔄 テスト状態をリセット
            </button>
            <p style="margin-top: 15px; color: #64748b; font-size: 0.9rem;">
                テスト完了後は必ずリセットしてください
            </p>
        </div>

        <div style="text-align: center; margin-top: 40px; color: #64748b;">
            <p>🤖 powered by pricing-final.astro approach | マコ&クロの会員体験テストシステム</p>
        </div>
    </div>

    <script type="module">
        import { createClient } from 'https://cdn.skypack.dev/@supabase/supabase-js'

        // Supabaseクライアント初期化（メタタグから取得）
        const supabaseUrl = 'https://pqjlotjgbhsfqimqrxvn.supabase.co'
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBxamxvdGpnYmhzZnFpbXFyeHZuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjE0Njk3MDgsImV4cCI6MjAzNzA0NTcwOH0.z8j3E9I8W-yI_WQoSYVzUKKNcpR1rH5JpNE4w6_NL24'
        const supabase = createClient(supabaseUrl, supabaseKey)

        // 現在のユーザー取得
        let currentUser = null

        window.setStandardMembership = async function() {
            currentUser = await getCurrentUser()
            if (!currentUser) {
                alert('ログインが必要です。まず認証を行ってください。')
                return
            }

            const testData = {
                planType: 'standard',
                status: 'active',
                createdAt: new Date().toISOString(),
                price: '¥5,980',
                features: ['10R・11R・12R予想', '基礎コンテンツ', 'メールサポート']
            }

            localStorage.setItem('test_subscription_' + currentUser.id, JSON.stringify(testData))
            
            updateStatus('Standard会員', 'active')
            alert('✅ Standard会員として設定されました！\n\nダッシュボードを開いて確認してください。')
        }

        window.setPremiumMembership = async function() {
            currentUser = await getCurrentUser()
            if (!currentUser) {
                alert('ログインが必要です。まず認証を行ってください。')
                return
            }

            const testData = {
                planType: 'premium',
                status: 'active',
                createdAt: new Date().toISOString(),
                price: '¥9,980',
                features: ['1R-12R全予想', '全コンテンツ', 'AI分析レポート', '優先サポート']
            }

            localStorage.setItem('demo_subscription_' + currentUser.id, JSON.stringify(testData))
            
            updateStatus('Premium会員', 'active')
            alert('✅ Premium会員として設定されました！\n\nダッシュボードを開いて確認してください。')
        }

        window.resetMembership = async function() {
            currentUser = await getCurrentUser()
            if (!currentUser) {
                alert('ユーザー情報が取得できません。')
                return
            }

            // テストデータを削除
            localStorage.removeItem('test_subscription_' + currentUser.id)
            localStorage.removeItem('demo_subscription_' + currentUser.id)
            
            updateStatus('未設定', 'inactive')
            alert('🔄 テスト状態をリセットしました。\n\n通常の無料会員状態に戻りました。')
        }

        function updateStatus(planName, status) {
            const statusElement = document.getElementById('current-membership-status')
            const timeElement = document.getElementById('last-update-time')
            
            statusElement.textContent = planName
            statusElement.className = `status-indicator ${status === 'active' ? 'status-active' : 'status-inactive'}`
            
            timeElement.textContent = new Date().toLocaleString('ja-JP')
        }

        async function getCurrentUser() {
            try {
                const { data: { session } } = await supabase.auth.getSession()
                return session?.user || null
            } catch (error) {
                console.error('Error getting user:', error)
                return null
            }
        }

        // 初期状態確認
        document.addEventListener('DOMContentLoaded', async function() {
            currentUser = await getCurrentUser()
            if (currentUser) {
                const testSub = localStorage.getItem('test_subscription_' + currentUser.id)
                const demoSub = localStorage.getItem('demo_subscription_' + currentUser.id)
                
                if (testSub) {
                    const data = JSON.parse(testSub)
                    updateStatus('Standard会員 (テスト)', 'active')
                } else if (demoSub) {
                    const data = JSON.parse(demoSub)
                    updateStatus('Premium会員 (テスト)', 'active')
                } else {
                    updateStatus('未設定', 'inactive')
                }
            } else {
                updateStatus('ログイン必要', 'inactive')
            }
        })
    </script>
</body>
</html>