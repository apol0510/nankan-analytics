---
// ÁÆ°ÁêÜËÄÖÁî®„É°„É´„Éû„Ç¨ÈÖç‰ø°„Éö„Éº„Ç∏
export const prerender = true;
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="„É°„É´„Éû„Ç¨ÈÖç‰ø°ÁÆ°ÁêÜ - NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ">
    <style>
        /* „É¢„ÉÄ„É≥„Å™ÁÆ°ÁêÜÁîªÈù¢„Éá„Ç∂„Ç§„É≥ */
        .newsletter-admin {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
        }
        
        /* Âº∑Âà∂ÁöÑ„Å´„ÉÜ„Ç≠„Çπ„ÉàËâ≤„ÇíÁ¢∫‰øù */
        .newsletter-admin * {
            color: inherit !important;
        }
        
        .newsletter-admin h1, 
        .newsletter-admin h2, 
        .newsletter-admin h3, 
        .newsletter-admin h4,
        .newsletter-admin p,
        .newsletter-admin span,
        .newsletter-admin div,
        .newsletter-admin label,
        .newsletter-admin small {
            color: #1f2937 !important;
        }
        
        .admin-header {
            text-align: center;
            color: white !important;
            margin-bottom: 40px;
            padding: 40px 20px;
            background: rgba(255, 255, 255, 0.15);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            z-index: 1;
        }
        
        .admin-header h1,
        .admin-header p {
            color: white !important;
        }
        
        .admin-header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            margin: 0;
        }
        
        .admin-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            max-width: 1400px;
            margin: 0 auto;
        }
        
        @media (max-width: 1024px) {
            .admin-container {
                grid-template-columns: 1fr;
            }
        }
        
        .card {
            background: #ffffff !important;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            border: 1px solid #e2e8f0;
            position: relative;
            z-index: 1;
            color: #1f2937 !important;
        }
        
        .card * {
            color: #1f2937 !important;
        }
        
        .card h2 {
            color: #1f2937 !important;
            font-size: 1.5rem;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
        }
        
        .card h2::before {
            content: 'üé®';
            font-size: 1.2em;
        }
        
        .form-group {
            margin-bottom: 25px;
        }
        
        .form-group label {
            display: block;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
            font-size: 0.95rem;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 0.95rem;
            transition: all 0.3s ease;
            background: white;
            box-sizing: border-box;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }
        
        .template-sections {
            margin: 25px 0;
        }
        
        .template-section {
            background: #ffffff;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 4px solid #667eea;
            border: 1px solid #e2e8f0;
            position: relative;
            z-index: 5;
        }
        
        .template-section h3 {
            color: #4b5563;
            margin-bottom: 15px;
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .input-row {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 15px;
            margin-bottom: 15px;
        }
        
        @media (max-width: 768px) {
            .input-row {
                grid-template-columns: 1fr;
            }
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.95rem;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
            color: white;
        }
        
        .btn-info {
            background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
            color: white;
        }
        
        .action-buttons {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 2px solid #e2e8f0;
        }
        
        .preview-area {
            background: #f7fafc;
            border-radius: 15px;
            padding: 20px;
            border: 2px dashed #cbd5e0;
            min-height: 400px;
        }
        
        .preview-frame {
            width: 100%;
            height: 600px;
            border: none;
            border-radius: 10px;
            background: white;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        
        /* Ê†πÊú¨Ëß£Ê±∫: Â±•Ê≠¥„Çπ„Çø„Ç§„É´ */
        .new-history-item {
            background: #ffffff !important;
            border: 2px solid #d1d5db !important;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 5px solid #3b82f6 !important;
        }
        
        .new-history-title {
            font-size: 1.2rem !important;
            font-weight: 700 !important;
            color: #000000 !important;
            margin-bottom: 10px;
        }
        
        .new-history-info {
            font-size: 1rem !important;
            color: #000000 !important;
            line-height: 1.6;
            font-weight: 600 !important;
        }
        
        .new-status-sent {
            display: inline-block !important;
            background: #059669 !important;
            color: #ffffff !important;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.9rem !important;
            font-weight: 600 !important;
            margin-left: 10px;
        }
        
        /* ÂâäÈô§Ê∏à„Åø - Êñ∞„Åó„ÅÑ„Ç∑„É≥„Éó„É´„Å™„Çπ„Çø„Ç§„É´„Çí‰ΩøÁî® */
        
        .new-no-history {
            text-align: center;
            color: #000000 !important;
            font-weight: 700 !important;
            padding: 40px 20px;
            background: #ffffff !important;
            border-radius: 10px;
            border: 2px solid #d1d5db !important;
            font-size: 1.2rem !important;
        }
        
        /* Âº∑Âà∂ÁöÑ„Å´„Åô„Åπ„Å¶„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíË¶ã„Åà„Çã„Çà„ÅÜ„Å´„Åô„Çã */
        #newHistoryArea * {
            color: #000000 !important;
            background-color: transparent !important;
        }
        
        .error {
            color: #dc2626;
            background: #fee2e2;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #fca5a5;
            font-weight: 500;
        }
        
        /* Âè§„ÅÑ„Çπ„Çø„Ç§„É´ÂâäÈô§Ê∏à„Åø - Êñ∞„Åó„ÅÑ„Ç∑„É≥„Éó„É´„Çπ„Çø„Ç§„É´„Çí‰ΩøÁî® */
        
        @media (max-width: 768px) {
            .new-history-item {
                padding: 15px;
            }
            
            .new-history-title {
                font-size: 1.1rem;
            }
            
            .new-history-info {
                font-size: 0.95rem;
            }
        }

        /* „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºÈñ¢ÈÄ£„Çπ„Çø„Ç§„É´ */
        .progress-step {
            padding: 5px 0;
            display: flex;
            align-items: center;
            transition: color 0.3s ease;
        }

        .progress-step.completed {
            color: #059669 !important;
        }

        .progress-step.active {
            color: #0ea5e9 !important;
            font-weight: 600;
        }

        .progress-step.failed {
            color: #dc2626 !important;
        }

        .progress-step::before {
            content: "";
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
            background: currentColor;
            opacity: 0.6;
        }

        .progress-step.completed::before {
            background: #059669;
            opacity: 1;
        }

        .progress-step.active::before {
            background: #0ea5e9;
            opacity: 1;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .current-time {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-family: monospace;
            font-size: 0.9rem;
            text-align: center;
            margin: 20px 0;
        }
        
        /* „É¢„ÉÄ„É≥„Å™„Ç≠„É£„É≥„Éö„Éº„É≥„Éá„Ç∂„Ç§„É≥ */
        .campaign-preview {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            color: white;
            padding: 30px;
            border-radius: 20px;
            margin: 20px 0;
            position: relative;
            overflow: hidden;
        }
        
        .campaign-preview::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.1);
            transform: rotate(45deg);
        }
        
        .campaign-title {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 15px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .price-showcase {
            display: flex;
            align-items: center;
            gap: 20px;
            margin: 20px 0;
        }
        
        .old-price {
            font-size: 1.5rem;
            text-decoration: line-through;
            opacity: 0.7;
        }
        
        .new-price {
            font-size: 2.5rem;
            font-weight: bold;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .discount-badge {
            background: #10b981;
            padding: 8px 16px;
            border-radius: 25px;
            font-weight: bold;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        /* „Éó„É¨„Éì„É•„ÉºÊ©üËÉΩ„ÅÆÊîπÂñÑ */
        .preview-controls {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .preview-help {
            background: #e3f2fd;
            border: 1px solid #bbdefb;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            color: #1565c0;
        }
        
        .preview-help h4 {
            margin: 0 0 10px 0;
            color: #0d47a1;
        }
        
        .preview-placeholder {
            text-align: center;
            color: #718096;
            padding: 60px 20px;
            border: 2px dashed #cbd5e0;
            border-radius: 15px;
            background: #f7fafc;
        }
        
        .preview-placeholder::before {
            content: 'üîç';
            font-size: 3rem;
            display: block;
            margin-bottom: 15px;
        }
    </style>
    
    <div class="newsletter-admin">
        <div class="admin-header">
            <h1>üìß „É°„É´„Éû„Ç¨ÈÖç‰ø°ÁÆ°ÁêÜ</h1>
            <p class="subtitle">NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ„ÅÆ„É°„Éº„É´„Éû„Ç¨„Ç∏„É≥„ÇíÈÖç‰ø°</p>
        </div>

        <div class="admin-container">
            <!-- ÈÖç‰ø°„Éï„Ç©„Éº„É† -->
            <div class="card">
                <h2>Êñ∞Ë¶èÈÖç‰ø°‰ΩúÊàê</h2>
                
                <div class="form-group">
                    <label for="subject">‰ª∂Âêç</label>
                    <input type="text" id="subject" placeholder="‰æã: „ÄêNANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ„ÄëÊú¨Êó•„ÅÆÊ≥®ÁõÆ„É¨„Éº„Çπ‰∫àÊÉ≥" />
                </div>

                <div class="form-group">
                    <label for="targetPlan">ÈÖç‰ø°ÂØæË±°</label>
                    <select id="targetPlan">
                        <option value="all">ÂÖ®‰ºöÂì°</option>
                        <option value="free">ÁÑ°Êñô‰ºöÂì°„ÅÆ„Åø</option>
                        <option value="paid">ÊúâÊñô‰ºöÂì°„ÅÆ„ÅøÔºàStandard + PremiumÔºâ</option>
                        <option value="standard">Standard‰ºöÂì°„ÅÆ„Åø</option>
                        <option value="premium">Premium‰ºöÂì°„ÅÆ„Åø</option>
                        <option value="segment">„Ç´„Çπ„Çø„É†„Çª„Ç∞„É°„É≥„Éà</option>
                    </select>
                </div>
                
                <!-- „Ç´„Çπ„Çø„É†„Çª„Ç∞„É°„É≥„ÉàË®≠ÂÆö -->
                <div id="segmentSection" style="display: none;" class="form-group">
                    <label style="color: #374151; font-weight: 600;">üéØ „Çª„Ç∞„É°„É≥„ÉàÊù°‰ª∂</label>
                    <div style="background: #f0f9ff; padding: 20px; border-radius: 8px; border: 2px solid #0ea5e9;">
                        
                        <div style="display: grid; gap: 15px;">
                            <!-- ÁôªÈå≤Êó•„Å´„Çà„ÇãÁµû„ÇäËæº„Åø -->
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #0c4a6e;">üìÖ ÁôªÈå≤Êó•</label>
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                    <input type="date" id="segmentDateFrom" placeholder="ÈñãÂßãÊó•">
                                    <input type="date" id="segmentDateTo" placeholder="ÁµÇ‰∫ÜÊó•">
                                </div>
                                <small style="color: #0369a1;">ÊåáÂÆö„Åó„ÅüÊúüÈñì„Å´ÁôªÈå≤„Åó„Åü„É¶„Éº„Ç∂„Éº„ÅÆ„Åø„Å´ÈÖç‰ø°</small>
                            </div>
                            
                            <!-- „Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„Å´„Çà„ÇãÁµû„ÇäËæº„Åø -->
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #0c4a6e;">‚ö° „Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£</label>
                                <select id="segmentActivity">
                                    <option value="">Âà∂Èôê„Å™„Åó</option>
                                    <option value="active">„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„É¶„Éº„Ç∂„ÉºÔºà7Êó•‰ª•ÂÜÖ„É≠„Ç∞„Ç§„É≥Ôºâ</option>
                                    <option value="inactive">Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„É¶„Éº„Ç∂„ÉºÔºà7Êó•‰ª•‰∏äÊú™„É≠„Ç∞„Ç§„É≥Ôºâ</option>
                                    <option value="new">Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÔºà3Êó•‰ª•ÂÜÖÁôªÈå≤Ôºâ</option>
                                </select>
                                <small style="color: #0369a1;">„É¶„Éº„Ç∂„Éº„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£Áä∂Ê≥Å„ÅßÁµû„ÇäËæº„Åø</small>
                            </div>
                            
                            <!-- „É°„Éº„É´ÈÖç‰ø°Ê≠¥„Å´„Çà„ÇãÁµû„ÇäËæº„Åø -->
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #0c4a6e;">üìß ÈÖç‰ø°Â±•Ê≠¥</label>
                                <select id="segmentEmailHistory">
                                    <option value="">Âà∂Èôê„Å™„Åó</option>
                                    <option value="no-email">Êú™ÈÖç‰ø°„É¶„Éº„Ç∂„Éº</option>
                                    <option value="recent-email">ÊúÄËøëÈÖç‰ø°Ê∏à„ÅøÔºà3Êó•‰ª•ÂÜÖÔºâ</option>
                                    <option value="old-email">ÈÖç‰ø°„Åã„ÇâÊôÇÈñì„ÅåÁµåÈÅéÔºà7Êó•‰ª•‰∏äÔºâ</option>
                                </select>
                                <small style="color: #0369a1;">ÈÅéÂéª„ÅÆ„É°„Éº„É´ÈÖç‰ø°Áä∂Ê≥Å„ÅßÁµû„ÇäËæº„Åø</small>
                            </div>
                            
                            <!-- „Ç´„Çπ„Çø„É†„Çø„Ç∞ -->
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #0c4a6e;">üè∑Ô∏è „Ç´„Çπ„Çø„É†„Çø„Ç∞</label>
                                <input type="text" id="segmentTags" placeholder="‰æã: VIP,Èñ¢Êù±,Á´∂È¶¨Â•Ω„ÅçÔºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ">
                                <small style="color: #0369a1;">ÁâπÂÆö„ÅÆ„Çø„Ç∞„ÇíÊåÅ„Å§„É¶„Éº„Ç∂„Éº„ÅÆ„Åø„Å´ÈÖç‰ø°</small>
                            </div>
                            
                            <!-- Èô§Â§ñÊù°‰ª∂ -->
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #dc2626;">‚ùå Èô§Â§ñÊù°‰ª∂</label>
                                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                                    <label style="display: flex; align-items: center; gap: 5px;">
                                        <input type="checkbox" id="excludeBounced" style="margin: 0;">
                                        <span>ÈÖç‰ø°Â§±ÊïóÂ±•Ê≠¥„ÅÇ„Çä</span>
                                    </label>
                                    <label style="display: flex; align-items: center; gap: 5px;">
                                        <input type="checkbox" id="excludeUnsubscribed" style="margin: 0;">
                                        <span>ÈÖç‰ø°ÂÅúÊ≠¢Ê∏à„Åø</span>
                                    </label>
                                    <label style="display: flex; align-items: center; gap: 5px;">
                                        <input type="checkbox" id="excludeInactive" style="margin: 0;">
                                        <span>30Êó•‰ª•‰∏äÊú™„É≠„Ç∞„Ç§„É≥</span>
                                    </label>
                                </div>
                                <small style="color: #991b1b;">„ÉÅ„Çß„ÉÉ„ÇØ„Åó„ÅüÊù°‰ª∂„Å´Ë©≤ÂΩì„Åô„Çã„É¶„Éº„Ç∂„Éº„ÇíÈô§Â§ñ</small>
                            </div>
                        </div>
                        
                        <div style="margin-top: 20px; padding-top: 15px; border-top: 1px solid #0ea5e9;">
                            <button id="previewSegmentBtn" class="btn btn-info" style="margin-right: 10px;">üëÄ ÂØæË±°„É¶„Éº„Ç∂„ÉºÁ¢∫Ë™ç</button>
                            <span id="segmentCount" style="color: #0c4a6e; font-weight: 600;"></span>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="templateType">„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„Éó</label>
                    <select id="templateType">
                        <option value="prediction">‰∫àÊÉ≥ÈÖç‰ø°</option>
                        <option value="result">ÁµêÊûúÂ†±Âëä</option>
                        <option value="campaign">„Ç≠„É£„É≥„Éö„Éº„É≥</option>
                        <option value="custom">„Ç´„Çπ„Çø„É†</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="layoutOrder">üìã „É¨„Ç§„Ç¢„Ç¶„ÉàÈ†ÜÂ∫è</label>
                    <select id="layoutOrder">
                        <option value="content-first">Êú¨Êñá ‚Üí ‰∫àÊÉ≥ÊÉÖÂ†±</option>
                        <option value="prediction-first">‰∫àÊÉ≥ÊÉÖÂ†± ‚Üí Êú¨Êñá</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="mainContent">Êú¨Êñá</label>
                    <textarea id="mainContent" rows="8" placeholder="„É°„Éº„É´„ÅÆÊú¨Êñá„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"></textarea>
                </div>

                <!-- ‰∫àÊÉ≥„Çª„ÇØ„Ç∑„Éß„É≥Ôºà‰∫àÊÉ≥ÈÖç‰ø°„Çø„Ç§„Éó„ÅÆÂ†¥ÂêàÔºâ -->
                <div id="predictionSection">
                    <h3 style="color: #4b5563; font-weight: 600; font-size: 1.2rem;">üéØ ‰∫àÊÉ≥ÊÉÖÂ†±</h3>
                    <div id="predictionsContainer">
                        <div class="prediction-input">
                            <input type="text" placeholder="„É¨„Éº„ÇπÂêçÔºà‰æã: Á¨¨11R „É°„Ç§„É≥„É¨„Éº„ÇπÔºâ" class="race-name" />
                            <textarea placeholder="‰∫àÊÉ≥È¶¨ÔºàÊîπË°åÂå∫Âàá„ÇäÔºâ" rows="3" class="race-horses"></textarea>
                        </div>
                    </div>
                    <button type="button" id="addPrediction" class="btn-secondary">+ ‰∫àÊÉ≥„ÇíËøΩÂä†</button>
                    
                    <div class="form-group" style="margin-top: 20px;">
                        <label for="predictionNote">üìù ‰∫àÊÉ≥Ë£úË∂≥„ÉªËøΩË®ò</label>
                        <textarea id="predictionNote" rows="3" placeholder="‰∫àÊÉ≥„ÅÆË£úË∂≥ÊÉÖÂ†±„ÄÅÊ≥®ÊÑèÁÇπ„ÄÅÊà¶Áï•Ë™¨Êòé„Å™„Å©Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ"></textarea>
                    </div>
                    
                    <div class="form-group" style="margin-top: 15px;">
                        <label for="additionalSection">üìÑ ËøΩÂä†„Çª„ÇØ„Ç∑„Éß„É≥</label>
                        <textarea id="additionalSection" rows="4" placeholder="‰∫àÊÉ≥ÊÉÖÂ†±„ÅÆÂæå„Å´Ë°®Á§∫„Åô„ÇãËøΩÂä†„Ç≥„É≥„ÉÜ„É≥„ÉÑÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ&#13;&#10;‰æãÔºöÈáçË¶Å„Å™„ÅäÁü•„Çâ„Åõ„ÄÅ„Ç≠„É£„É≥„Éö„Éº„É≥ÊÉÖÂ†±„ÄÅÊ≥®ÊÑè‰∫ãÈ†Ö„Å™„Å©"></textarea>
                    </div>
                </div>

                <!-- ÁµêÊûúÂ†±Âëä„Çª„ÇØ„Ç∑„Éß„É≥ÔºàÁµêÊûúÂ†±Âëä„Çø„Ç§„Éó„ÅÆÂ†¥ÂêàÔºâ -->
                <div id="resultSection" style="display: none;">
                    <h3 style="color: #4b5563; font-weight: 600; font-size: 1.2rem;">üìä Êò®Êó•„ÅÆÁµêÊûú</h3>
                    <div id="resultsContainer">
                        <div class="result-input">
                            <input type="text" placeholder="„É¨„Éº„ÇπÂêçÔºà‰æã: Á¨¨11R „É°„Ç§„É≥„É¨„Éº„ÇπÔºâ" class="result-race-name" />
                            <div class="result-details">
                                <input type="text" placeholder="1ÁùÄÈ¶¨" class="result-winner" />
                                <input type="text" placeholder="ÈÖçÂΩìÔºà‰æã: ¬•1,200Ôºâ" class="result-payout" />
                                <select class="result-status">
                                    <option value="hit">üéØ ÁöÑ‰∏≠ÔºÅ</option>
                                    <option value="miss">‚ùå ‰∏çÁöÑ‰∏≠</option>
                                    <option value="near">üìà ÊÉú„Åó„ÅÑÔºÅ</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <button type="button" id="addResult" class="btn-secondary">+ ÁµêÊûú„ÇíËøΩÂä†</button>
                    <div class="total-stats">
                        <input type="text" placeholder="‰ªäÊúà„ÅÆÁöÑ‰∏≠ÁéáÔºà‰æã: 78%Ôºâ" id="monthlyHitRate" />
                        <input type="text" placeholder="‰ªäÊúà„ÅÆÂèéÊîØÔºà‰æã: +¬•45,600Ôºâ" id="monthlyProfit" />
                    </div>
                </div>

                <!-- „Ç≠„É£„É≥„Éö„Éº„É≥„Çª„ÇØ„Ç∑„Éß„É≥Ôºà„Ç≠„É£„É≥„Éö„Éº„É≥„Çø„Ç§„Éó„ÅÆÂ†¥ÂêàÔºâ -->
                <div id="campaignSection" style="display: none;">
                    <h3 style="color: #4b5563; font-weight: 600; font-size: 1.2rem;">üé™ „Ç≠„É£„É≥„Éö„Éº„É≥ÊÉÖÂ†±</h3>
                    <div class="campaign-inputs">
                        <input type="text" placeholder="„Ç≠„É£„É≥„Éö„Éº„É≥ÂêçÔºà‰æã: ÈôêÂÆö50ÂêçÔºÅÁâπÂà•‰∫àÊÉ≥„Éó„É©„É≥Ôºâ" id="campaignTitle" />
                        <textarea placeholder="„Ç≠„É£„É≥„Éö„Éº„É≥Ë©≥Á¥∞„ÉªÁâπÂÖ∏ÂÜÖÂÆπ" rows="3" id="campaignDetails"></textarea>
                        <input type="text" placeholder="ÈÄöÂ∏∏‰æ°Ê†ºÔºà‰æã: ¬•9,980Ôºâ" id="originalPrice" />
                        <input type="text" placeholder="ÁâπÂà•‰æ°Ê†ºÔºà‰æã: ¬•4,980Ôºâ" id="campaignPrice" />
                        <input type="text" placeholder="ÊúüÈôêÔºà‰æã: 12Êúà31Êó•„Åæ„ÅßÔºâ" id="campaignDeadline" />
                        <input type="text" placeholder="CTA„Éú„Çø„É≥„ÉÜ„Ç≠„Çπ„ÉàÔºà‰æã: üéØ ÈôêÂÆö„Ç™„Éï„Ç°„Éº„ÇíÁ¢∫Ë™ç„Åô„ÇãÔºâ" id="ctaText" />
                        <input type="url" placeholder="CTA„Éú„Çø„É≥„É™„É≥„ÇØÂÖàURL" id="ctaUrl" />
                    </div>
                </div>

                <!-- „Ç´„Çπ„Çø„É†„Çª„ÇØ„Ç∑„Éß„É≥Ôºà„Ç´„Çπ„Çø„É†„Çø„Ç§„Éó„ÅÆÂ†¥ÂêàÔºâ -->
                <div id="customSection" style="display: none;">
                    <h3 style="color: #4b5563; font-weight: 600; font-size: 1.2rem;">üé® „Ç´„Çπ„Çø„É†„É¨„Ç§„Ç¢„Ç¶„Éà</h3>
                    <div class="custom-inputs">
                        <label style="color: #374151; font-weight: 600;">ËÉåÊôØËâ≤„ÉÜ„Éº„Éû</label>
                        <select id="customTheme">
                            <option value="default">„Éá„Éï„Ç©„É´„Éà</option>
                            <option value="gold">üèÜ „Ç¥„Éº„É´„ÉâÔºàÂãùÂà©ÊÑüÔºâ</option>
                            <option value="red">üî• „É¨„ÉÉ„ÉâÔºàÁ∑äÊÄ•ÊÑüÔºâ</option>
                            <option value="blue">üíé „Éñ„É´„ÉºÔºà‰ø°È†ºÊÑüÔºâ</option>
                        </select>
                        
                        <label style="color: #374151; font-weight: 600;">ÁâπÂà•Ë¶ãÂá∫„Åó</label>
                        <input type="text" placeholder="ÁâπÂà•Ë¶ãÂá∫„ÅóÔºà‰æã: üö® Á∑äÊÄ•ÈÄüÂ†±ÔºÅÔºâ" id="customHeadline" />
                        
                        <label style="color: #374151; font-weight: 600;">„Ç¢„ÇØ„Çª„É≥„ÉàÊÉÖÂ†±</label>
                        <textarea placeholder="Âº∑Ë™ø„Åó„Åü„ÅÑÊÉÖÂ†±„ÉªÊï∞Â≠ó„ÉªÂÆüÁ∏æ" rows="2" id="customAccent"></textarea>
                        
                        <label style="color: #374151; font-weight: 600;">ËøΩÂä†CTA</label>
                        <input type="text" placeholder="ËøΩÂä†„Éú„Çø„É≥„ÉÜ„Ç≠„Çπ„Éà" id="customSectionCtaText" />
                        <input type="url" placeholder="ËøΩÂä†„Éú„Çø„É≥URL" id="customSectionCtaUrl" />
                    </div>
                </div>

                <!-- CTA„Éú„Çø„É≥Ë®≠ÂÆö -->
                <div class="form-group" style="background: #f8fafc; padding: 20px; border-radius: 12px; border: 1px solid #e2e8f0;">
                    <h3 style="color: #4b5563; font-weight: 600; font-size: 1.1rem; margin-bottom: 15px;">üéØ CTA„Éú„Çø„É≥Ë®≠ÂÆö</h3>
                    
                    <div style="margin-bottom: 15px;">
                        <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                            <input type="checkbox" id="showCtaButton" checked style="width: 18px; height: 18px;">
                            <span>CTA„Éú„Çø„É≥„ÇíË°®Á§∫„Åô„Çã</span>
                        </label>
                    </div>
                    
                    <div id="ctaButtonSettings">
                        <div style="display: grid; gap: 12px;">
                            <input type="text" id="customCtaText" placeholder="„Éú„Çø„É≥„ÉÜ„Ç≠„Çπ„ÉàÔºà‰æã: üèá ÊúâÊñô„Éó„É©„É≥„ÅßÂÖ®„É¨„Éº„Çπ‰∫àÊÉ≥„ÇíË¶ã„ÇãÔºâ" />
                            <input type="url" id="customCtaUrl" placeholder="„É™„É≥„ÇØÂÖàURL" value="https://nankan-analytics.keiba.link/pricing/" />
                        </div>
                    </div>
                </div>

                <!-- ‚ö†Ô∏è BrevoÂà∂Á¥ÑË≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏ -->
                <div style="background: linear-gradient(135deg, #dc2626, #ef4444); border-radius: 10px; padding: 20px; margin-bottom: 20px; color: white; border: 2px solid #b91c1c;">
                    <h3 style="margin: 0 0 15px 0; color: white; font-weight: 600;">‚ö†Ô∏è ÈáçË¶ÅÔºö‰∫àÁ¥ÑÈÖç‰ø°Âà∂Èôê„Å´„Å§„ÅÑ„Å¶</h3>
                    <div style="background: rgba(255,255,255,0.15); border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: white;">üö® ÁèæÂú®Á¢∫Ë™ç„Åï„Çå„Å¶„ÅÑ„ÇãÂïèÈ°å</h4>
                        <ul style="margin: 0; padding-left: 20px; color: rgba(255,255,255,0.9);">
                            <li><strong>Brevo APIÂà∂Èôê</strong>: 72ÊôÇÈñì‰ª•‰∏äÂÖà„ÅÆ‰∫àÁ¥ÑÈÖç‰ø°„ÅåÂ§±Êïó„Åô„Çã</li>
                            <li><strong>ÈÖç‰ø°Êú™Âà∞ÈÅî</strong>: UI‰∏ä„ÅØ„ÄåÊàêÂäü„ÄçË°®Á§∫„Å†„ÅåÂÆüÈöõ„ÅØÈÖç‰ø°„Åï„Çå„Å™„ÅÑ</li>
                            <li><strong>Â±•Ê≠¥‰∏çÊï¥Âêà</strong>: ÈÖç‰ø°Â±•Ê≠¥„ÅåÂÆüÈöõ„ÅÆÁä∂Ê≥Å„Å®Áï∞„Å™„Çã</li>
                        </ul>
                    </div>
                    <div style="background: rgba(255,255,255,0.1); border-radius: 8px; padding: 12px; text-align: center;">
                        <div style="font-weight: 600; margin-bottom: 5px;">üõ†Ô∏è Êé®Â•®ÂØæÂá¶Ê≥ï</div>
                        <div style="font-size: 0.9rem; opacity: 0.9;">72ÊôÇÈñì‰ª•ÂÜÖ„ÅÆ‰∫àÁ¥ÑÈÖç‰ø°„ÅÆ„ÅøÂà©Áî®„Åô„Çã„Åã„ÄÅÊâãÂãï„Åß„ÅÆÂç≥ÊôÇÈÖç‰ø°„ÇíÊé®Â•®</div>
                    </div>
                </div>

                <!-- È´òÂ∫¶„Å™ÈÖç‰ø°„Çπ„Ç±„Ç∏„É•„Éº„É´Ë®≠ÂÆö -->
                <div style="background: #f8fafc; border-radius: 10px; padding: 20px; margin-bottom: 20px; border: 2px solid #cbd5e0;">
                    <h3 style="margin: 0 0 15px 0; color: #1e40af; font-weight: 600;">üìÖ ÈÖç‰ø°„Çπ„Ç±„Ç∏„É•„Éº„É´Ë®≠ÂÆö <span style="color: #dc2626; font-size: 0.8rem;">(‚ö†Ô∏èÂà∂Èôê„ÅÇ„Çä)</span></h3>
                    
                    <!-- Âç≥ÊôÇ/‰∫àÁ¥ÑÈÅ∏Êäû -->
                    <div style="margin-bottom: 15px;">
                        <div style="display: flex; gap: 20px; flex-wrap: wrap;">
                            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                <input type="radio" name="scheduleType" value="immediate" checked id="scheduleImmediate" style="margin: 0;">
                                <span style="font-weight: 600; color: #059669;">üöÄ Âç≥ÊôÇÈÖç‰ø°</span>
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                <input type="radio" name="scheduleType" value="scheduled" id="scheduleReserved" style="margin: 0;">
                                <span style="font-weight: 600; color: #3b82f6;">üìÖ ‰∫àÁ¥ÑÈÖç‰ø°</span>
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                <input type="radio" name="scheduleType" value="recurring" id="scheduleRecurring" style="margin: 0;">
                                <span style="font-weight: 600; color: #7c3aed;">üîÑ ÂÆöÊúüÈÖç‰ø°</span>
                            </label>
                        </div>
                    </div>
                    
                    <!-- ‰∫àÁ¥ÑÈÖç‰ø°Ë®≠ÂÆö -->
                    <div id="scheduledSection" style="display: none; background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                        <h4 style="margin: 0 0 15px 0; color: #0c4a6e;">üìÖ ‰∫àÁ¥ÑÈÖç‰ø°Ë®≠ÂÆö</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÈÖç‰ø°Êó•ÊôÇ</label>
                                <input type="datetime-local" id="scheduledAt" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;" />
                                <div id="scheduleWarning" style="display: none; margin-top: 8px; padding: 8px; background: #fef2f2; border: 1px solid #fecaca; border-radius: 4px; color: #dc2626; font-size: 0.8rem;">
                                    ‚ö†Ô∏è 72ÊôÇÈñì‰ª•‰∏äÂÖà„ÅÆ‰∫àÁ¥Ñ„ÅØÈÖç‰ø°„Åï„Çå„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô
                                </div>
                                <div id="scheduleValid" style="display: none; margin-top: 8px; padding: 8px; background: #f0fdf4; border: 1px solid #bbf7d0; border-radius: 4px; color: #16a34a; font-size: 0.8rem;">
                                    ‚úÖ „Åì„ÅÆÊôÇÈñì„Å™„ÇâÊ≠£Â∏∏„Å´ÈÖç‰ø°„Åï„Çå„Åæ„Åô
                                </div>
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">„Çø„Ç§„É†„Çæ„Éº„É≥</label>
                                <select id="scheduleTimezone" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <option value="Asia/Tokyo">Êó•Êú¨ÊôÇÈñì (JST)</option>
                                    <option value="UTC">ÂçîÂÆö‰∏ñÁïåÊôÇ (UTC)</option>
                                    <option value="America/New_York">„Éã„É•„Éº„É®„Éº„ÇØÊôÇÈñì</option>
                                    <option value="Europe/London">„É≠„É≥„Éâ„É≥ÊôÇÈñì</option>
                                </select>
                            </div>
                        </div>
                        
                        <!-- „ÇØ„Ç§„ÉÉ„ÇØË®≠ÂÆö„Éú„Çø„É≥ -->
                        <div style="margin-top: 15px;">
                            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #6b7280;">„ÇØ„Ç§„ÉÉ„ÇØË®≠ÂÆö:</label>
                            <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                                <button type="button" id="schedule1Hour" class="btn" style="padding: 5px 10px; font-size: 0.8rem; background: #f3f4f6;">+1ÊôÇÈñì</button>
                                <button type="button" id="schedule3Hours" class="btn" style="padding: 5px 10px; font-size: 0.8rem; background: #f3f4f6;">+3ÊôÇÈñì</button>
                                <button type="button" id="scheduleTomorrow9AM" class="btn" style="padding: 5px 10px; font-size: 0.8rem; background: #f3f4f6;">ÊòéÊó•9ÊôÇ</button>
                                <button type="button" id="scheduleMonday9AM" class="btn" style="padding: 5px 10px; font-size: 0.8rem; background: #f3f4f6;">Êù•ÈÄ±ÊúàÊõú9ÊôÇ</button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- ÂÆöÊúüÈÖç‰ø°Ë®≠ÂÆö -->
                    <div id="recurringSection" style="display: none; background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                        <h4 style="margin: 0 0 15px 0; color: #7c2d12;">üîÑ ÂÆöÊúüÈÖç‰ø°Ë®≠ÂÆö</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin-bottom: 15px;">
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÈÖç‰ø°È†ªÂ∫¶</label>
                                <select id="recurringFrequency" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <option value="daily">ÊØéÊó•</option>
                                    <option value="weekly">ÊØéÈÄ±</option>
                                    <option value="monthly">ÊØéÊúà</option>
                                    <option value="custom">„Ç´„Çπ„Çø„É†</option>
                                </select>
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÈÖç‰ø°ÊôÇÂàª</label>
                                <input type="time" id="recurringTime" value="09:00" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;" />
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÈñãÂßãÊó•</label>
                                <input type="date" id="recurringStartDate" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;" />
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÁµÇ‰∫ÜÊó• („Ç™„Éó„Ç∑„Éß„É≥)</label>
                                <input type="date" id="recurringEndDate" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;" />
                            </div>
                        </div>
                        
                        <!-- ÈÄ±Èñì„Çπ„Ç±„Ç∏„É•„Éº„É´ (ÈÄ±Âçò‰Ωç„ÅÆÂ†¥Âêà) -->
                        <div id="weeklySchedule" style="display: none; margin-bottom: 15px;">
                            <label style="display: block; margin-bottom: 8px; font-weight: 600;">ÈÖç‰ø°„Åô„ÇãÊõúÊó•:</label>
                            <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                                <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" value="1" id="recurMon"> Êúà</label>
                                <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" value="2" id="recurTue"> ÁÅ´</label>
                                <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" value="3" id="recurWed"> Ê∞¥</label>
                                <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" value="4" id="recurThu"> Êú®</label>
                                <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" value="5" id="recurFri"> Èáë</label>
                                <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" value="6" id="recurSat"> Âúü</label>
                                <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" value="0" id="recurSun"> Êó•</label>
                            </div>
                        </div>
                        
                        <!-- ÂÆöÊúüÈÖç‰ø°„Éó„É¨„Éì„É•„Éº -->
                        <div id="recurringPreview" style="background: #fef3c7; padding: 10px; border-radius: 6px; border-left: 4px solid #f59e0b;">
                            <strong style="color: #92400e;">üìã ÈÖç‰ø°‰∫àÂÆö:</strong>
                            <div id="recurringPreviewText" style="color: #78350f; margin-top: 5px;">Ë®≠ÂÆö„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</div>
                        </div>
                    </div>
                    
                    <!-- „Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫ -->
                    <div style="display: flex; justify-content: space-between; align-items: center; font-size: 0.9rem;">
                        <div>
                            <strong style="color: #374151;">ÁèæÂú®ÊôÇÂàª:</strong> 
                            <span id="currentTime" style="color: #4b5563;">--:--</span> (JST)
                        </div>
                        <div id="scheduleStatus" style="padding: 5px 10px; border-radius: 4px; font-weight: 600;">
                            üöÄ Âç≥ÊôÇÈÖç‰ø°
                        </div>
                    </div>
                </div>

                <div class="action-buttons">
                    <button id="previewBtn" class="btn btn-secondary">„Éó„É¨„Éì„É•„Éº</button>
                    <button id="clearPreviewBtn" class="btn btn-secondary">„Éó„É¨„Éì„É•„Éº„Çí„ÇØ„É™„Ç¢</button>
                    <button id="testSendBtn" class="btn btn-warning">üìß „ÉÜ„Çπ„ÉàÈÄÅ‰ø°</button>
                    <button id="saveTemplateBtn" class="btn btn-info">üíæ „ÉÜ„É≥„Éó„É¨„Éº„Éà‰øùÂ≠ò</button>
                    <button id="loadTemplateBtn" class="btn btn-info">üìÇ „ÉÜ„É≥„Éó„É¨„Éº„ÉàË™≠Ëæº</button>
                    <button id="sendBtn" class="btn btn-primary">ÈÖç‰ø°ÂÆüË°å</button>
                </div>
                
                <!-- ÈÖç‰ø°„Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº -->
                <div id="sendProgressArea" style="display: none; margin-top: 20px; background: #f0f9ff; border-radius: 10px; padding: 20px; border: 2px solid #0ea5e9;">
                    <h4 style="margin: 0 0 15px 0; color: #0c4a6e; font-weight: 600;">üìä ÈÖç‰ø°ÈÄ≤Ë°åÁä∂Ê≥Å</h4>
                    
                    <!-- ÂÖ®‰Ωì„Éó„É≠„Ç∞„É¨„Çπ -->
                    <div style="margin-bottom: 15px;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px;">
                            <span id="progressLabel" style="font-weight: 600; color: #374151;">Ê∫ñÂÇô‰∏≠...</span>
                            <span id="progressPercentage" style="font-weight: 600; color: #0ea5e9;">0%</span>
                        </div>
                        <div style="background: #e0f2fe; height: 12px; border-radius: 6px; overflow: hidden;">
                            <div id="progressBar" style="background: linear-gradient(90deg, #0ea5e9, #06b6d4); height: 100%; width: 0%; transition: width 0.3s ease; border-radius: 6px;"></div>
                        </div>
                    </div>
                    
                    <!-- Ë©≥Á¥∞„Çπ„ÉÜ„ÉÉ„Éó -->
                    <div id="progressSteps" style="font-size: 0.9rem; color: #475569;">
                        <div id="step1" class="progress-step">‚è≥ „Éá„Éº„ÇøÊ§úË®º‰∏≠...</div>
                        <div id="step2" class="progress-step">‚è≥ Âèó‰ø°ËÄÖ„É™„Çπ„ÉàÊ∫ñÂÇô‰∏≠...</div>
                        <div id="step3" class="progress-step">‚è≥ „É°„Éº„É´ÈÄÅ‰ø°‰∏≠...</div>
                        <div id="step4" class="progress-step">‚è≥ ÁµêÊûúÁ¢∫Ë™ç‰∏≠...</div>
                    </div>
                    
                    <!-- ÈÄÅ‰ø°Áµ±Ë®à -->
                    <div id="progressStats" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px; margin-top: 15px; padding: 15px; background: white; border-radius: 8px;">
                        <div style="text-align: center;">
                            <div style="font-size: 1.5em; font-weight: bold; color: #059669;" id="sentCount">0</div>
                            <div style="font-size: 0.8em; color: #6b7280;">ÈÄÅ‰ø°Ê∏à„Åø</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 1.5em; font-weight: bold; color: #dc2626;" id="failedCount">0</div>
                            <div style="font-size: 0.8em; color: #6b7280;">Â§±Êïó</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 1.5em; font-weight: bold; color: #3b82f6;" id="remainingCount">0</div>
                            <div style="font-size: 0.8em; color: #6b7280;">ÊÆã„Çä</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 1.5em; font-weight: bold; color: #7c3aed;" id="estimatedTime">--</div>
                            <div style="font-size: 0.8em; color: #6b7280;">‰∫àÊÉ≥ÊôÇÈñì</div>
                        </div>
                    </div>
                    
                    <!-- „Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥ -->
                    <div style="text-align: center; margin-top: 15px;">
                        <button id="cancelSendBtn" class="btn btn-secondary" style="display: none;">‚ùå ÈÖç‰ø°„Ç≠„É£„É≥„Çª„É´</button>
                        <button id="hideProgressBtn" class="btn btn-secondary" style="display: none;">üìä ÂÆå‰∫Ü - „Éó„É≠„Ç∞„É¨„Çπ„ÇíÈñâ„Åò„Çã</button>
                    </div>
                </div>
            </div>

            <!-- „Éó„É¨„Éì„É•„Éº„Ç®„É™„Ç¢ -->
            <div class="card">
                <h2>„É°„Éº„É´„Éó„É¨„Éì„É•„Éº</h2>
                
                <div class="preview-help">
                    <h4>üí¨ „Éó„É¨„Éì„É•„ÉºÊ©üËÉΩ„ÅÆ‰Ωø„ÅÑÊñπ</h4>
                    <p><strong>„Éó„É¨„Éì„É•„ÉºÁ¢∫Ë™ç</strong>: Â∑¶„ÅÆ„ÄåÊñ∞Ë¶èÈÖç‰ø°‰ΩúÊàê„Äç„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆ„Äå„Éó„É¨„Éì„É•„Éº„Äç„Éú„Çø„É≥„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
                    <p>ÂÖ•ÂäõÂÜÖÂÆπ„ÇíÂ§âÊõ¥„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅÂÜçÂ∫¶„Äå„Éó„É¨„Éì„É•„Éº„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Êõ¥Êñ∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
                </div>
                
                <div id="previewArea" class="preview-area">
                    <div class="preview-placeholder">
                        „É°„Éº„É´„ÅÆ„Éó„É¨„Éì„É•„Éº„ÇíË°®Á§∫„Åó„Åæ„Åô<br>
                        <small>‰∏ä„ÅÆ„Äå„Éó„É¨„Éì„É•„ÉºÊõ¥Êñ∞„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ</small>
                    </div>
                    <iframe id="previewFrame" class="preview-frame" style="display: none;"></iframe>
                </div>
            </div>

            <!-- „É™„Ç¢„É´„Çø„Ç§„É†ÈÖç‰ø°„É¢„Éã„Çø -->
            <div class="card">
                <h2 style="color: #0ea5e9; font-weight: 600;">üìä „É™„Ç¢„É´„Çø„Ç§„É†ÈÖç‰ø°„É¢„Éã„Çø</h2>
                <div style="background: linear-gradient(135deg, #0ea5e9 0%, #3b82f6 100%); border-radius: 10px; padding: 20px; margin-bottom: 20px; color: white;">
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                        <!-- „É™„Ç¢„É´„Çø„Ç§„É†Áµ±Ë®à -->
                        <div style="text-align: center;">
                            <div style="font-size: 2.5em; font-weight: bold;" id="realtimeSentToday">0</div>
                            <div style="opacity: 0.9;">‰ªäÊó•„ÅÆÈÖç‰ø°Êï∞</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 2.5em; font-weight: bold;" id="realtimeSuccessRate">100%</div>
                            <div style="opacity: 0.9;">ÊàêÂäüÁéá</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 2.5em; font-weight: bold;" id="realtimeActiveUsers">--</div>
                            <div style="opacity: 0.9;">„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„É¶„Éº„Ç∂„Éº</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 2.5em; font-weight: bold;" id="realtimeQueueSize">0</div>
                            <div style="opacity: 0.9;">ÈÖç‰ø°„Ç≠„É•„Éº</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 20px; text-align: center; opacity: 0.8;">
                        ÊúÄÁµÇÊõ¥Êñ∞: <span id="realtimeLastUpdate">--:--:--</span> | 
                        <span id="realtimeStatus" style="font-weight: 600;">üü¢ „Ç∑„Çπ„ÉÜ„É†Ê≠£Â∏∏</span>
                    </div>
                </div>
                
                <!-- „É™„Ç¢„É´„Çø„Ç§„É†ÈÖç‰ø°„É≠„Ç∞ -->
                <div style="background: #f8fafc; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
                    <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 15px;">
                        <h3 style="margin: 0; color: #0f172a;">üìã ÈÖç‰ø°„É≠„Ç∞ („É™„Ç¢„É´„Çø„Ç§„É†)</h3>
                        <div style="display: flex; gap: 10px;">
                            <button id="realtimeAutoRefresh" class="btn btn-info" style="padding: 5px 10px; font-size: 0.8rem;">üîÑ Ëá™ÂãïÊõ¥Êñ∞ ON</button>
                            <button id="realtimeClearLog" class="btn btn-secondary" style="padding: 5px 10px; font-size: 0.8rem;">üóëÔ∏è „É≠„Ç∞„ÇØ„É™„Ç¢</button>
                        </div>
                    </div>
                    
                    <div id="realtimeLogArea" style="background: #1e293b; border-radius: 6px; padding: 15px; max-height: 300px; overflow-y: auto; font-family: 'SF Mono', 'Monaco', monospace; font-size: 0.85rem; line-height: 1.4;">
                        <div style="color: #64748b;">üìä „É™„Ç¢„É´„Çø„Ç§„É†„É≠„Ç∞„ÇíÁõ£Ë¶ñ‰∏≠...</div>
                        <div style="color: #10b981;">‚úÖ „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü</div>
                        <div style="color: #64748b;">[<span id="initTime"></span>] „É¢„Éã„Çø„É™„É≥„Ç∞ÈñãÂßã</div>
                    </div>
                </div>
                
                <!-- „Ç∑„Çπ„ÉÜ„É†ÂÅ•Â∫∑Áä∂ÊÖã -->
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
                    <!-- „É°„Éº„É´ÈÄÅ‰ø°„Çµ„Éº„Éì„ÇπÁä∂ÊÖã -->
                    <div style="background: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                        <h4 style="margin: 0 0 15px 0; color: #0c4a6e;">üìß „É°„Éº„É´ÈÄÅ‰ø°„Çµ„Éº„Éì„Çπ</h4>
                        <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                            <div id="emailServiceStatus" style="width: 12px; height: 12px; background: #10b981; border-radius: 50%; animation: pulse 2s infinite;"></div>
                            <span style="font-weight: 600;">Brevo API</span>
                            <span id="emailServiceText" style="color: #059669;">Ê≠£Â∏∏Á®ºÂÉç</span>
                        </div>
                        <div style="font-size: 0.9rem; color: #6b7280;">
                            ÂøúÁ≠îÊôÇÈñì: <span id="emailServiceLatency">--ms</span><br>
                            ÊúÄÁµÇ„ÉÅ„Çß„ÉÉ„ÇØ: <span id="emailServiceLastCheck">--:--</span>
                        </div>
                    </div>
                    
                    <!-- „Éá„Éº„Çø„Éô„Éº„ÇπÁä∂ÊÖã -->
                    <div style="background: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                        <h4 style="margin: 0 0 15px 0; color: #7c2d12;">üóÑÔ∏è „Éá„Éº„Çø„Éô„Éº„Çπ</h4>
                        <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                            <div id="databaseStatus" style="width: 12px; height: 12px; background: #10b981; border-radius: 50%; animation: pulse 2s infinite;"></div>
                            <span style="font-weight: 600;">Airtable</span>
                            <span id="databaseText" style="color: #059669;">Êé•Á∂öÊ≠£Â∏∏</span>
                        </div>
                        <div style="font-size: 0.9rem; color: #6b7280;">
                            „É¨„Ç≥„Éº„ÉâÊï∞: <span id="databaseRecords">--</span><br>
                            ÊúÄÁµÇÂêåÊúü: <span id="databaseLastSync">--:--</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ÈÖç‰ø°Â±•Ê≠¥ -->
            <div class="card">
                <h2 style="color: #374151; font-weight: 600;">üìã ÈÖç‰ø°Â±•Ê≠¥„Éª‰∫àÁ¥ÑÁä∂Ê≥Å</h2>
                
                <!-- üö® ÂïèÈ°åËß£Ê±∫ÈÄöÁü• -->
                <div style="background: linear-gradient(135deg, #dc2626, #ef4444); border-radius: 10px; padding: 15px; margin-bottom: 20px; color: white;">
                    <h3 style="margin: 0 0 10px 0; color: white;">üîç ÈÖç‰ø°Áä∂Ê≥ÅÁ¢∫Ë™ç„Ç∑„Çπ„ÉÜ„É†</h3>
                    <p style="margin: 0; font-size: 0.9rem; opacity: 0.9;">Brevo API„Åã„ÇâÂÆüÈöõ„ÅÆÈÖç‰ø°Â±•Ê≠¥„ÇíÂèñÂæó„Åó„Å¶„ÄÅ„Çπ„Ç±„Ç∏„É•„Éº„É´ÈÖç‰ø°„ÅÆÂïèÈ°å„ÇíÁâπÂÆö„Åó„Åæ„Åô</p>
                </div>
                
                <div style="display: flex; gap: 10px; margin-bottom: 20px; flex-wrap: wrap;">
                    <button id="checkRealDeliveryBtn" class="btn btn-primary">üîç ÂÆüÈöõ„ÅÆÈÖç‰ø°Áä∂Ê≥ÅÁ¢∫Ë™ç</button>
                    <button id="refreshHistoryBtn" class="btn btn-secondary">üîÑ Â±•Ê≠¥„ÇíÊõ¥Êñ∞</button>
                    <button id="clearHistoryBtn" class="btn btn-danger">üóëÔ∏è Â±•Ê≠¥„Çí„ÇØ„É™„Ç¢</button>
                    <button id="showFailedEmailsBtn" class="btn btn-info">‚ö†Ô∏è Â§±Êïó„É°„Éº„É´Á¢∫Ë™ç</button>
                    <button id="showReportBtn" class="btn btn-success">üìä ÈÖç‰ø°„É¨„Éù„Éº„Éà</button>
                </div>
                <div id="newHistoryArea" style="background: #f9fafb; border-radius: 10px; padding: 20px; border: 2px solid #d1d5db;">
                    <div class="new-no-history">
                        üìÑ Â±•Ê≠¥„ÇíË™≠„ÅøËæº„Åø‰∏≠...
                    </div>
                </div>
                
                <!-- Â§±Êïó„É°„Éº„É´ÂÜçÈÄÅ„Çª„ÇØ„Ç∑„Éß„É≥ -->
                <div id="failedEmailsSection" style="display: none; margin-top: 25px; background: #fef2f2; border-radius: 10px; padding: 20px; border: 2px solid #fecaca;">
                    <h3 style="color: #991b1b; margin-top: 0;">‚ö†Ô∏è ÈÄÅ‰ø°Â§±Êïó„É°„Éº„É´‰∏ÄË¶ß</h3>
                    <div id="failedEmailsList"></div>
                    <div style="margin-top: 15px; display: flex; gap: 10px;">
                        <button id="retryFailedBtn" class="btn btn-primary">üîÑ Â§±ÊïóÂàÜ„ÇíÂÜçÈÄÅ‰ø°</button>
                        <button id="clearFailedBtn" class="btn btn-secondary">üóëÔ∏è Â§±Êïó„É™„Çπ„Éà„Çí„ÇØ„É™„Ç¢</button>
                        <button id="hideFailedBtn" class="btn btn-secondary">‚ùå Èñâ„Åò„Çã</button>
                    </div>
                </div>
                
                <!-- ÈÖç‰ø°„É¨„Éù„Éº„Éà„Çª„ÇØ„Ç∑„Éß„É≥ -->
                <div id="reportSection" style="display: none; margin-top: 25px; background: #f0f9ff; border-radius: 10px; padding: 20px; border: 2px solid #0ea5e9;">
                    <h3 style="color: #0c4a6e; margin-top: 0;">üìä ÈÖç‰ø°„É¨„Éù„Éº„Éà</h3>
                    <div id="reportContent"></div>
                    <div style="margin-top: 15px; display: flex; gap: 10px;">
                        <button id="refreshReportBtn" class="btn btn-primary">üîÑ „É¨„Éù„Éº„ÉàÊõ¥Êñ∞</button>
                        <button id="hideReportBtn" class="btn btn-secondary">‚ùå Èñâ„Åò„Çã</button>
                    </div>
                </div>
            </div>

            <!-- „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥ -->
            <div class="card">
                <h2 style="color: #dc2626; font-weight: 600;">üîê ÈÖç‰ø°Âà∂Èôê„Éª„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö</h2>
                <div style="background: #fef2f2; border: 2px solid #fecaca; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <p style="margin: 0; color: #7f1d1d; font-weight: 600;">‚ö†Ô∏è „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ê©üËÉΩ„Å´„Çà„Çä„ÄÅ‰∏çÊ≠£Âà©Áî®„ÇÑË™§ÈÖç‰ø°„ÇíÈò≤Ê≠¢„Åó„Åæ„Åô</p>
                </div>
                
                <!-- „É¨„Éº„ÉàÂà∂ÈôêË®≠ÂÆö -->
                <div style="background: #f8fafc; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
                    <h3 style="color: #1e40af; margin-top: 0;">üìä ÈÄÅ‰ø°„É¨„Éº„ÉàÂà∂Èôê</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÊôÇÈñìÂà∂Èôê</label>
                            <select id="securityHourlyLimit" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                <option value="50">50ÈÄö/ÊôÇÈñì (Êé®Â•®)</option>
                                <option value="100">100ÈÄö/ÊôÇÈñì</option>
                                <option value="200">200ÈÄö/ÊôÇÈñì</option>
                                <option value="0">Âà∂Èôê„Å™„Åó ‚ö†Ô∏è</option>
                            </select>
                        </div>
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Êó•Ê¨°Âà∂Èôê</label>
                            <select id="securityDailyLimit" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                <option value="1000">1,000ÈÄö/Êó• (Êé®Â•®)</option>
                                <option value="2000">2,000ÈÄö/Êó•</option>
                                <option value="5000">5,000ÈÄö/Êó•</option>
                                <option value="0">Âà∂Èôê„Å™„Åó ‚ö†Ô∏è</option>
                            </select>
                        </div>
                    </div>
                    
                    <div id="rateLimitStatus" style="margin-top: 15px; padding: 10px; background: #ecfdf5; border-radius: 6px;">
                        <div style="color: #065f46; font-weight: 600;">‚úÖ ÁèæÂú®„ÅÆÈÄÅ‰ø°Áä∂Ê≥Å</div>
                        <div id="rateLimitInfo" style="color: #047857; font-size: 0.95rem; margin-top: 5px;">
                            Êú¨Êó•„ÅÆÈÄÅ‰ø°Êï∞: <span id="todaySentCount">0</span>ÈÄö | 1ÊôÇÈñì‰ª•ÂÜÖ„ÅÆÈÄÅ‰ø°Êï∞: <span id="hourSentCount">0</span>ÈÄö
                        </div>
                    </div>
                </div>
                
                <!-- ÁÆ°ÁêÜËÄÖË™çË®º -->
                <div style="background: #f1f5f9; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
                    <h3 style="color: #7c2d12; margin-top: 0;">üîë ÁÆ°ÁêÜËÄÖË™çË®º</h3>
                    <div style="display: grid; grid-template-columns: 1fr auto; gap: 10px; align-items: end;">
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÁÆ°ÁêÜËÄÖ„Éë„Çπ„ÉØ„Éº„Éâ</label>
                            <input type="password" id="adminPassword" placeholder="ÈÖç‰ø°ÂÆüË°åÊôÇ„Å´ÂøÖË¶Å" 
                                   style="width: 100%; padding: 12px; border: 2px solid #d1d5db; border-radius: 6px; font-size: 16px;">
                            <small style="color: #6b7280;">Â§ßÈáèÈÖç‰ø°(500ÈÄö‰ª•‰∏ä)ÂÆüË°åÊôÇ„ÅÆ„ÅøË™çË®º„ÅåÂøÖË¶Å„Åß„Åô</small>
                            <div style="margin-top: 5px; padding: 8px; background: #f0f9ff; border: 1px solid #bae6fd; border-radius: 4px; font-size: 0.85rem; color: #0369a1;">
                                üí° „Éí„É≥„Éà: ÁÆ°ÁêÜËÄÖ„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ„Äå<code style="background: rgba(59, 130, 246, 0.1); padding: 2px 4px; border-radius: 3px;">nankan123</code>„Äç„Åß„Åô
                            </div>
                        </div>
                        <button id="verifyAdminBtn" class="btn btn-secondary">üîç Ë™çË®ºÁ¢∫Ë™ç</button>
                    </div>
                    
                    <div id="adminAuthStatus" style="margin-top: 10px; padding: 8px; border-radius: 6px; display: none;">
                        <span id="adminAuthMessage"></span>
                    </div>
                </div>
                
                <!-- IPÂà∂Èôê„Å®„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ° -->
                <div style="background: #fefce8; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
                    <h3 style="color: #a16207; margin-top: 0;">üåê „Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°</h3>
                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 8px; font-weight: 600;">
                            <input type="checkbox" id="enableIpRestriction" style="margin-right: 8px;">
                            IPÂà∂Èôê„ÇíÊúâÂäπ„Å´„Åô„Çã
                        </label>
                        <textarea id="allowedIps" placeholder="Ë®±ÂèØ„Åô„ÇãIP„Ç¢„Éâ„É¨„Çπ„ÇíÊîπË°åÂå∫Âàá„Çä„ÅßÂÖ•Âäõ&#10;‰æã:&#10;192.168.1.100&#10;10.0.0.1" 
                                  style="width: 100%; height: 80px; padding: 10px; border: 2px solid #d1d5db; border-radius: 6px; font-family: monospace; font-size: 14px;" disabled></textarea>
                        <small style="color: #6b7280;">ÁèæÂú®„ÅÆIP: <span id="currentIp">ÂèñÂæó‰∏≠...</span></small>
                    </div>
                    
                    <div style="margin-top: 15px;">
                        <label style="display: block; margin-bottom: 8px; font-weight: 600;">
                            <input type="checkbox" id="enableTimeRestriction" style="margin-right: 8px;">
                            ÊôÇÈñìÂà∂Èôê„ÇíÊúâÂäπ„Å´„Åô„Çã
                        </label>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                            <div>
                                <label style="display: block; margin-bottom: 5px;">ÈñãÂßãÊôÇÈñì</label>
                                <input type="time" id="allowedStartTime" value="09:00" 
                                       style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;" disabled>
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px;">ÁµÇ‰∫ÜÊôÇÈñì</label>
                                <input type="time" id="allowedEndTime" value="18:00" 
                                       style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;" disabled>
                            </div>
                        </div>
                        <small style="color: #6b7280;">ÊåáÂÆö„Åó„ÅüÊôÇÈñìÂ§ñ„ÅØÈÖç‰ø°„ÇíÂà∂Èôê„Åó„Åæ„Åô</small>
                    </div>
                </div>
                
                <!-- „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞ -->
                <div style="background: #f0f9ff; border-radius: 8px; padding: 20px;">
                    <h3 style="color: #0c4a6e; margin-top: 0;">üìã „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞</h3>
                    <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                        <button id="showSecurityLogBtn" class="btn btn-info">üìä „É≠„Ç∞Ë°®Á§∫</button>
                        <button id="clearSecurityLogBtn" class="btn btn-warning">üóëÔ∏è „É≠„Ç∞„ÇØ„É™„Ç¢</button>
                        <button id="exportSecurityLogBtn" class="btn btn-secondary">üíæ „É≠„Ç∞Âá∫Âäõ</button>
                    </div>
                    
                    <div id="securityLogArea" style="background: white; border-radius: 6px; padding: 15px; max-height: 200px; overflow-y: auto; border: 2px solid #bae6fd;">
                        <div style="color: #6b7280; text-align: center;">üìÑ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô</div>
                    </div>
                </div>
            </div>

            <!-- ÈÖç‰ø°ÂÅúÊ≠¢ÁÆ°ÁêÜ„Çª„ÇØ„Ç∑„Éß„É≥ -->
            <div class="card">
                <h2 style="color: #059669; font-weight: 600;">üìß ÈÖç‰ø°ÂÅúÊ≠¢ÔºàUnsubscribeÔºâÁÆ°ÁêÜ</h2>
                <div style="background: #ecfdf5; border: 2px solid #a7f3d0; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <p style="margin: 0; color: #047857; font-weight: 600;">‚úÖ „É¶„Éº„Ç∂„Éº„ÅÆÈÖç‰ø°ÂÅúÊ≠¢„É™„ÇØ„Ç®„Çπ„Éà„ÇíÁÆ°ÁêÜ„Åó„ÄÅÊ≥ïÁöÑË¶Å‰ª∂„Å´Ê∫ñÊã†„Åó„Åæ„Åô</p>
                </div>
                
                <!-- ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„Éà -->
                <div style="background: #f1f5f9; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
                    <h3 style="color: #0f172a; margin-top: 0;">üìã ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„Éà</h3>
                    <div style="display: flex; gap: 10px; margin-bottom: 15px; flex-wrap: wrap;">
                        <button id="showUnsubscribedBtn" class="btn btn-info">üëÄ ÈÖç‰ø°ÂÅúÊ≠¢„É¶„Éº„Ç∂„ÉºË°®Á§∫</button>
                        <button id="addUnsubscribeBtn" class="btn btn-warning">‚ûï ÊâãÂãï„ÅßÈÖç‰ø°ÂÅúÊ≠¢ËøΩÂä†</button>
                        <button id="exportUnsubscribeBtn" class="btn btn-secondary">üíæ „É™„Çπ„ÉàÂá∫Âäõ</button>
                        <button id="clearUnsubscribeBtn" class="btn btn-danger">üóëÔ∏è „É™„Çπ„Éà„ÇØ„É™„Ç¢</button>
                    </div>
                    
                    <div id="unsubscribeListArea" style="background: white; border-radius: 6px; padding: 15px; max-height: 300px; overflow-y: auto; border: 2px solid #cbd5e0;">
                        <div style="color: #6b7280; text-align: center;">üìÑ ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„Éà„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô</div>
                    </div>
                    
                    <div style="margin-top: 15px; padding: 10px; background: #fef3c7; border-radius: 6px; border-left: 4px solid #f59e0b;">
                        <div style="color: #92400e; font-weight: 600;">üìä Áµ±Ë®àÊÉÖÂ†±</div>
                        <div id="unsubscribeStats" style="color: #78350f; font-size: 0.95rem; margin-top: 5px;">
                            ÈÖç‰ø°ÂÅúÊ≠¢„É¶„Éº„Ç∂„ÉºÊï∞: <span id="totalUnsubscribed">0</span>‰∫∫ | ‰ªäÊúà„ÅÆÈÖç‰ø°ÂÅúÊ≠¢: <span id="monthlyUnsubscribed">0</span>‰∫∫
                        </div>
                    </div>
                </div>
                
                <!-- Unsubscribe„É™„É≥„ÇØË®≠ÂÆö -->
                <div style="background: #fefce8; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
                    <h3 style="color: #a16207; margin-top: 0;">üîó Unsubscribe„É™„É≥„ÇØË®≠ÂÆö</h3>
                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 8px; font-weight: 600;">
                            <input type="checkbox" id="autoUnsubscribeLink" style="margin-right: 8px;" checked>
                            „É°„Éº„É´Êú´Â∞æ„Å´Ëá™Âãï„ÅßUnsubscribe„É™„É≥„ÇØ„ÇíËøΩÂä†
                        </label>
                        <small style="color: #6b7280; display: block;">Ê≥ïÁöÑË¶Å‰ª∂„Å´Ê∫ñÊã†„Åô„Çã„Åü„ÇÅ„ÄÅÊé®Â•®Ë®≠ÂÆö„Åß„Åô</small>
                    </div>
                    
                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">Unsubscribe„É™„É≥„ÇØ„ÉÜ„Ç≠„Çπ„Éà</label>
                        <input type="text" id="unsubscribeLinkText" value="ÈÖç‰ø°ÂÅúÊ≠¢„ÅØ„Åì„Å°„Çâ" 
                               style="width: 100%; padding: 10px; border: 2px solid #d1d5db; border-radius: 6px; font-size: 14px;">
                    </div>
                    
                    <div style="background: white; padding: 15px; border-radius: 6px; border: 1px solid #d1d5db;">
                        <div style="color: #374151; font-weight: 600; margin-bottom: 8px;">„Éó„É¨„Éì„É•„Éº:</div>
                        <div id="unsubscribePreview" style="color: #6b7280; font-size: 0.9rem; border: 1px solid #e5e7eb; padding: 10px; border-radius: 4px; font-family: Arial, sans-serif;">
                            <div style="text-align: center; margin-top: 20px; padding: 10px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280;">
                                <a href="#" style="color: #3b82f6; text-decoration: underline;">ÈÖç‰ø°ÂÅúÊ≠¢„ÅØ„Åì„Å°„Çâ</a><br>
                                NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ | „Äí100-0001 Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- ÂÜçË≥ºË™≠ÁÆ°ÁêÜ -->
                <div style="background: #f0f9ff; border-radius: 8px; padding: 20px;">
                    <h3 style="color: #0c4a6e; margin-top: 0;">üîÑ ÂÜçË≥ºË™≠ÁÆ°ÁêÜ</h3>
                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">„É¶„Éº„Ç∂„Éº„ÅÆÂÜçË≥ºË™≠„ÇíË®±ÂèØ</label>
                        <input type="email" id="resubscribeEmail" placeholder="ÂÜçË≥ºË™≠„ÇíË®±ÂèØ„Åô„Çã„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ" 
                               style="width: 70%; padding: 10px; border: 2px solid #d1d5db; border-radius: 6px; font-size: 14px; margin-right: 10px;">
                        <button id="resubscribeBtn" class="btn btn-success">‚úÖ ÂÜçË≥ºË™≠Ë®±ÂèØ</button>
                    </div>
                    
                    <div style="margin-top: 15px;">
                        <label style="display: block; margin-bottom: 8px; font-weight: 600;">
                            <input type="checkbox" id="allowSelfResubscribe" style="margin-right: 8px;">
                            „É¶„Éº„Ç∂„ÉºËá™Ë∫´„Å´„Çà„ÇãÂÜçË≥ºË™≠„ÇíË®±ÂèØ
                        </label>
                        <small style="color: #6b7280;">„ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã„Å®„ÄÅÈÖç‰ø°ÂÅúÊ≠¢„É¶„Éº„Ç∂„Éº„ÅåËá™ÂàÜ„ÅßÂÜçË≥ºË™≠„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åô</small>
                    </div>
                </div>
            </div>

            <!-- A/B„ÉÜ„Çπ„ÉàÊ©üËÉΩ -->
            <div class="card">
                <h2 style="color: #7c3aed; font-weight: 600;">üß™ A/B„ÉÜ„Çπ„ÉàÊ©üËÉΩ</h2>
                <div style="background: linear-gradient(135deg, #7c3aed 0%, #a855f7 100%); border-radius: 10px; padding: 20px; margin-bottom: 20px; color: white;">
                    <div style="text-align: center;">
                        <h3 style="margin: 0 0 10px 0; color: white;">üí° A/B„ÉÜ„Çπ„Éà„ÅßÈÖç‰ø°ÂäπÊûú„ÇíÊúÄÂ§ßÂåñ</h3>
                        <p style="margin: 0; opacity: 0.9; font-size: 0.95rem;">Áï∞„Å™„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂêåÊôÇÈÖç‰ø°„Åó„Å¶„ÄÅÊúÄ„ÇÇÂäπÊûúÁöÑ„Å™„É°„Éº„É´„ÇíÁô∫Ë¶ã„Åó„Åæ„Åó„Çá„ÅÜ</p>
                    </div>
                </div>
                
                <!-- A/B„ÉÜ„Çπ„ÉàË®≠ÂÆö -->
                <div style="background: #f8fafc; border-radius: 10px; padding: 20px; margin-bottom: 20px; border: 2px solid #cbd5e0;">
                    <h3 style="margin: 0 0 15px 0; color: #7c3aed; font-weight: 600;">‚öôÔ∏è „ÉÜ„Çπ„ÉàË®≠ÂÆö</h3>
                    
                    <!-- „ÉÜ„Çπ„ÉàÊúâÂäπÂåñ -->
                    <div style="margin-bottom: 20px;">
                        <label style="display: flex; align-items: center; gap: 10px; font-weight: 600; cursor: pointer;">
                            <input type="checkbox" id="enableAbTest" style="transform: scale(1.2);">
                            <span style="color: #7c3aed;">üß™ A/B„ÉÜ„Çπ„Éà„ÇíÊúâÂäπ„Å´„Åô„Çã</span>
                        </label>
                        <small style="color: #6b7280; margin-left: 32px; display: block; margin-top: 5px;">
                            ÈÖç‰ø°ÂØæË±°„ÅÆ‰∏ÄÈÉ®„Å´Áï∞„Å™„Çã„Éê„Éº„Ç∏„Éß„É≥„ÅÆ„É°„Éº„É´„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô
                        </small>
                    </div>
                    
                    <!-- „ÉÜ„Çπ„ÉàË®≠ÂÆöË©≥Á¥∞ -->
                    <div id="abTestSettings" style="display: none;">
                        <!-- ÈÖç‰ø°ÊØîÁéáË®≠ÂÆö -->
                        <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                            <h4 style="margin: 0 0 15px 0; color: #374151;">üìä ÈÖç‰ø°ÊØîÁéáË®≠ÂÆö</h4>
                            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">„Éê„Éº„Ç∏„Éß„É≥AÈÖç‰ø°ÊØîÁéá</label>
                                    <select id="versionARatio" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                        <option value="50">50% (Êé®Â•®)</option>
                                        <option value="40">40%</option>
                                        <option value="30">30%</option>
                                        <option value="70">70%</option>
                                    </select>
                                </div>
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">„Éê„Éº„Ç∏„Éß„É≥BÈÖç‰ø°ÊØîÁéá</label>
                                    <input type="text" id="versionBRatio" value="50%" readonly style="width: 100%; padding: 8px; border: 2px solid #e5e7eb; border-radius: 6px; background: #f9fafb; color: #6b7280;">
                                </div>
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÊúÄÂ∞è„Çµ„É≥„Éó„É´„Çµ„Ç§„Ç∫</label>
                                    <input type="number" id="minSampleSize" value="100" min="50" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <small style="color: #6b7280;">Áµ±Ë®àÁöÑÊúâÊÑèÊÄß„ÅÆ„Åü„ÇÅ„ÅÆÊúÄÂ∞èÈÖç‰ø°Êï∞</small>
                                </div>
                            </div>
                        </div>
                        
                        <!-- „ÉÜ„Çπ„ÉàÈ†ÖÁõÆË®≠ÂÆö -->
                        <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                            <h4 style="margin: 0 0 15px 0; color: #374151;">üéØ „ÉÜ„Çπ„ÉàÈ†ÖÁõÆ</h4>
                            <div style="display: flex; gap: 15px; flex-wrap: wrap; margin-bottom: 15px;">
                                <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="radio" name="testType" value="subject" checked>
                                    <span>üìß ‰ª∂Âêç„ÉÜ„Çπ„Éà</span>
                                </label>
                                <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="radio" name="testType" value="content">
                                    <span>üìù Êú¨Êñá„ÉÜ„Çπ„Éà</span>
                                </label>
                                <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="radio" name="testType" value="cta">
                                    <span>üéØ CTA„Éú„Çø„É≥„ÉÜ„Çπ„Éà</span>
                                </label>
                                <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="radio" name="testType" value="timing">
                                    <span>‚è∞ ÈÖç‰ø°ÊôÇÈñì„ÉÜ„Çπ„Éà</span>
                                </label>
                            </div>
                        </div>
                        
                        <!-- „Éê„Éº„Ç∏„Éß„É≥AË®≠ÂÆö -->
                        <div style="background: #fef3c7; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 2px solid #fbbf24;">
                            <h4 style="margin: 0 0 15px 0; color: #92400e;">üÖ∞Ô∏è „Éê„Éº„Ç∏„Éß„É≥A („Ç≥„É≥„Éà„É≠„Éº„É´)</h4>
                            
                            <!-- ‰ª∂Âêç„ÉÜ„Çπ„ÉàÁî® -->
                            <div id="subjectTestA" class="test-variation">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">‰ª∂ÂêçA</label>
                                <input type="text" id="subjectVersionA" placeholder="„ÉÜ„Çπ„ÉàÁî®‰ª∂Âêç„ÇíÂÖ•Âäõ" style="width: 100%; padding: 10px; border: 2px solid #d97706; border-radius: 6px;">
                            </div>
                            
                            <!-- Êú¨Êñá„ÉÜ„Çπ„ÉàÁî® -->
                            <div id="contentTestA" class="test-variation" style="display: none;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">Êú¨ÊñáA</label>
                                <textarea id="contentVersionA" rows="4" placeholder="„ÉÜ„Çπ„ÉàÁî®Êú¨Êñá„ÇíÂÖ•Âäõ" style="width: 100%; padding: 10px; border: 2px solid #d97706; border-radius: 6px; resize: vertical;"></textarea>
                            </div>
                            
                            <!-- CTA„ÉÜ„Çπ„ÉàÁî® -->
                            <div id="ctaTestA" class="test-variation" style="display: none;">
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                    <div>
                                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">CTA„ÉÜ„Ç≠„Çπ„ÉàA</label>
                                        <input type="text" id="ctaTextVersionA" placeholder="üèá ‰ªä„Åô„ÅêÂèÇÂä†" style="width: 100%; padding: 8px; border: 2px solid #d97706; border-radius: 6px;">
                                    </div>
                                    <div>
                                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">CTAËâ≤A</label>
                                        <select id="ctaColorVersionA" style="width: 100%; padding: 8px; border: 2px solid #d97706; border-radius: 6px;">
                                            <option value="#3b82f6">„Éñ„É´„Éº („Éá„Éï„Ç©„É´„Éà)</option>
                                            <option value="#10b981">„Ç∞„É™„Éº„É≥</option>
                                            <option value="#f59e0b">„Ç™„É¨„É≥„Ç∏</option>
                                            <option value="#ef4444">„É¨„ÉÉ„Éâ</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- ÈÖç‰ø°ÊôÇÈñì„ÉÜ„Çπ„ÉàÁî® -->
                            <div id="timingTestA" class="test-variation" style="display: none;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÈÖç‰ø°ÊôÇÈñìA</label>
                                <input type="datetime-local" id="timingVersionA" style="width: 100%; padding: 8px; border: 2px solid #d97706; border-radius: 6px;">
                            </div>
                        </div>
                        
                        <!-- „Éê„Éº„Ç∏„Éß„É≥BË®≠ÂÆö -->
                        <div style="background: #ecfdf5; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 2px solid #10b981;">
                            <h4 style="margin: 0 0 15px 0; color: #047857;">üÖ±Ô∏è „Éê„Éº„Ç∏„Éß„É≥B („ÉÜ„Çπ„Éà)</h4>
                            
                            <!-- ‰ª∂Âêç„ÉÜ„Çπ„ÉàÁî® -->
                            <div id="subjectTestB" class="test-variation">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">‰ª∂ÂêçB</label>
                                <input type="text" id="subjectVersionB" placeholder="„ÉÜ„Çπ„ÉàÁî®‰ª∂Âêç„ÇíÂÖ•ÂäõÔºàÁï∞„Å™„ÇãÂÜÖÂÆπ„ÅßÔºâ" style="width: 100%; padding: 10px; border: 2px solid #059669; border-radius: 6px;">
                            </div>
                            
                            <!-- Êú¨Êñá„ÉÜ„Çπ„ÉàÁî® -->
                            <div id="contentTestB" class="test-variation" style="display: none;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">Êú¨ÊñáB</label>
                                <textarea id="contentVersionB" rows="4" placeholder="„ÉÜ„Çπ„ÉàÁî®Êú¨Êñá„ÇíÂÖ•ÂäõÔºàÁï∞„Å™„ÇãÂÜÖÂÆπ„ÅßÔºâ" style="width: 100%; padding: 10px; border: 2px solid #059669; border-radius: 6px; resize: vertical;"></textarea>
                            </div>
                            
                            <!-- CTA„ÉÜ„Çπ„ÉàÁî® -->
                            <div id="ctaTestB" class="test-variation" style="display: none;">
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                    <div>
                                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">CTA„ÉÜ„Ç≠„Çπ„ÉàB</label>
                                        <input type="text" id="ctaTextVersionB" placeholder="üéØ ‰ªä„Åô„ÅêÂßã„ÇÅ„Çã" style="width: 100%; padding: 8px; border: 2px solid #059669; border-radius: 6px;">
                                    </div>
                                    <div>
                                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">CTAËâ≤B</label>
                                        <select id="ctaColorVersionB" style="width: 100%; padding: 8px; border: 2px solid #059669; border-radius: 6px;">
                                            <option value="#10b981">„Ç∞„É™„Éº„É≥</option>
                                            <option value="#3b82f6">„Éñ„É´„Éº</option>
                                            <option value="#f59e0b">„Ç™„É¨„É≥„Ç∏</option>
                                            <option value="#ef4444">„É¨„ÉÉ„Éâ</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- ÈÖç‰ø°ÊôÇÈñì„ÉÜ„Çπ„ÉàÁî® -->
                            <div id="timingTestB" class="test-variation" style="display: none;">
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÈÖç‰ø°ÊôÇÈñìB</label>
                                <input type="datetime-local" id="timingVersionB" style="width: 100%; padding: 8px; border: 2px solid #059669; border-radius: 6px;">
                            </div>
                        </div>
                        
                        <!-- Áµ±Ë®àÁöÑÊúâÊÑèÊÄßË®≠ÂÆö -->
                        <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                            <h4 style="margin: 0 0 15px 0; color: #374151;">üìà Áµ±Ë®àË®≠ÂÆö</h4>
                            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÊúâÊÑèÊ∞¥Ê∫ñ</label>
                                    <select id="significanceLevel" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                        <option value="0.05">5% (Êé®Â•®)</option>
                                        <option value="0.01">1% (Âé≥Ê†º)</option>
                                        <option value="0.10">10% (Á∑©„ÅÑ)</option>
                                    </select>
                                </div>
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">Ê§úÂá∫Âäõ</label>
                                    <select id="statisticalPower" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                        <option value="0.80">80% (Êé®Â•®)</option>
                                        <option value="0.90">90% (È´òÁ≤æÂ∫¶)</option>
                                        <option value="0.70">70% (‰ΩéÁ≤æÂ∫¶)</option>
                                    </select>
                                </div>
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">„ÉÜ„Çπ„ÉàÊúüÈñì</label>
                                    <select id="testDuration" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                        <option value="24">24ÊôÇÈñì</option>
                                        <option value="48">48ÊôÇÈñì (Êé®Â•®)</option>
                                        <option value="72">72ÊôÇÈñì</option>
                                        <option value="168">1ÈÄ±Èñì</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- ÊàêÂäüÊåáÊ®ôË®≠ÂÆö -->
                        <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                            <h4 style="margin: 0 0 15px 0; color: #374151;">üéØ ÊàêÂäüÊåáÊ®ô (KPI)</h4>
                            <div style="display: flex; gap: 15px; flex-wrap: wrap;">
                                <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="checkbox" id="kpiOpenRate" checked>
                                    <span>üìß ÈñãÂ∞ÅÁéá</span>
                                </label>
                                <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="checkbox" id="kpiClickRate" checked>
                                    <span>üîó „ÇØ„É™„ÉÉ„ÇØÁéá</span>
                                </label>
                                <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="checkbox" id="kpiConversion">
                                    <span>üí∞ „Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥Áéá</span>
                                </label>
                                <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="checkbox" id="kpiUnsubscribe">
                                    <span>‚ùå ÈÖç‰ø°ÂÅúÊ≠¢Áéá</span>
                                </label>
                            </div>
                        </div>
                        
                        <!-- ÈÖç‰ø°‰∫àÂëä -->
                        <div id="abTestPreview" style="background: #f0f9ff; border-radius: 8px; padding: 15px; border-left: 4px solid #3b82f6;">
                            <h4 style="margin: 0 0 10px 0; color: #1e40af;">üìä „ÉÜ„Çπ„ÉàÈÖç‰ø°„Éó„É¨„Éì„É•„Éº</h4>
                            <div id="abTestSummary" style="font-size: 0.95rem; color: #1d4ed8;">
                                „ÉÜ„Çπ„ÉàË®≠ÂÆö„ÇíÊúâÂäπ„Å´„Åó„Å¶Ë©≥Á¥∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- A/B„ÉÜ„Çπ„ÉàÁµêÊûúË°®Á§∫ -->
                <div style="background: #f1f5f9; border-radius: 10px; padding: 20px; margin-bottom: 20px;">
                    <h3 style="margin: 0 0 15px 0; color: #0f172a; font-weight: 600;">üìä „ÉÜ„Çπ„ÉàÁµêÊûú„ÉªÂàÜÊûê</h3>
                    
                    <!-- „ÉÜ„Çπ„Éà‰∏ÄË¶ß -->
                    <div style="display: flex; gap: 10px; margin-bottom: 15px; flex-wrap: wrap;">
                        <button id="loadActiveTestsBtn" class="btn btn-info">üîÑ ÈÄ≤Ë°å‰∏≠„ÉÜ„Çπ„Éà„ÇíË°®Á§∫</button>
                        <button id="loadCompletedTestsBtn" class="btn btn-secondary">‚úÖ ÂÆå‰∫ÜÊ∏à„Åø„ÉÜ„Çπ„Éà„ÇíË°®Á§∫</button>
                        <button id="exportTestResultsBtn" class="btn btn-success">üíæ ÁµêÊûú„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà</button>
                        <button id="clearTestHistoryBtn" class="btn btn-danger">üóëÔ∏è Â±•Ê≠¥ÂâäÈô§</button>
                    </div>
                    
                    <!-- „ÉÜ„Çπ„ÉàÁµêÊûú„Ç®„É™„Ç¢ -->
                    <div id="abTestResultsArea" style="background: white; border-radius: 8px; padding: 15px; min-height: 200px; border: 1px solid #e5e7eb;">
                        <div style="text-align: center; color: #6b7280; padding: 40px;">
                            <div style="font-size: 2rem; margin-bottom: 10px;">üìä</div>
                            <p style="margin: 0;">A/B„ÉÜ„Çπ„ÉàÁµêÊûú„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô</p>
                            <small>‰∏ä„ÅÆ„ÄåÈÄ≤Ë°å‰∏≠„ÉÜ„Çπ„Éà„Äç„Åæ„Åü„ÅØ„ÄåÂÆå‰∫ÜÊ∏à„Åø„ÉÜ„Çπ„Éà„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ</small>
                        </div>
                    </div>
                </div>
                
                <!-- „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ -->
                <div style="display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
                    <button id="previewAbTestBtn" class="btn btn-info">üëÄ A/B„ÉÜ„Çπ„Éà „Éó„É¨„Éì„É•„Éº</button>
                    <button id="saveAbTestSettingsBtn" class="btn btn-secondary">üíæ „ÉÜ„Çπ„ÉàË®≠ÂÆö„Çí‰øùÂ≠ò</button>
                    <button id="loadAbTestSettingsBtn" class="btn btn-secondary">üìÇ Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø</button>
                    <button id="startAbTestBtn" class="btn btn-primary" disabled>üöÄ A/B„ÉÜ„Çπ„ÉàÈñãÂßã</button>
                </div>
            </div>

            <!-- „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Éï„Ç°„Ç§„É´Ê∑ª‰ªòÊ©üËÉΩ -->
            <div class="card">
                <h2 style="color: #059669; font-weight: 600;">üìé „Éï„Ç°„Ç§„É´Ê∑ª‰ªò„ÉªÁîªÂÉèÊåøÂÖ•</h2>
                <div style="background: linear-gradient(135deg, #059669 0%, #10b981 100%); border-radius: 10px; padding: 20px; margin-bottom: 20px; color: white;">
                    <div style="text-align: center;">
                        <h3 style="margin: 0 0 10px 0; color: white;">üì∏ „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„ÅßÁ∞°ÂçòÊ∑ª‰ªò</h3>
                        <p style="margin: 0; opacity: 0.9; font-size: 0.95rem;">ÁîªÂÉè„ÄÅPDF„ÄÅZIP „Éï„Ç°„Ç§„É´„Çí„É°„Éº„É´„Å´Ê∑ª‰ªò„Åó„Å¶„ÄÅÈ≠ÖÂäõÁöÑ„Å™„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÈÖç‰ø°</p>
                    </div>
                </div>
                
                <!-- „Éï„Ç°„Ç§„É´Ê∑ª‰ªò„Ç®„É™„Ç¢ -->
                <div style="background: #f8fafc; border-radius: 10px; padding: 20px; margin-bottom: 20px; border: 2px solid #cbd5e0;">
                    <h3 style="margin: 0 0 15px 0; color: #059669; font-weight: 600;">üìÅ „Éï„Ç°„Ç§„É´ÁÆ°ÁêÜ</h3>
                    
                    <!-- „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Çæ„Éº„É≥ -->
                    <div id="dropZone" style="
                        border: 3px dashed #d1d5db; 
                        border-radius: 12px; 
                        padding: 40px 20px; 
                        text-align: center; 
                        background: #f9fafb;
                        transition: all 0.3s ease;
                        cursor: pointer;
                        margin-bottom: 20px;
                    ">
                        <div style="font-size: 3rem; margin-bottom: 15px; color: #9ca3af;">üìÅ</div>
                        <h4 style="margin: 0 0 10px 0; color: #374151;">„Éï„Ç°„Ç§„É´„Çí„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó</h4>
                        <p style="margin: 0 0 15px 0; color: #6b7280;">„Åæ„Åü„ÅØ„ÄÅ„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû</p>
                        <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap; margin-bottom: 15px;">
                            <span style="background: #dbeafe; color: #1e40af; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">üì∏ JPG, PNG, GIF</span>
                            <span style="background: #fef3c7; color: #92400e; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">üìÑ PDF</span>
                            <span style="background: #ecfdf5; color: #047857; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">üóúÔ∏è ZIP</span>
                            <span style="background: #f3e8ff; color: #7c2d12; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">üìä DOC, XLS</span>
                        </div>
                        <small style="color: #9ca3af;">ÊúÄÂ§ß„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: 10MB | ÊúÄÂ§ß5„Éï„Ç°„Ç§„É´</small>
                    </div>
                    
                    <!-- „Éï„Ç°„Ç§„É´ÈÅ∏Êäû„ÅÆÂæìÊù•ÂûãÂÖ•Âäõ -->
                    <input type="file" id="fileInput" multiple accept=".jpg,.jpeg,.png,.gif,.pdf,.zip,.doc,.docx,.xls,.xlsx" style="display: none;">
                    
                    <!-- Ê∑ª‰ªò„Éï„Ç°„Ç§„É´„É™„Çπ„Éà -->
                    <div id="attachedFilesList" style="display: none;">
                        <h4 style="margin: 0 0 15px 0; color: #374151;">üìé Ê∑ª‰ªò„Éï„Ç°„Ç§„É´‰∏ÄË¶ß</h4>
                        <div id="fileListContainer" style="background: white; border-radius: 8px; padding: 15px; border: 1px solid #e5e7eb;">
                            <!-- „Éï„Ç°„Ç§„É´„É™„Çπ„Éà„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Çã -->
                        </div>
                        
                        <!-- „Éï„Ç°„Ç§„É´Êìç‰Ωú„Éú„Çø„É≥ -->
                        <div style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap;">
                            <button id="clearAllFilesBtn" class="btn btn-danger">üóëÔ∏è ÂÖ®„Å¶ÂâäÈô§</button>
                            <button id="compressFilesBtn" class="btn btn-info">üóúÔ∏è „Éï„Ç°„Ç§„É´ÂúßÁ∏Æ</button>
                            <button id="optimizeImagesBtn" class="btn btn-secondary">üéØ ÁîªÂÉèÊúÄÈÅ©Âåñ</button>
                            <button id="previewAttachmentsBtn" class="btn btn-success">üëÄ Ê∑ª‰ªò„Éó„É¨„Éì„É•„Éº</button>
                        </div>
                    </div>
                </div>
                
                <!-- ÁîªÂÉèÊåøÂÖ•„ÉªÁ∑®ÈõÜ -->
                <div style="background: #f1f5f9; border-radius: 10px; padding: 20px; margin-bottom: 20px;">
                    <h3 style="margin: 0 0 15px 0; color: #0f172a; font-weight: 600;">üé® ÁîªÂÉèÊåøÂÖ•„ÉªÁ∑®ÈõÜ</h3>
                    
                    <!-- ÁîªÂÉèÊåøÂÖ•„Ç™„Éó„Ç∑„Éß„É≥ -->
                    <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                        <h4 style="margin: 0 0 15px 0; color: #374151;">üì∏ ÁîªÂÉèÊåøÂÖ•Ë®≠ÂÆö</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÊåøÂÖ•‰ΩçÁΩÆ</label>
                                <select id="imageInsertPosition" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <option value="inline">Êú¨ÊñáÂÜÖÔºà„Ç§„É≥„É©„Ç§„É≥Ôºâ</option>
                                    <option value="header">„Éò„ÉÉ„ÉÄ„ÉºÁîªÂÉè</option>
                                    <option value="footer">„Éï„ÉÉ„Çø„ÉºÁîªÂÉè</option>
                                    <option value="banner">„Éê„Éä„ÉºÁîªÂÉè</option>
                                </select>
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÁîªÂÉè„Çµ„Ç§„Ç∫</label>
                                <select id="imageSize" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <option value="small">Â∞è (200px)</option>
                                    <option value="medium">‰∏≠ (400px)</option>
                                    <option value="large">Â§ß (600px)</option>
                                    <option value="full">ÊúÄÂ§ß (100%)</option>
                                    <option value="custom">„Ç´„Çπ„Çø„É†</option>
                                </select>
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÈÖçÁΩÆ</label>
                                <select id="imageAlignment" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <option value="left">Â∑¶ÂØÑ„Åõ</option>
                                    <option value="center">‰∏≠Â§ÆÊèÉ„Åà</option>
                                    <option value="right">Âè≥ÂØÑ„Åõ</option>
                                </select>
                            </div>
                        </div>
                        
                        <!-- „Ç´„Çπ„Çø„É†„Çµ„Ç§„Ç∫Ë®≠ÂÆö -->
                        <div id="customSizeSettings" style="display: none; margin-top: 15px; padding: 15px; background: #f8fafc; border-radius: 6px;">
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÂπÖ (px)</label>
                                    <input type="number" id="customImageWidth" placeholder="400" min="50" max="800" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                </div>
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">È´ò„Åï (px)</label>
                                    <input type="number" id="customImageHeight" placeholder="300" min="50" max="600" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <small style="color: #6b7280;">Á©∫ÁôΩ„ÅßËá™ÂãïË™øÊï¥</small>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- ÁîªÂÉèÂäπÊûúË®≠ÂÆö -->
                    <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                        <h4 style="margin: 0 0 15px 0; color: #374151;">‚ú® ÁîªÂÉèÂäπÊûú</h4>
                        <div style="display: flex; gap: 15px; flex-wrap: wrap; margin-bottom: 15px;">
                            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                <input type="checkbox" id="imageRoundedCorners">
                                <span>üîÑ Ëßí‰∏∏</span>
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                <input type="checkbox" id="imageShadow">
                                <span>üåë ÂΩ±‰ªò„Åç</span>
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                <input type="checkbox" id="imageBorder">
                                <span>üñºÔ∏è Êû†Á∑ö</span>
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                <input type="checkbox" id="imageHoverEffect">
                                <span>‚ú® „Éõ„Éê„ÉºÂäπÊûú</span>
                            </label>
                        </div>
                        
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;">
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">alt „ÉÜ„Ç≠„Çπ„Éà</label>
                                <input type="text" id="imageAltText" placeholder="ÁîªÂÉè„ÅÆË™¨Êòé" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">„É™„É≥„ÇØÂÖàURL</label>
                                <input type="url" id="imageLinkUrl" placeholder="https://example.com" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                            </div>
                        </div>
                    </div>
                    
                    <!-- ÊåøÂÖ•„Åï„Çå„ÅüÁîªÂÉè„Éó„É¨„Éì„É•„Éº -->
                    <div id="insertedImagesPreview" style="display: none;">
                        <h4 style="margin: 0 0 15px 0; color: #374151;">üñºÔ∏è ÊåøÂÖ•Ê∏à„ÅøÁîªÂÉè</h4>
                        <div id="imagePreviewContainer" style="background: white; border-radius: 8px; padding: 15px; border: 1px solid #e5e7eb; display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                            <!-- ÊåøÂÖ•Ê∏à„ÅøÁîªÂÉè„ÅÆ„Éó„É¨„Éì„É•„Éº„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Çã -->
                        </div>
                    </div>
                </div>
                
                <!-- „Éï„Ç°„Ç§„É´Áµ±Ë®à„ÉªÂà∂ÈôêÊÉÖÂ†± -->
                <div style="background: white; border-radius: 10px; padding: 20px; border: 1px solid #e5e7eb;">
                    <h3 style="margin: 0 0 15px 0; color: #374151; font-weight: 600;">üìä „Éï„Ç°„Ç§„É´Áµ±Ë®à</h3>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 20px;">
                        <div style="text-align: center; padding: 15px; background: #f0f9ff; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold; color: #0ea5e9;" id="totalFileCount">0</div>
                            <div style="color: #0c4a6e; font-size: 0.9rem;">Ê∑ª‰ªò„Éï„Ç°„Ç§„É´Êï∞</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: #f0fdf4; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold; color: #10b981;" id="totalFileSize">0KB</div>
                            <div style="color: #047857; font-size: 0.9rem;">ÂêàË®à„Çµ„Ç§„Ç∫</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: #fef3c7; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold; color: #f59e0b;" id="imageFileCount">0</div>
                            <div style="color: #92400e; font-size: 0.9rem;">ÁîªÂÉè„Éï„Ç°„Ç§„É´</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: #fdf2f8; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold; color: #ec4899;" id="documentFileCount">0</div>
                            <div style="color: #be185d; font-size: 0.9rem;">ÊñáÊõ∏„Éï„Ç°„Ç§„É´</div>
                        </div>
                    </div>
                    
                    <!-- Âà∂Èôê‰∫ãÈ†Ö -->
                    <div style="background: #fef2f2; border-radius: 8px; padding: 15px; border-left: 4px solid #ef4444;">
                        <h4 style="margin: 0 0 10px 0; color: #dc2626;">‚ö†Ô∏è Ê∑ª‰ªò„Éï„Ç°„Ç§„É´Âà∂Èôê</h4>
                        <ul style="margin: 0; padding-left: 20px; color: #991b1b; font-size: 0.9rem; line-height: 1.6;">
                            <li>ÊúÄÂ§ß„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: 10MB/„Éï„Ç°„Ç§„É´</li>
                            <li>ÊúÄÂ§ßÊ∑ª‰ªò„Éï„Ç°„Ç§„É´Êï∞: 5„Éï„Ç°„Ç§„É´</li>
                            <li>ÂêàË®à„Çµ„Ç§„Ç∫Âà∂Èôê: 25MB</li>
                            <li>ÂØæÂøúÂΩ¢Âºè: JPG, PNG, GIF, PDF, ZIP, DOC, XLS</li>
                            <li>„É°„Éº„É´ÈÄÅ‰ø°ÊôÇ„ÅÆÂà∂Èôê„Å´„Çà„Çä„ÄÅ‰∏ÄÈÉ®„É°„Éº„É´„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅßË°®Á§∫„Åï„Çå„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô</li>
                        </ul>
                    </div>
                    
                    <!-- Âà©Áî®Áä∂Ê≥Å„Éê„Éº -->
                    <div style="margin-top: 20px;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                            <span style="font-weight: 600; color: #374151;">Âà©Áî®Áä∂Ê≥Å</span>
                            <span id="usagePercentage" style="font-weight: 600; color: #6b7280;">0%</span>
                        </div>
                        <div style="background: #e5e7eb; height: 8px; border-radius: 4px; overflow: hidden;">
                            <div id="usageBar" style="background: linear-gradient(90deg, #10b981, #3b82f6); height: 100%; width: 0%; transition: width 0.3s ease;"></div>
                        </div>
                        <div style="display: flex; justify-content: space-between; margin-top: 5px; font-size: 0.8rem; color: #6b7280;">
                            <span>0MB</span>
                            <span>25MB</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ÈÖç‰ø°„Ç≠„É•„Éº„Ç∑„Çπ„ÉÜ„É† -->
            <div class="card">
                <h2 style="color: #7c2d12; font-weight: 600;">‚ö° ÈÖç‰ø°„Ç≠„É•„Éº„Ç∑„Çπ„ÉÜ„É†</h2>
                <div style="background: linear-gradient(135deg, #7c2d12 0%, #dc2626 100%); border-radius: 10px; padding: 20px; margin-bottom: 20px; color: white;">
                    <div style="text-align: center;">
                        <h3 style="margin: 0 0 10px 0; color: white;">üöÄ È´òÈÄü„ÉªÁ¢∫ÂÆü„Å™ÈÖç‰ø°ÁÆ°ÁêÜ</h3>
                        <p style="margin: 0; opacity: 0.9; font-size: 0.95rem;">ÈÖç‰ø°È†ÜÂ∫è„ÇíÊúÄÈÅ©Âåñ„Åó„ÄÅÂ§ßÈáè„É°„Éº„É´ÈÄÅ‰ø°„ÇíÂäπÁéáÁöÑ„Å´Âá¶ÁêÜ„Åó„Åæ„Åô</p>
                    </div>
                </div>
                
                <!-- „Ç≠„É•„ÉºÁõ£Ë¶ñ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ -->
                <div style="background: #f8fafc; border-radius: 10px; padding: 20px; margin-bottom: 20px; border: 2px solid #cbd5e0;">
                    <h3 style="margin: 0 0 15px 0; color: #7c2d12; font-weight: 600;">üìä „Ç≠„É•„ÉºÁõ£Ë¶ñ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</h3>
                    
                    <!-- „É™„Ç¢„É´„Çø„Ç§„É†Áµ±Ë®à -->
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px; margin-bottom: 20px;">
                        <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #dc2626, #ef4444); color: white; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold;" id="queueTotalJobs">0</div>
                            <div style="opacity: 0.9; font-size: 0.9rem;">Á∑è„Ç≠„É•„ÉºÊï∞</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #f59e0b, #fbbf24); color: white; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold;" id="queuePendingJobs">0</div>
                            <div style="opacity: 0.9; font-size: 0.9rem;">ÂæÖÊ©ü‰∏≠</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #3b82f6, #60a5fa); color: white; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold;" id="queueProcessingJobs">0</div>
                            <div style="opacity: 0.9; font-size: 0.9rem;">Âá¶ÁêÜ‰∏≠</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #10b981, #34d399); color: white; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold;" id="queueCompletedJobs">0</div>
                            <div style="opacity: 0.9; font-size: 0.9rem;">ÂÆå‰∫Ü</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #9333ea, #a855f7); color: white; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold;" id="queueFailedJobs">0</div>
                            <div style="opacity: 0.9; font-size: 0.9rem;">Â§±Êïó</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #059669, #10b981); color: white; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold;" id="queueThroughput">0</div>
                            <div style="opacity: 0.9; font-size: 0.9rem;">Âá¶ÁêÜÈÄüÂ∫¶/ÂàÜ</div>
                        </div>
                    </div>
                    
                    <!-- „Ç≠„É•„Éº„Ç≥„É≥„Éà„É≠„Éº„É´ -->
                    <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                        <h4 style="margin: 0 0 15px 0; color: #374151;">üéõÔ∏è „Ç≠„É•„Éº„Ç≥„É≥„Éà„É≠„Éº„É´</h4>
                        <div style="display: flex; gap: 10px; flex-wrap: wrap; align-items: center;">
                            <button id="startQueueBtn" class="btn btn-success">‚ñ∂Ô∏è „Ç≠„É•„ÉºÈñãÂßã</button>
                            <button id="pauseQueueBtn" class="btn btn-warning">‚è∏Ô∏è ‰∏ÄÊôÇÂÅúÊ≠¢</button>
                            <button id="stopQueueBtn" class="btn btn-danger">‚èπÔ∏è ÂÅúÊ≠¢</button>
                            <button id="clearQueueBtn" class="btn btn-secondary">üóëÔ∏è „Ç≠„É•„Éº„ÇØ„É™„Ç¢</button>
                            <div style="margin-left: 20px; display: flex; align-items: center; gap: 10px;">
                                <label style="font-weight: 600;">Âá¶ÁêÜÈÄüÂ∫¶:</label>
                                <select id="queueProcessingSpeed" style="padding: 5px 10px; border: 2px solid #d1d5db; border-radius: 4px;">
                                    <option value="1">‰ΩéÈÄü (1‰ª∂/Áßí)</option>
                                    <option value="5" selected>Ê®ôÊ∫ñ (5‰ª∂/Áßí)</option>
                                    <option value="10">È´òÈÄü (10‰ª∂/Áßí)</option>
                                    <option value="20">ÊúÄÈ´òÈÄü (20‰ª∂/Áßí)</option>
                                </select>
                            </div>
                            <div style="margin-left: 20px;">
                                <span id="queueStatus" style="padding: 4px 12px; background: #e5e7eb; border-radius: 12px; font-size: 0.8rem; font-weight: 600;">‚èπÔ∏è ÂÅúÊ≠¢‰∏≠</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Âá¶ÁêÜÈÄ≤Ë°åÁä∂Ê≥Å -->
                    <div style="background: white; border-radius: 8px; padding: 15px; border: 1px solid #e5e7eb;">
                        <h4 style="margin: 0 0 15px 0; color: #374151;">üìà Âá¶ÁêÜÈÄ≤Ë°åÁä∂Ê≥Å</h4>
                        <div style="margin-bottom: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px;">
                                <span style="font-weight: 600; color: #374151;">ÂÖ®‰Ωì„ÅÆÈÄ≤Ë°åÁéá</span>
                                <span id="queueOverallProgress" style="font-weight: 600; color: #3b82f6;">0%</span>
                            </div>
                            <div style="background: #e5e7eb; height: 12px; border-radius: 6px; overflow: hidden;">
                                <div id="queueProgressBar" style="background: linear-gradient(90deg, #3b82f6, #10b981); height: 100%; width: 0%; transition: width 0.5s ease; border-radius: 6px;"></div>
                            </div>
                        </div>
                        
                        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; font-size: 0.9rem;">
                            <div>
                                <span style="color: #6b7280;">Êé®ÂÆöÊÆã„ÇäÊôÇÈñì:</span>
                                <div id="queueEstimatedTime" style="font-weight: 600; color: #374151;">--</div>
                            </div>
                            <div>
                                <span style="color: #6b7280;">ÊúÄÂæå„ÅÆÂá¶ÁêÜ:</span>
                                <div id="queueLastProcessed" style="font-weight: 600; color: #374151;">--:--</div>
                            </div>
                            <div>
                                <span style="color: #6b7280;">Âπ≥ÂùáÂá¶ÁêÜÊôÇÈñì:</span>
                                <div id="queueAverageTime" style="font-weight: 600; color: #374151;">--ms</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- „Ç≠„É•„ÉºÁÆ°ÁêÜ -->
                <div style="background: #f1f5f9; border-radius: 10px; padding: 20px; margin-bottom: 20px;">
                    <h3 style="margin: 0 0 15px 0; color: #0f172a; font-weight: 600;">üìã „Ç≠„É•„ÉºÁÆ°ÁêÜ</h3>
                    
                    <!-- ÂÑ™ÂÖàÂ∫¶Ë®≠ÂÆö -->
                    <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                        <h4 style="margin: 0 0 15px 0; color: #374151;">üî• ÂÑ™ÂÖàÂ∫¶Ë®≠ÂÆö</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÈÖç‰ø°ÂÑ™ÂÖàÂ∫¶</label>
                                <select id="emailPriority" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <option value="low">‰Ωé - ÈÄöÂ∏∏ÈÖç‰ø°</option>
                                    <option value="normal" selected>Ê®ôÊ∫ñ - ÂÆöÊúüÈÖç‰ø°</option>
                                    <option value="high">È´ò - ÈáçË¶ÅÈÄöÁü•</option>
                                    <option value="urgent">Á∑äÊÄ• - Âç≥Â∫ß„Å´Âá¶ÁêÜ</option>
                                </select>
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">„Éê„ÉÉ„ÉÅ„Çµ„Ç§„Ç∫</label>
                                <select id="batchSize" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <option value="10">Â∞è (10‰ª∂/„Éê„ÉÉ„ÉÅ)</option>
                                    <option value="50" selected>Ê®ôÊ∫ñ (50‰ª∂/„Éê„ÉÉ„ÉÅ)</option>
                                    <option value="100">Â§ß (100‰ª∂/„Éê„ÉÉ„ÉÅ)</option>
                                    <option value="250">ÁâπÂ§ß (250‰ª∂/„Éê„ÉÉ„ÉÅ)</option>
                                </select>
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÂÜçË©¶Ë°åÂõûÊï∞</label>
                                <select id="retryCount" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <option value="0">„Å™„Åó</option>
                                    <option value="1">1Âõû</option>
                                    <option value="3" selected>3Âõû (Êé®Â•®)</option>
                                    <option value="5">5Âõû</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <!-- „Ç≠„É•„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥ -->
                    <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                        <h4 style="margin: 0 0 15px 0; color: #374151;">‚ö° „ÇØ„Ç§„ÉÉ„ÇØ„Ç¢„ÇØ„Ç∑„Éß„É≥</h4>
                        <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                            <button id="addToQueueBtn" class="btn btn-primary">‚ûï „Ç≠„É•„Éº„Å´ËøΩÂä†</button>
                            <button id="priorityQueueBtn" class="btn btn-warning">üî• ÂÑ™ÂÖà„Ç≠„É•„Éº„Å´ËøΩÂä†</button>
                            <button id="scheduleQueueBtn" class="btn btn-info">üìÖ „Çπ„Ç±„Ç∏„É•„Éº„É´ËøΩÂä†</button>
                            <button id="bulkQueueBtn" class="btn btn-secondary">üì¶ ‰∏ÄÊã¨ËøΩÂä†</button>
                        </div>
                    </div>
                    
                    <!-- „Çπ„Ç±„Ç∏„É•„Éº„É´ÈÖç‰ø° -->
                    <div id="scheduleQueueSection" style="display: none; background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 2px solid #3b82f6;">
                        <h4 style="margin: 0 0 15px 0; color: #1e40af;">üìÖ „Çπ„Ç±„Ç∏„É•„Éº„É´ÈÖç‰ø°Ë®≠ÂÆö</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">ÈÖç‰ø°Êó•ÊôÇ</label>
                                <input type="datetime-local" id="scheduleDateTime" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600;">„Çø„Ç§„É†„Çæ„Éº„É≥</label>
                                <select id="scheduleTimezone" style="width: 100%; padding: 8px; border: 2px solid #d1d5db; border-radius: 6px;">
                                    <option value="Asia/Tokyo">Êó•Êú¨ÊôÇÈñì (JST)</option>
                                    <option value="UTC">ÂçîÂÆö‰∏ñÁïåÊôÇ (UTC)</option>
                                    <option value="America/New_York">Êù±ÈÉ®ÊôÇÈñì (EST)</option>
                                    <option value="Europe/London">„Ç∞„É™„Éã„ÉÉ„Ç∏Ê®ôÊ∫ñÊôÇ (GMT)</option>
                                </select>
                            </div>
                            <div style="display: flex; align-items: end;">
                                <button id="confirmScheduleBtn" class="btn btn-success" style="width: 100%;">‚úÖ „Çπ„Ç±„Ç∏„É•„Éº„É´Á¢∫ÂÆö</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- „Ç≠„É•„Éº„É™„Çπ„ÉàË°®Á§∫ -->
                <div style="background: white; border-radius: 10px; padding: 20px; margin-bottom: 20px; border: 1px solid #e5e7eb;">
                    <h3 style="margin: 0 0 15px 0; color: #374151; font-weight: 600;">üìã „Ç≠„É•„Éº‰∏ÄË¶ß</h3>
                    
                    <!-- „Éï„Ç£„É´„Çø„Éº„Éª„ÇΩ„Éº„Éà -->
                    <div style="background: #f8fafc; border-radius: 8px; padding: 15px; margin-bottom: 15px; border: 1px solid #e5e7eb;">
                        <div style="display: flex; gap: 15px; flex-wrap: wrap; align-items: center;">
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; font-size: 0.9rem;">„Éï„Ç£„É´„Çø„Éº</label>
                                <select id="queueFilter" style="padding: 6px 12px; border: 2px solid #d1d5db; border-radius: 4px; font-size: 0.9rem;">
                                    <option value="all">ÂÖ®„Å¶</option>
                                    <option value="pending">ÂæÖÊ©ü‰∏≠</option>
                                    <option value="processing">Âá¶ÁêÜ‰∏≠</option>
                                    <option value="completed">ÂÆå‰∫Ü</option>
                                    <option value="failed">Â§±Êïó</option>
                                </select>
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; font-size: 0.9rem;">„ÇΩ„Éº„Éà</label>
                                <select id="queueSort" style="padding: 6px 12px; border: 2px solid #d1d5db; border-radius: 4px; font-size: 0.9rem;">
                                    <option value="priority">ÂÑ™ÂÖàÂ∫¶È†Ü</option>
                                    <option value="created">‰ΩúÊàêÊó•ÊôÇ</option>
                                    <option value="scheduled">‰∫àÂÆöÊó•ÊôÇ</option>
                                    <option value="status">„Çπ„ÉÜ„Éº„Çø„Çπ</option>
                                </select>
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 5px; font-weight: 600; font-size: 0.9rem;">Ë°®Á§∫‰ª∂Êï∞</label>
                                <select id="queueLimit" style="padding: 6px 12px; border: 2px solid #d1d5db; border-radius: 4px; font-size: 0.9rem;">
                                    <option value="10">10‰ª∂</option>
                                    <option value="25" selected>25‰ª∂</option>
                                    <option value="50">50‰ª∂</option>
                                    <option value="100">100‰ª∂</option>
                                </select>
                            </div>
                            <div style="margin-left: auto;">
                                <button id="refreshQueueBtn" class="btn btn-info" style="padding: 6px 12px; font-size: 0.9rem;">üîÑ Êõ¥Êñ∞</button>
                                <button id="exportQueueBtn" class="btn btn-secondary" style="padding: 6px 12px; font-size: 0.9rem;">üíæ „Ç®„ÇØ„Çπ„Éù„Éº„Éà</button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- „Ç≠„É•„Éº„É™„Çπ„Éà -->
                    <div id="queueListContainer" style="max-height: 500px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 8px;">
                        <div style="text-align: center; padding: 40px; color: #6b7280;">
                            <div style="font-size: 2rem; margin-bottom: 10px;">‚ö°</div>
                            <p style="margin: 0;">„Ç≠„É•„ÉºÈ†ÖÁõÆ„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô</p>
                            <small>„Äå„Ç≠„É•„Éº„Å´ËøΩÂä†„Äç„Éú„Çø„É≥„Åß„É°„Éº„É´ÈÖç‰ø°„Çí„Ç≠„É•„Éº„Å´ÁôªÈå≤„Åó„Å¶„Åè„Å†„Åï„ÅÑ</small>
                        </div>
                    </div>
                </div>
                
                <!-- „Ç≠„É•„ÉºÁµ±Ë®à„Éª„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ -->
                <div style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); border-radius: 10px; padding: 20px; border: 1px solid #cbd5e0;">
                    <h3 style="margin: 0 0 15px 0; color: #374151; font-weight: 600;">üìä „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁµ±Ë®à</h3>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 20px;">
                        <!-- Âá¶ÁêÜÊôÇÈñìÁµ±Ë®à -->
                        <div style="background: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                            <h4 style="margin: 0 0 15px 0; color: #374151;">‚è±Ô∏è Âá¶ÁêÜÊôÇÈñìÁµ±Ë®à</h4>
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                <div style="text-align: center; padding: 10px; background: #dbeafe; border-radius: 6px;">
                                    <div style="font-size: 1.2rem; font-weight: bold; color: #1e40af;" id="avgProcessingTime">--</div>
                                    <div style="font-size: 0.8rem; color: #1e40af;">Âπ≥ÂùáÂá¶ÁêÜÊôÇÈñì</div>
                                </div>
                                <div style="text-align: center; padding: 10px; background: #ecfdf5; border-radius: 6px;">
                                    <div style="font-size: 1.2rem; font-weight: bold; color: #047857;" id="minProcessingTime">--</div>
                                    <div style="font-size: 0.8rem; color: #047857;">ÊúÄÁü≠ÊôÇÈñì</div>
                                </div>
                                <div style="text-align: center; padding: 10px; background: #fef3c7; border-radius: 6px;">
                                    <div style="font-size: 1.2rem; font-weight: bold; color: #92400e;" id="maxProcessingTime">--</div>
                                    <div style="font-size: 0.8rem; color: #92400e;">ÊúÄÈï∑ÊôÇÈñì</div>
                                </div>
                                <div style="text-align: center; padding: 10px; background: #f3e8ff; border-radius: 6px;">
                                    <div style="font-size: 1.2rem; font-weight: bold; color: #7c2d12;" id="totalProcessingTime">--</div>
                                    <div style="font-size: 0.8rem; color: #7c2d12;">Á¥ØÁ©çÊôÇÈñì</div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- „Ç®„É©„ÉºÁµ±Ë®à -->
                        <div style="background: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                            <h4 style="margin: 0 0 15px 0; color: #374151;">‚ö†Ô∏è „Ç®„É©„ÉºÁµ±Ë®à</h4>
                            <div style="font-size: 0.9rem; line-height: 1.6;">
                                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                    <span>ÊàêÂäüÁéá:</span>
                                    <span id="queueSuccessRate" style="font-weight: 600; color: #059669;">--</span>
                                </div>
                                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                    <span>„Ç®„É©„ÉºÁéá:</span>
                                    <span id="queueErrorRate" style="font-weight: 600; color: #dc2626;">--</span>
                                </div>
                                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                    <span>ÂÜçË©¶Ë°åÁéá:</span>
                                    <span id="queueRetryRate" style="font-weight: 600; color: #f59e0b;">--</span>
                                </div>
                                <div style="display: flex; justify-content: space-between;">
                                    <span>Á∑èÂá¶ÁêÜÊï∞:</span>
                                    <span id="queueTotalProcessed" style="font-weight: 600; color: #3b82f6;">--</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- „Ç∑„Çπ„ÉÜ„É†ÂÅ•Â∫∑Áä∂ÊÖã -->
                    <div style="background: white; border-radius: 8px; padding: 15px; border-left: 4px solid #10b981;">
                        <h4 style="margin: 0 0 10px 0; color: #047857;">üíö „Ç∑„Çπ„ÉÜ„É†ÂÅ•Â∫∑Áä∂ÊÖã</h4>
                        <div style="display: flex; gap: 20px; flex-wrap: wrap; font-size: 0.9rem;">
                            <div>
                                <span style="color: #6b7280;">„É°„É¢„É™‰ΩøÁî®Èáè:</span>
                                <span id="memoryUsage" style="font-weight: 600; color: #374151;">--</span>
                            </div>
                            <div>
                                <span style="color: #6b7280;">CPU‰ΩøÁî®Áéá:</span>
                                <span id="cpuUsage" style="font-weight: 600; color: #374151;">--</span>
                            </div>
                            <div>
                                <span style="color: #6b7280;">„Ç¢„ÉÉ„Éó„Çø„Ç§„É†:</span>
                                <span id="systemUptime" style="font-weight: 600; color: #374151;">--</span>
                            </div>
                            <div>
                                <span style="color: #6b7280;">ÊúÄÂæå„ÅÆÂÅ•Â∫∑„ÉÅ„Çß„ÉÉ„ÇØ:</span>
                                <span id="lastHealthCheck" style="font-weight: 600; color: #374151;">--:--</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- „ÉÜ„É≥„Éó„É¨„Éº„ÉàÈÅ∏Êäû„É¢„Éº„ÉÄ„É´ -->
    <div id="templateModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 12px; max-width: 600px; width: 90%; max-height: 80%; overflow-y: auto; box-shadow: 0 20px 50px rgba(0,0,0,0.3);">
            <div style="padding: 25px; border-bottom: 1px solid #e5e7eb;">
                <h3 style="margin: 0; color: #374151;">üìÇ ‰øùÂ≠òÊ∏à„Åø„ÉÜ„É≥„Éó„É¨„Éº„Éà</h3>
            </div>
            <div id="templateList" style="padding: 20px; max-height: 400px; overflow-y: auto;"></div>
            <div style="padding: 20px; border-top: 1px solid #e5e7eb; display: flex; gap: 10px; justify-content: flex-end;">
                <button id="closeTemplateModalBtn" class="btn btn-secondary">„Ç≠„É£„É≥„Çª„É´</button>
                <button id="deleteAllTemplatesBtn" class="btn btn-danger">üóëÔ∏è ÂÖ®ÂâäÈô§</button>
            </div>
        </div>
    </div>
    
    <!-- „ÉÜ„Çπ„ÉàÈÄÅ‰ø°„É¢„Éº„ÉÄ„É´ -->
    <div id="testSendModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 12px; max-width: 500px; width: 90%; box-shadow: 0 20px 50px rgba(0,0,0,0.3);">
            <div style="padding: 25px; border-bottom: 1px solid #e5e7eb;">
                <h3 style="margin: 0; color: #374151;">üìß „ÉÜ„Çπ„ÉàÈÄÅ‰ø°</h3>
            </div>
            <div style="padding: 20px;">
                <div style="margin-bottom: 20px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #374151;">ÈÄÅ‰ø°ÂÖà„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ</label>
                    <input type="email" id="testEmailAddress" placeholder="admin@example.com" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px;" />
                    <small style="color: #6b7280; display: block; margin-top: 5px;">„ÉÜ„Çπ„Éà„É°„Éº„É´„ÇíÈÄÅ‰ø°„Åô„Çã„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ</small>
                </div>
                
                <div style="background: #fef3c7; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b; margin-bottom: 20px;">
                    <h4 style="margin: 0 0 10px 0; color: #92400e;">‚ö†Ô∏è „ÉÜ„Çπ„ÉàÈÄÅ‰ø°„Å´„Å§„ÅÑ„Å¶</h4>
                    <ul style="margin: 0; padding-left: 20px; color: #78350f; font-size: 0.9em;">
                        <li>ÁèæÂú®„ÅÆË®≠ÂÆöÂÜÖÂÆπ„Åß„ÉÜ„Çπ„Éà„É°„Éº„É´„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô</li>
                        <li>‰ª∂Âêç„ÅÆÂÖàÈ†≠„Å´„Äå[TEST] „Äç„ÅåËøΩÂä†„Åï„Çå„Åæ„Åô</li>
                        <li>ÂÆüÈöõ„ÅÆÈÖç‰ø°„É™„Çπ„Éà„Å´„ÅØÂΩ±Èüø„Åó„Åæ„Åõ„Çì</li>
                        <li>ÈÄÅ‰ø°Â±•Ê≠¥„Å´„ÇÇË®òÈå≤„Åï„Çå„Åæ„Åõ„Çì</li>
                    </ul>
                </div>
                
                <div id="testSendStatus" style="margin-bottom: 15px;"></div>
            </div>
            <div style="padding: 20px; border-top: 1px solid #e5e7eb; display: flex; gap: 10px; justify-content: flex-end;">
                <button id="cancelTestSendBtn" class="btn btn-secondary">„Ç≠„É£„É≥„Çª„É´</button>
                <button id="executeTestSendBtn" class="btn btn-warning">üìß „ÉÜ„Çπ„ÉàÈÄÅ‰ø°ÂÆüË°å</button>
            </div>
        </div>
    </div>
</BaseLayout>

<script>
    // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„Éó„ÅÆË°®Á§∫Âà∂Âæ°Èñ¢Êï∞
    function updateTemplateSection() {
        const templateType = document.getElementById('templateType');
        const predictionSection = document.getElementById('predictionSection');
        const resultSection = document.getElementById('resultSection');
        const campaignSection = document.getElementById('campaignSection');
        const customSection = document.getElementById('customSection');
        
        // ÂÖ®„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÈùûË°®Á§∫
        [predictionSection, resultSection, campaignSection, customSection].forEach(section => {
            if (section) section.style.display = 'none';
        });
        
        // ÈÅ∏Êäû„Åï„Çå„Åü„Çø„Ç§„Éó„Å´Âøú„Åò„Å¶Ë°®Á§∫
        if (templateType) {
            switch (templateType.value) {
                case 'prediction':
                    if (predictionSection) {
                        predictionSection.style.display = 'block';
                        console.log('üéØ ‰∫àÊÉ≥„Çª„ÇØ„Ç∑„Éß„É≥„ÇíË°®Á§∫');
                    }
                    break;
                case 'result':
                    if (resultSection) {
                        resultSection.style.display = 'block';
                        console.log('üìä ÁµêÊûúÂ†±Âëä„Çª„ÇØ„Ç∑„Éß„É≥„ÇíË°®Á§∫');
                    }
                    break;
                case 'campaign':
                    if (campaignSection) {
                        campaignSection.style.display = 'block';
                        console.log('üé™ „Ç≠„É£„É≥„Éö„Éº„É≥„Çª„ÇØ„Ç∑„Éß„É≥„ÇíË°®Á§∫');
                    }
                    break;
                case 'custom':
                    if (customSection) {
                        customSection.style.display = 'block';
                        console.log('üé® „Ç´„Çπ„Çø„É†„Çª„ÇØ„Ç∑„Éß„É≥„ÇíË°®Á§∫');
                    }
                    break;
            }
        }
    }

    // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„ÉóÂ§âÊõ¥ÊôÇ„ÅÆÂá¶ÁêÜ
    const templateType = document.getElementById('templateType');
    templateType?.addEventListener('change', updateTemplateSection);

    // CTA„Éú„Çø„É≥Ë°®Á§∫/ÈùûË°®Á§∫Âà∂Âæ°
    function updateCtaButtonSettings() {
        const showCtaButton = document.getElementById('showCtaButton');
        const ctaButtonSettings = document.getElementById('ctaButtonSettings');
        
        if (showCtaButton && ctaButtonSettings) {
            ctaButtonSettings.style.display = showCtaButton.checked ? 'block' : 'none';
        }
    }

    // CTA„Éú„Çø„É≥„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπÂ§âÊõ¥ÊôÇ„ÅÆÂá¶ÁêÜ
    document.getElementById('showCtaButton')?.addEventListener('change', updateCtaButtonSettings);

    // ‰∫àÊÉ≥ËøΩÂä†„Éú„Çø„É≥
    document.getElementById('addPrediction')?.addEventListener('click', () => {
        const container = document.getElementById('predictionsContainer');
        const newPrediction = document.createElement('div');
        newPrediction.className = 'prediction-input';
        newPrediction.innerHTML = `
            <input type="text" placeholder="„É¨„Éº„ÇπÂêç" class="race-name" />
            <textarea placeholder="‰∫àÊÉ≥È¶¨ÔºàÊîπË°åÂå∫Âàá„ÇäÔºâ" rows="3" class="race-horses"></textarea>
            <button type="button" class="remove-prediction">ÂâäÈô§</button>
        `;
        container.appendChild(newPrediction);
        
        // ÂâäÈô§„Éú„Çø„É≥„ÅÆÂá¶ÁêÜ
        newPrediction.querySelector('.remove-prediction')?.addEventListener('click', () => {
            newPrediction.remove();
        });
    });

    // ÁµêÊûúËøΩÂä†„Éú„Çø„É≥
    document.getElementById('addResult')?.addEventListener('click', () => {
        const container = document.getElementById('resultsContainer');
        const newResult = document.createElement('div');
        newResult.className = 'result-input';
        newResult.innerHTML = `
            <input type="text" placeholder="„É¨„Éº„ÇπÂêç" class="result-race-name" />
            <div class="result-details">
                <input type="text" placeholder="1ÁùÄÈ¶¨" class="result-winner" />
                <input type="text" placeholder="ÈÖçÂΩìÔºà‰æã: ¬•1,200Ôºâ" class="result-payout" />
                <select class="result-status">
                    <option value="hit">üéØ ÁöÑ‰∏≠ÔºÅ</option>
                    <option value="miss">‚ùå ‰∏çÁöÑ‰∏≠</option>
                    <option value="near">üìà ÊÉú„Åó„ÅÑÔºÅ</option>
                </select>
                <button type="button" class="remove-result">ÂâäÈô§</button>
            </div>
        `;
        container.appendChild(newResult);
        
        // ÂâäÈô§„Éú„Çø„É≥„ÅÆÂá¶ÁêÜ
        newResult.querySelector('.remove-result')?.addEventListener('click', () => {
            newResult.remove();
        });
    });

    // „Éó„É¨„Éì„É•„Éº„Çí„ÇØ„É™„Ç¢„Åô„ÇãÈñ¢Êï∞
    function clearPreview() {
        const previewArea = document.getElementById('previewArea');
        previewArea.innerHTML = `
            <div class="preview-placeholder">
                „É°„Éº„É´„ÅÆ„Éó„É¨„Éì„É•„Éº„ÇíË°®Á§∫„Åó„Åæ„Åô<br>
                <small>Â∑¶„ÅÆ„Äå„Éó„É¨„Éì„É•„Éº„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ</small>
            </div>
        `;
    }
    
    // „Éó„É¨„Éì„É•„ÉºÁîüÊàêÈñ¢Êï∞ - ÂÖ®„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„ÉóÂØæÂøú
    function generatePreview() {
        try {
            const subject = document.getElementById('subject').value;
            const templateType = document.getElementById('templateType').value;
            const mainContent = document.getElementById('mainContent').value;
            
            if (!subject) {
                document.getElementById('previewArea').innerHTML = '<p class="error">‰ª∂Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>';
                return;
            }

            // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„ÉóÂà•„Éá„Éº„ÇøÂèéÈõÜ
            let templateData = {
                title: subject,
                mainContent: mainContent,
                templateType: templateType,
                theme: document.getElementById('customTheme')?.value || 'blue',
                layoutOrder: document.getElementById('layoutOrder')?.value || 'content-first',
                predictionNote: document.getElementById('predictionNote')?.value || '',
                additionalSection: document.getElementById('additionalSection')?.value || '',
                showCtaButton: document.getElementById('showCtaButton')?.checked || false,
                customCtaText: document.getElementById('customCtaText')?.value || '',
                customCtaUrl: document.getElementById('customCtaUrl')?.value || 'https://nankan-analytics.keiba.link/pricing/'
            };

            if (templateType === 'prediction') {
                // ‰∫àÊÉ≥„Éá„Éº„ÇøÂèéÈõÜ
                const predictionInputs = document.querySelectorAll('.prediction-input');
                templateData.predictions = Array.from(predictionInputs).map(input => {
                    const raceName = input.querySelector('.race-name')?.value || '';
                    const horses = (input.querySelector('.race-horses')?.value || '')
                        .split('\n')
                        .filter(h => h.trim())
                        .map(h => h.trim());
                    return { raceName, horses };
                }).filter(p => p.raceName && p.horses.length > 0);
            } else if (templateType === 'result') {
                templateData.results = collectResultData();
            } else if (templateType === 'campaign') {
                templateData.campaign = collectCampaignData();
            } else if (templateType === 'custom') {
                templateData.custom = collectCustomData();
            }

            // È´òÂ∫¶„Å™HTMLÁîüÊàê
            const htmlContent = generateAdvancedNewsletterHTML(templateData);
            
            // „Éó„É¨„Éì„É•„Éº„Ç®„É™„Ç¢„Å´Ë°®Á§∫
            const previewArea = document.getElementById('previewArea');
            if (previewArea) {
                previewArea.innerHTML = `
                    <iframe srcdoc="${htmlContent.replace(/"/g, '&quot;')}" 
                            style="width: 100%; height: 600px; border: 1px solid #ddd; border-radius: 10px; background: white; box-shadow: 0 10px 25px rgba(0,0,0,0.1);">
                    </iframe>
                `;
                console.log('‚úÖ „Éó„É¨„Éì„É•„ÉºÁîüÊàêÂÆå‰∫Ü - „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„Éó:', templateType);
            }
            
            // HTML„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Éï„Ç£„Éº„É´„Éâ„ÇÇÊõ¥Êñ∞
            const htmlContentField = document.getElementById('htmlContent');
            if (htmlContentField) {
                htmlContentField.value = htmlContent;
            }
            
        } catch (error) {
            console.error('„Éó„É¨„Éì„É•„ÉºÁîüÊàê„Ç®„É©„Éº:', error);
            document.getElementById('previewArea').innerHTML = '<p class="error">„Éó„É¨„Éì„É•„ÉºÁîüÊàê„Ç®„É©„Éº: ' + error.message + '</p>';
        }
    }
    
    // ‰∫àÊÉ≥„Éá„Éº„ÇøÂèéÈõÜ
    function collectPredictionData() {
        const races = [];
        for (let i = 1; i <= 3; i++) {
            const raceName = document.getElementById(`race${i}Name`)?.value;
            const horses = [];
            for (let j = 1; j <= 3; j++) {
                const horse = document.getElementById(`race${i}Horse${j}`)?.value;
                if (horse) horses.push(horse);
            }
            if (raceName || horses.length > 0) {
                races.push({ name: raceName || `Á¨¨${i}„É¨„Éº„Çπ`, horses });
            }
        }
        return { races, highlight: document.getElementById('predictionHighlight')?.value || '' };
    }
    
    // ÁµêÊûú„Éá„Éº„ÇøÂèéÈõÜ
    function collectResultData() {
        const results = [];
        for (let i = 1; i <= 3; i++) {
            const raceName = document.getElementById(`result${i}Race`)?.value;
            const prediction = document.getElementById(`result${i}Prediction`)?.value;
            const actual = document.getElementById(`result${i}Actual`)?.value;
            const status = document.getElementById(`result${i}Status`)?.value;
            if (raceName || prediction) {
                results.push({ raceName, prediction, actual, status });
            }
        }
        return {
            results,
            monthlyHitRate: document.getElementById('monthlyHitRate')?.value || '',
            monthlyROI: document.getElementById('monthlyROI')?.value || ''
        };
    }
    
    // „Ç≠„É£„É≥„Éö„Éº„É≥„Éá„Éº„ÇøÂèéÈõÜ
    function collectCampaignData() {
        return {
            title: document.getElementById('campaignTitle')?.value || '',
            description: document.getElementById('campaignDescription')?.value || '',
            discount: document.getElementById('campaignDiscount')?.value || '',
            period: document.getElementById('campaignPeriod')?.value || '',
            beforePrice: document.getElementById('campaignBeforePrice')?.value || '',
            afterPrice: document.getElementById('campaignAfterPrice')?.value || ''
        };
    }
    
    // „Ç´„Çπ„Çø„É†„Éá„Éº„ÇøÂèéÈõÜ
    function collectCustomData() {
        return {
            headline: document.getElementById('customHeadline')?.value || '',
            message: document.getElementById('customMessage')?.value || '',
            feature1: document.getElementById('customFeature1')?.value || '',
            feature2: document.getElementById('customFeature2')?.value || '',
            feature3: document.getElementById('customFeature3')?.value || ''
        };
    }

    // „Éó„É¨„Éì„É•„Éº„ÇØ„É™„Ç¢„Éú„Çø„É≥
    document.getElementById('clearPreviewBtn')?.addEventListener('click', clearPreview);

    // „Éï„Ç©„Éº„É†ÂÖ•ÂäõÂ§âÊõ¥ÊôÇ„Å´„Éó„É¨„Éì„É•„Éº„ÇíËá™Âãï„ÇØ„É™„Ç¢
    const formInputs = ['subject', 'mainContent', 'targetPlan', 'templateType', 'scheduledAt', 'layoutOrder', 'predictionNote', 'additionalSection', 'customCtaText', 'customCtaUrl'];
    formInputs.forEach(inputId => {
        const element = document.getElementById(inputId);
        element?.addEventListener('input', clearPreview);
        element?.addEventListener('change', clearPreview);
    });

    // ================================
    // A/B„ÉÜ„Çπ„ÉàÊ©üËÉΩ
    // ================================
    
    // A/B„ÉÜ„Çπ„ÉàÁÆ°ÁêÜ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
    const abTestManager = {
        currentTest: null,
        activeTests: [],
        completedTests: [],
        
        // „ÉÜ„Çπ„ÉàË®≠ÂÆö„Éá„Éº„Çø„ÇíÂèñÂæó
        getTestSettings() {
            const enableAbTest = document.getElementById('enableAbTest')?.checked;
            if (!enableAbTest) return null;
            
            return {
                enabled: true,
                versionARatio: parseInt(document.getElementById('versionARatio')?.value) || 50,
                versionBRatio: 100 - (parseInt(document.getElementById('versionARatio')?.value) || 50),
                minSampleSize: parseInt(document.getElementById('minSampleSize')?.value) || 100,
                testType: document.querySelector('input[name="testType"]:checked')?.value || 'subject',
                significanceLevel: parseFloat(document.getElementById('significanceLevel')?.value) || 0.05,
                statisticalPower: parseFloat(document.getElementById('statisticalPower')?.value) || 0.80,
                testDuration: parseInt(document.getElementById('testDuration')?.value) || 48,
                kpis: {
                    openRate: document.getElementById('kpiOpenRate')?.checked || false,
                    clickRate: document.getElementById('kpiClickRate')?.checked || false,
                    conversion: document.getElementById('kpiConversion')?.checked || false,
                    unsubscribe: document.getElementById('kpiUnsubscribe')?.checked || false
                },
                versionA: this.getVersionData('A'),
                versionB: this.getVersionData('B')
            };
        },
        
        // „Éê„Éº„Ç∏„Éß„É≥„Éá„Éº„Çø„ÇíÂèñÂæó
        getVersionData(version) {
            const testType = document.querySelector('input[name="testType"]:checked')?.value || 'subject';
            const data = { version, testType };
            
            switch (testType) {
                case 'subject':
                    data.subject = document.getElementById(`subjectVersion${version}`)?.value || '';
                    break;
                case 'content':
                    data.content = document.getElementById(`contentVersion${version}`)?.value || '';
                    break;
                case 'cta':
                    data.ctaText = document.getElementById(`ctaTextVersion${version}`)?.value || '';
                    data.ctaColor = document.getElementById(`ctaColorVersion${version}`)?.value || '#3b82f6';
                    break;
                case 'timing':
                    data.timing = document.getElementById(`timingVersion${version}`)?.value || '';
                    break;
            }
            
            return data;
        },
        
        // „ÉÜ„Çπ„ÉàÈÖç‰ø°„Éó„É¨„Éì„É•„Éº„ÇíÊõ¥Êñ∞
        updatePreview() {
            const settings = this.getTestSettings();
            const previewArea = document.getElementById('abTestSummary');
            
            if (!settings || !settings.enabled) {
                previewArea.innerHTML = 'A/B„ÉÜ„Çπ„Éà„ÅåÁÑ°Âäπ„Å´„Å™„Å£„Å¶„ÅÑ„Åæ„Åô';
                return;
            }
            
            let html = `
                <div style="margin-bottom: 15px;">
                    <strong>üìä ÈÖç‰ø°ÊØîÁéá:</strong> „Éê„Éº„Ç∏„Éß„É≥A ${settings.versionARatio}% / „Éê„Éº„Ç∏„Éß„É≥B ${settings.versionBRatio}%
                </div>
                <div style="margin-bottom: 15px;">
                    <strong>üéØ „ÉÜ„Çπ„ÉàÈ†ÖÁõÆ:</strong> ${this.getTestTypeLabel(settings.testType)}
                </div>
                <div style="margin-bottom: 15px;">
                    <strong>üìà Áµ±Ë®àË®≠ÂÆö:</strong> ÊúâÊÑèÊ∞¥Ê∫ñ${(settings.significanceLevel * 100)}% / Ê§úÂá∫Âäõ${(settings.statisticalPower * 100)}% / ÊúüÈñì${settings.testDuration}ÊôÇÈñì
                </div>
                <div style="margin-bottom: 15px;">
                    <strong>üìß ÊúÄÂ∞è„Çµ„É≥„Éó„É´:</strong> ${settings.minSampleSize}‰ª∂
                </div>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 20px;">
                    <div style="background: #fef3c7; padding: 10px; border-radius: 6px;">
                        <div style="font-weight: 600; color: #92400e; margin-bottom: 8px;">üÖ∞Ô∏è „Éê„Éº„Ç∏„Éß„É≥A</div>
                        ${this.getVersionPreview(settings.versionA)}
                    </div>
                    <div style="background: #ecfdf5; padding: 10px; border-radius: 6px;">
                        <div style="font-weight: 600; color: #047857; margin-bottom: 8px;">üÖ±Ô∏è „Éê„Éº„Ç∏„Éß„É≥B</div>
                        ${this.getVersionPreview(settings.versionB)}
                    </div>
                </div>
            `;
            
            previewArea.innerHTML = html;
        },
        
        // „Éê„Éº„Ç∏„Éß„É≥„Éó„É¨„Éì„É•„Éº„ÇíÁîüÊàê
        getVersionPreview(versionData) {
            const testType = versionData.testType;
            switch (testType) {
                case 'subject':
                    return `‰ª∂Âêç: "${versionData.subject || 'Êú™Ë®≠ÂÆö'}"`;
                case 'content':
                    return `Êú¨Êñá: "${versionData.content ? versionData.content.substring(0, 50) + '...' : 'Êú™Ë®≠ÂÆö'}"`;
                case 'cta':
                    return `CTA: "${versionData.ctaText || 'Êú™Ë®≠ÂÆö'}" (Ëâ≤: ${versionData.ctaColor})`;
                case 'timing':
                    return `ÈÖç‰ø°ÊôÇÈñì: ${versionData.timing || 'Êú™Ë®≠ÂÆö'}`;
                default:
                    return 'Êú™Ë®≠ÂÆö';
            }
        },
        
        // „ÉÜ„Çπ„Éà„Çø„Ç§„Éó„ÅÆ„É©„Éô„É´„ÇíÂèñÂæó
        getTestTypeLabel(testType) {
            const labels = {
                subject: 'üìß ‰ª∂Âêç„ÉÜ„Çπ„Éà',
                content: 'üìù Êú¨Êñá„ÉÜ„Çπ„Éà',
                cta: 'üéØ CTA„Éú„Çø„É≥„ÉÜ„Çπ„Éà',
                timing: '‚è∞ ÈÖç‰ø°ÊôÇÈñì„ÉÜ„Çπ„Éà'
            };
            return labels[testType] || 'Unknown';
        },
        
        // A/B„ÉÜ„Çπ„Éà„ÇíÈñãÂßã
        startTest() {
            const settings = this.getTestSettings();
            if (!settings) {
                alert('A/B„ÉÜ„Çπ„ÉàË®≠ÂÆö„ÅåÊúâÂäπ„Å´„Å™„Å£„Å¶„ÅÑ„Åæ„Åõ„Çì');
                return false;
            }
            
            // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
            if (!this.validateTestSettings(settings)) {
                return false;
            }
            
            // „ÉÜ„Çπ„Éà‰ΩúÊàê
            const testId = 'test_' + Date.now();
            const newTest = {
                id: testId,
                status: 'active',
                startTime: new Date().toISOString(),
                endTime: new Date(Date.now() + settings.testDuration * 60 * 60 * 1000).toISOString(),
                settings: settings,
                results: {
                    versionA: { sent: 0, opened: 0, clicked: 0, converted: 0, unsubscribed: 0 },
                    versionB: { sent: 0, opened: 0, clicked: 0, converted: 0, unsubscribed: 0 }
                },
                recipientLists: {
                    versionA: [],
                    versionB: []
                }
            };
            
            // „ÉÜ„Çπ„Éà„Çí‰øùÂ≠ò
            this.activeTests.push(newTest);
            this.currentTest = newTest;
            this.saveTestData();
            
            console.log('A/B„ÉÜ„Çπ„ÉàÈñãÂßã:', newTest);
            alert(`A/B„ÉÜ„Çπ„Éà "${testId}" „ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇ${settings.testDuration}ÊôÇÈñìÂæå„Å´ÁµêÊûú„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
            
            return true;
        },
        
        // „ÉÜ„Çπ„ÉàË®≠ÂÆö„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
        validateTestSettings(settings) {
            if (!settings.versionA || !settings.versionB) {
                alert('„Éê„Éº„Ç∏„Éß„É≥A„Å®B„ÅÆ‰∏°Êñπ„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                return false;
            }
            
            // „ÉÜ„Çπ„Éà„Çø„Ç§„ÉóÂà•„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
            switch (settings.testType) {
                case 'subject':
                    if (!settings.versionA.subject || !settings.versionB.subject) {
                        alert('‰∏°Êñπ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅÆ‰ª∂Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return false;
                    }
                    if (settings.versionA.subject === settings.versionB.subject) {
                        alert('„Éê„Éº„Ç∏„Éß„É≥A„Å®B„ÅÆ‰ª∂Âêç„ÅØÁï∞„Å™„ÇãÂÜÖÂÆπ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return false;
                    }
                    break;
                case 'content':
                    if (!settings.versionA.content || !settings.versionB.content) {
                        alert('‰∏°Êñπ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅÆÊú¨Êñá„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return false;
                    }
                    break;
                case 'cta':
                    if (!settings.versionA.ctaText || !settings.versionB.ctaText) {
                        alert('‰∏°Êñπ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅÆCTA„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return false;
                    }
                    break;
                case 'timing':
                    if (!settings.versionA.timing || !settings.versionB.timing) {
                        alert('‰∏°Êñπ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅÆÈÖç‰ø°ÊôÇÈñì„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return false;
                    }
                    break;
            }
            
            return true;
        },
        
        // „ÉÜ„Çπ„Éà„Éá„Éº„Çø„Çí‰øùÂ≠ò
        saveTestData() {
            localStorage.setItem('abTest-activeTests', JSON.stringify(this.activeTests));
            localStorage.setItem('abTest-completedTests', JSON.stringify(this.completedTests));
        },
        
        // „ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
        loadTestData() {
            try {
                this.activeTests = JSON.parse(localStorage.getItem('abTest-activeTests') || '[]');
                this.completedTests = JSON.parse(localStorage.getItem('abTest-completedTests') || '[]');
            } catch (error) {
                console.error('A/B„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
                this.activeTests = [];
                this.completedTests = [];
            }
        },
        
        // „ÉÜ„Çπ„ÉàÁµêÊûú„ÇíË°®Á§∫
        displayTestResults(testList, containerId) {
            const container = document.getElementById(containerId);
            if (!container || !testList || testList.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: #6b7280; padding: 40px;">
                        <div style="font-size: 1.5rem; margin-bottom: 10px;">üìä</div>
                        <p>„ÉÜ„Çπ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</p>
                    </div>
                `;
                return;
            }
            
            let html = '';
            testList.forEach(test => {
                const isComplete = test.status === 'completed' || new Date(test.endTime) < new Date();
                const duration = this.formatDuration(new Date(test.startTime), new Date(test.endTime));
                
                html += `
                    <div style="background: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; border: 2px solid ${isComplete ? '#10b981' : '#3b82f6'};">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                            <div>
                                <h4 style="margin: 0; color: #374151;">${test.id}</h4>
                                <small style="color: #6b7280;">${this.getTestTypeLabel(test.settings.testType)} | ${duration}</small>
                            </div>
                            <div style="padding: 4px 12px; background: ${isComplete ? '#10b981' : '#3b82f6'}; color: white; border-radius: 12px; font-size: 0.8rem;">
                                ${isComplete ? '‚úÖ ÂÆå‰∫Ü' : 'üîÑ ÈÄ≤Ë°å‰∏≠'}
                            </div>
                        </div>
                        ${this.renderTestResults(test)}
                    </div>
                `;
            });
            
            container.innerHTML = html;
        },
        
        // „ÉÜ„Çπ„ÉàÁµêÊûú„ÅÆË©≥Á¥∞„ÇíÁîüÊàê
        renderTestResults(test) {
            const versionA = test.results.versionA;
            const versionB = test.results.versionB;
            
            return `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                    <div>
                        <h5 style="margin: 0 0 10px 0; color: #92400e;">üÖ∞Ô∏è „Éê„Éº„Ç∏„Éß„É≥A</h5>
                        <div style="font-size: 0.9rem; line-height: 1.5;">
                            ÈÖç‰ø°Êï∞: ${versionA.sent}<br>
                            ÈñãÂ∞ÅÊï∞: ${versionA.opened} (${this.calculateRate(versionA.opened, versionA.sent)}%)<br>
                            „ÇØ„É™„ÉÉ„ÇØÊï∞: ${versionA.clicked} (${this.calculateRate(versionA.clicked, versionA.sent)}%)<br>
                            „Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥: ${versionA.converted}<br>
                            ÈÖç‰ø°ÂÅúÊ≠¢: ${versionA.unsubscribed}
                        </div>
                    </div>
                    <div>
                        <h5 style="margin: 0 0 10px 0; color: #047857;">üÖ±Ô∏è „Éê„Éº„Ç∏„Éß„É≥B</h5>
                        <div style="font-size: 0.9rem; line-height: 1.5;">
                            ÈÖç‰ø°Êï∞: ${versionB.sent}<br>
                            ÈñãÂ∞ÅÊï∞: ${versionB.opened} (${this.calculateRate(versionB.opened, versionB.sent)}%)<br>
                            „ÇØ„É™„ÉÉ„ÇØÊï∞: ${versionB.clicked} (${this.calculateRate(versionB.clicked, versionB.sent)}%)<br>
                            „Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥: ${versionB.converted}<br>
                            ÈÖç‰ø°ÂÅúÊ≠¢: ${versionB.unsubscribed}
                        </div>
                    </div>
                </div>
                <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #e5e7eb;">
                    <div style="font-size: 0.9rem; color: #6b7280;">
                        ${this.getWinnerAnalysis(test)}
                    </div>
                </div>
            `;
        },
        
        // ÂãùËÄÖÂàÜÊûê„ÇíÁîüÊàê
        getWinnerAnalysis(test) {
            // Á∞°Âçò„Å™ÂãùËÄÖÂà§ÂÆöÔºàÂÆüÈöõ„ÅØ„Çà„ÇäË§áÈõë„Å™Áµ±Ë®àÂàÜÊûê„ÅåÂøÖË¶ÅÔºâ
            const aOpenRate = this.calculateRate(test.results.versionA.opened, test.results.versionA.sent);
            const bOpenRate = this.calculateRate(test.results.versionB.opened, test.results.versionB.sent);
            
            const aClickRate = this.calculateRate(test.results.versionA.clicked, test.results.versionA.sent);
            const bClickRate = this.calculateRate(test.results.versionB.clicked, test.results.versionB.sent);
            
            let winner = '';
            if (aOpenRate > bOpenRate && aClickRate > bClickRate) {
                winner = 'üÖ∞Ô∏è „Éê„Éº„Ç∏„Éß„É≥A„ÅåÂÑ™Âã¢';
            } else if (bOpenRate > aOpenRate && bClickRate > aClickRate) {
                winner = 'üÖ±Ô∏è „Éê„Éº„Ç∏„Éß„É≥B„ÅåÂÑ™Âã¢';
            } else {
                winner = '‚öñÔ∏è ÊãÆÊäóÔºà„Åï„Çâ„Å™„Çã„Éá„Éº„Çø„ÅåÂøÖË¶ÅÔºâ';
            }
            
            return `
                <strong>Âà§ÂÆöÁµêÊûú:</strong> ${winner}<br>
                <strong>ÈñãÂ∞ÅÁéáÂ∑Æ:</strong> ${(bOpenRate - aOpenRate).toFixed(2)}%pt | 
                <strong>„ÇØ„É™„ÉÉ„ÇØÁéáÂ∑Æ:</strong> ${(bClickRate - aClickRate).toFixed(2)}%pt
            `;
        },
        
        // Áéá„ÇíË®àÁÆó
        calculateRate(numerator, denominator) {
            return denominator > 0 ? ((numerator / denominator) * 100).toFixed(1) : '0.0';
        },
        
        // ÊúüÈñì„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        formatDuration(start, end) {
            const diffMs = end - start;
            const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
            return `${diffHours}ÊôÇÈñì`;
        }
    };

    // A/B„ÉÜ„Çπ„ÉàÈñ¢ÈÄ£„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    
    // A/B„ÉÜ„Çπ„ÉàÊúâÂäπÂåñÂàá„ÇäÊõø„Åà
    document.getElementById('enableAbTest')?.addEventListener('change', function() {
        const settings = document.getElementById('abTestSettings');
        const startBtn = document.getElementById('startAbTestBtn');
        
        if (this.checked) {
            settings.style.display = 'block';
            startBtn.disabled = false;
            abTestManager.updatePreview();
        } else {
            settings.style.display = 'none';
            startBtn.disabled = true;
            document.getElementById('abTestSummary').innerHTML = '„ÉÜ„Çπ„ÉàË®≠ÂÆö„ÇíÊúâÂäπ„Å´„Åó„Å¶Ë©≥Á¥∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
        }
    });
    
    // „Éê„Éº„Ç∏„Éß„É≥AÈÖç‰ø°ÊØîÁéáÂ§âÊõ¥ÊôÇ„Å´Ëá™Âãï„ÅßB„ÇíÊõ¥Êñ∞
    document.getElementById('versionARatio')?.addEventListener('change', function() {
        const bRatio = 100 - parseInt(this.value);
        document.getElementById('versionBRatio').value = bRatio + '%';
        abTestManager.updatePreview();
    });
    
    // „ÉÜ„Çπ„Éà„Çø„Ç§„ÉóÂ§âÊõ¥ÊôÇ„Å´ÂØæÂøú„Åô„Çã„Éï„Ç©„Éº„É†„ÇíË°®Á§∫/ÈùûË°®Á§∫
    document.querySelectorAll('input[name="testType"]').forEach(radio => {
        radio.addEventListener('change', function() {
            // ÂÖ®„Å¶ÈùûË°®Á§∫
            document.querySelectorAll('.test-variation').forEach(el => {
                el.style.display = 'none';
            });
            
            // ÈÅ∏Êäû„Åï„Çå„Åü„Çø„Ç§„Éó„ÅÆ„ÅøË°®Á§∫
            const selectedType = this.value;
            document.querySelectorAll(`#${selectedType}TestA, #${selectedType}TestB`).forEach(el => {
                el.style.display = 'block';
            });
            
            abTestManager.updatePreview();
        });
    });
    
    // Ë®≠ÂÆöÂ§âÊõ¥ÊôÇ„Å´„Éó„É¨„Éì„É•„Éº„ÇíÊõ¥Êñ∞
    ['versionARatio', 'minSampleSize', 'significanceLevel', 'statisticalPower', 'testDuration',
     'subjectVersionA', 'subjectVersionB', 'contentVersionA', 'contentVersionB',
     'ctaTextVersionA', 'ctaTextVersionB', 'ctaColorVersionA', 'ctaColorVersionB',
     'timingVersionA', 'timingVersionB'].forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('input', () => abTestManager.updatePreview());
            element.addEventListener('change', () => abTestManager.updatePreview());
        }
    });
    
    // KPIÂ§âÊõ¥ÊôÇ„Å´„Éó„É¨„Éì„É•„Éº„ÇíÊõ¥Êñ∞
    ['kpiOpenRate', 'kpiClickRate', 'kpiConversion', 'kpiUnsubscribe'].forEach(id => {
        document.getElementById(id)?.addEventListener('change', () => abTestManager.updatePreview());
    });
    
    // A/B„ÉÜ„Çπ„ÉàÈñãÂßã„Éú„Çø„É≥
    document.getElementById('startAbTestBtn')?.addEventListener('click', () => {
        if (confirm('A/B„ÉÜ„Çπ„Éà„ÇíÈñãÂßã„Åó„Åæ„Åô„ÅãÔºü\n\n„ÉÜ„Çπ„ÉàÈñãÂßãÂæå„ÅØË®≠ÂÆö„ÅÆÂ§âÊõ¥„Åå„Åß„Åç„Åæ„Åõ„Çì„ÄÇ')) {
            if (abTestManager.startTest()) {
                // ÊàêÂäüÊôÇ„ÅØ„Éï„Ç©„Éº„É†„Çí‰∏ÄÈÉ®ÁÑ°ÂäπÂåñ
                document.getElementById('enableAbTest').disabled = true;
                document.getElementById('startAbTestBtn').innerHTML = '‚è≥ „ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠...';
                document.getElementById('startAbTestBtn').disabled = true;
            }
        }
    });
    
    // „Éó„É¨„Éì„É•„Éº„Éú„Çø„É≥
    document.getElementById('previewAbTestBtn')?.addEventListener('click', () => {
        const settings = abTestManager.getTestSettings();
        if (!settings || !settings.enabled) {
            alert('A/B„ÉÜ„Çπ„ÉàË®≠ÂÆö„ÇíÊúâÂäπ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }
        
        // „Éê„Éº„Ç∏„Éß„É≥A„Å®B„ÅÆ„Éó„É¨„Éì„É•„Éº„ÇíË°®Á§∫
        const previewWindow = window.open('', '_blank', 'width=1200,height=800,scrollbars=yes');
        previewWindow.document.write(`
            <!DOCTYPE html>
            <html>
                <head>
                    <title>A/B„ÉÜ„Çπ„Éà„Éó„É¨„Éì„É•„Éº</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        .version { margin: 20px 0; padding: 20px; border: 2px solid #ccc; border-radius: 8px; }
                        .version-a { border-color: #fbbf24; background: #fef3c7; }
                        .version-b { border-color: #10b981; background: #ecfdf5; }
                        h2 { margin-top: 0; }
                    </style>
                </head>
                <body>
                    <h1>üß™ A/B„ÉÜ„Çπ„Éà„Éó„É¨„Éì„É•„Éº</h1>
                    <div class="version version-a">
                        <h2>üÖ∞Ô∏è „Éê„Éº„Ç∏„Éß„É≥A</h2>
                        ${abTestManager.getVersionPreview(settings.versionA)}
                    </div>
                    <div class="version version-b">
                        <h2>üÖ±Ô∏è „Éê„Éº„Ç∏„Éß„É≥B</h2>
                        ${abTestManager.getVersionPreview(settings.versionB)}
                    </div>
                </body>
            </html>
        `);
        previewWindow.document.close();
    });
    
    // „ÉÜ„Çπ„ÉàË®≠ÂÆö‰øùÂ≠ò
    document.getElementById('saveAbTestSettingsBtn')?.addEventListener('click', () => {
        const settings = abTestManager.getTestSettings();
        if (!settings) {
            alert('‰øùÂ≠ò„Åô„ÇãË®≠ÂÆö„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        const name = prompt('Ë®≠ÂÆö„Å´ÂêçÂâç„Çí‰ªò„Åë„Å¶„Åè„Å†„Åï„ÅÑ:', 'A/B„ÉÜ„Çπ„ÉàË®≠ÂÆö_' + new Date().toISOString().split('T')[0]);
        if (name) {
            const savedSettings = JSON.parse(localStorage.getItem('abTest-savedSettings') || '{}');
            savedSettings[name] = settings;
            localStorage.setItem('abTest-savedSettings', JSON.stringify(savedSettings));
            alert('Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü: ' + name);
        }
    });
    
    // „ÉÜ„Çπ„ÉàË®≠ÂÆöË™≠„ÅøËæº„Åø
    document.getElementById('loadAbTestSettingsBtn')?.addEventListener('click', () => {
        const savedSettings = JSON.parse(localStorage.getItem('abTest-savedSettings') || '{}');
        const names = Object.keys(savedSettings);
        
        if (names.length === 0) {
            alert('‰øùÂ≠ò„Åï„Çå„ÅüË®≠ÂÆö„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        const name = prompt('Ë™≠„ÅøËæº„ÇÄË®≠ÂÆö„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n\n' + names.join('\n'), names[0]);
        if (name && savedSettings[name]) {
            const settings = savedSettings[name];
            
            // Ë®≠ÂÆö„Çí„Éï„Ç©„Éº„É†„Å´ÂèçÊò†
            document.getElementById('enableAbTest').checked = settings.enabled;
            document.getElementById('versionARatio').value = settings.versionARatio;
            document.getElementById('minSampleSize').value = settings.minSampleSize;
            document.getElementById('significanceLevel').value = settings.significanceLevel;
            document.getElementById('statisticalPower').value = settings.statisticalPower;
            document.getElementById('testDuration').value = settings.testDuration;
            
            // „ÉÜ„Çπ„Éà„Çø„Ç§„Éó„ÇíÈÅ∏Êäû
            const testTypeRadio = document.querySelector(`input[name="testType"][value="${settings.testType}"]`);
            if (testTypeRadio) {
                testTypeRadio.checked = true;
                testTypeRadio.dispatchEvent(new Event('change'));
            }
            
            // „Éê„Éº„Ç∏„Éß„É≥„Éá„Éº„Çø„ÇíË®≠ÂÆö
            if (settings.versionA) {
                Object.keys(settings.versionA).forEach(key => {
                    const element = document.getElementById(key + 'VersionA');
                    if (element && settings.versionA[key] !== undefined) {
                        element.value = settings.versionA[key];
                    }
                });
            }
            
            if (settings.versionB) {
                Object.keys(settings.versionB).forEach(key => {
                    const element = document.getElementById(key + 'VersionB');
                    if (element && settings.versionB[key] !== undefined) {
                        element.value = settings.versionB[key];
                    }
                });
            }
            
            // KPIË®≠ÂÆö
            if (settings.kpis) {
                Object.keys(settings.kpis).forEach(kpi => {
                    const element = document.getElementById('kpi' + kpi.charAt(0).toUpperCase() + kpi.slice(1));
                    if (element) {
                        element.checked = settings.kpis[kpi];
                    }
                });
            }
            
            // A/B„ÉÜ„Çπ„ÉàË®≠ÂÆö„ÇíË°®Á§∫
            document.getElementById('enableAbTest').dispatchEvent(new Event('change'));
            
            alert('Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü: ' + name);
        }
    });
    
    // ÈÄ≤Ë°å‰∏≠„ÉÜ„Çπ„ÉàË°®Á§∫
    document.getElementById('loadActiveTestsBtn')?.addEventListener('click', () => {
        abTestManager.loadTestData();
        abTestManager.displayTestResults(abTestManager.activeTests, 'abTestResultsArea');
    });
    
    // ÂÆå‰∫ÜÊ∏à„Åø„ÉÜ„Çπ„ÉàË°®Á§∫
    document.getElementById('loadCompletedTestsBtn')?.addEventListener('click', () => {
        abTestManager.loadTestData();
        abTestManager.displayTestResults(abTestManager.completedTests, 'abTestResultsArea');
    });
    
    // „ÉÜ„Çπ„ÉàÁµêÊûú„Ç®„ÇØ„Çπ„Éù„Éº„Éà
    document.getElementById('exportTestResultsBtn')?.addEventListener('click', () => {
        abTestManager.loadTestData();
        const allTests = [...abTestManager.activeTests, ...abTestManager.completedTests];
        
        if (allTests.length === 0) {
            alert('„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åô„Çã„ÉÜ„Çπ„ÉàÁµêÊûú„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        const csv = abTestManager.exportToCsv(allTests);
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = 'ab-test-results_' + new Date().toISOString().split('T')[0] + '.csv';
        link.click();
    });
    
    // „ÉÜ„Çπ„ÉàÂ±•Ê≠¥ÂâäÈô§
    document.getElementById('clearTestHistoryBtn')?.addEventListener('click', () => {
        if (confirm('ÂÖ®„Å¶„ÅÆA/B„ÉÜ„Çπ„ÉàÂ±•Ê≠¥„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\n\n„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ')) {
            localStorage.removeItem('abTest-activeTests');
            localStorage.removeItem('abTest-completedTests');
            abTestManager.activeTests = [];
            abTestManager.completedTests = [];
            document.getElementById('abTestResultsArea').innerHTML = `
                <div style="text-align: center; color: #6b7280; padding: 40px;">
                    <div style="font-size: 2rem; margin-bottom: 10px;">üóëÔ∏è</div>
                    <p>„ÉÜ„Çπ„ÉàÂ±•Ê≠¥„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü</p>
                </div>
            `;
            alert('A/B„ÉÜ„Çπ„ÉàÂ±•Ê≠¥„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
        }
    });
    
    // CSV„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊ©üËÉΩ„ÇíabTestManager„Å´ËøΩÂä†
    abTestManager.exportToCsv = function(tests) {
        const headers = [
            '„ÉÜ„Çπ„ÉàID', '„ÉÜ„Çπ„Éà„Çø„Ç§„Éó', 'ÈñãÂßãÊôÇÈñì', 'ÁµÇ‰∫ÜÊôÇÈñì', '„Çπ„ÉÜ„Éº„Çø„Çπ',
            'AÈÖç‰ø°Êï∞', 'AÈñãÂ∞ÅÊï∞', 'AÈñãÂ∞ÅÁéá', 'A„ÇØ„É™„ÉÉ„ÇØÊï∞', 'A„ÇØ„É™„ÉÉ„ÇØÁéá', 'A„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥', 'AÈÖç‰ø°ÂÅúÊ≠¢',
            'BÈÖç‰ø°Êï∞', 'BÈñãÂ∞ÅÊï∞', 'BÈñãÂ∞ÅÁéá', 'B„ÇØ„É™„ÉÉ„ÇØÊï∞', 'B„ÇØ„É™„ÉÉ„ÇØÁéá', 'B„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥', 'BÈÖç‰ø°ÂÅúÊ≠¢',
            'ÈñãÂ∞ÅÁéáÂ∑Æ', '„ÇØ„É™„ÉÉ„ÇØÁéáÂ∑Æ', 'ÂãùËÄÖ'
        ];
        
        let csv = headers.join(',') + '\n';
        
        tests.forEach(test => {
            const aOpenRate = this.calculateRate(test.results.versionA.opened, test.results.versionA.sent);
            const bOpenRate = this.calculateRate(test.results.versionB.opened, test.results.versionB.sent);
            const aClickRate = this.calculateRate(test.results.versionA.clicked, test.results.versionA.sent);
            const bClickRate = this.calculateRate(test.results.versionB.clicked, test.results.versionB.sent);
            
            const openRateDiff = (parseFloat(bOpenRate) - parseFloat(aOpenRate)).toFixed(2);
            const clickRateDiff = (parseFloat(bClickRate) - parseFloat(aClickRate)).toFixed(2);
            
            let winner = 'Draw';
            if (parseFloat(bOpenRate) > parseFloat(aOpenRate) && parseFloat(bClickRate) > parseFloat(aClickRate)) {
                winner = 'Version B';
            } else if (parseFloat(aOpenRate) > parseFloat(bOpenRate) && parseFloat(aClickRate) > parseFloat(bClickRate)) {
                winner = 'Version A';
            }
            
            const row = [
                test.id,
                test.settings.testType,
                test.startTime,
                test.endTime,
                test.status,
                test.results.versionA.sent,
                test.results.versionA.opened,
                aOpenRate,
                test.results.versionA.clicked,
                aClickRate,
                test.results.versionA.converted,
                test.results.versionA.unsubscribed,
                test.results.versionB.sent,
                test.results.versionB.opened,
                bOpenRate,
                test.results.versionB.clicked,
                bClickRate,
                test.results.versionB.converted,
                test.results.versionB.unsubscribed,
                openRateDiff,
                clickRateDiff,
                winner
            ];
            
            csv += row.join(',') + '\n';
        });
        
        return csv;
    };
    
    // ÂàùÊúüÂåñÊôÇ„Å´„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
    abTestManager.loadTestData();

    // ================================
    // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Éï„Ç°„Ç§„É´Ê∑ª‰ªòÊ©üËÉΩ
    // ================================
    
    // „Éï„Ç°„Ç§„É´ÁÆ°ÁêÜ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
    const fileAttachmentManager = {
        attachedFiles: [],
        maxFileSize: 10 * 1024 * 1024, // 10MB
        maxFiles: 5,
        maxTotalSize: 25 * 1024 * 1024, // 25MB
        allowedTypes: ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'application/zip', 
                      'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                      'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
        
        // „Éï„Ç°„Ç§„É´„ÇíËøΩÂä†
        addFile(file) {
            // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
            if (!this.validateFile(file)) {
                return false;
            }
            
            // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
            if (this.attachedFiles.find(f => f.name === file.name && f.size === file.size)) {
                alert('Âêå„Åò„Éï„Ç°„Ç§„É´„ÅåÊó¢„Å´Ê∑ª‰ªò„Åï„Çå„Å¶„ÅÑ„Åæ„Åô: ' + file.name);
                return false;
            }
            
            // „Éï„Ç°„Ç§„É´ÊÉÖÂ†±„Çí‰ΩúÊàê
            const fileInfo = {
                id: 'file_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                file: file,
                name: file.name,
                size: file.size,
                type: file.type,
                isImage: file.type.startsWith('image/'),
                previewUrl: null,
                insertedInEmail: false,
                uploadDate: new Date().toISOString()
            };
            
            // ÁîªÂÉè„ÅÆÂ†¥Âêà„ÅØ„Éó„É¨„Éì„É•„ÉºURL„Çí‰ΩúÊàê
            if (fileInfo.isImage) {
                fileInfo.previewUrl = URL.createObjectURL(file);
            }
            
            this.attachedFiles.push(fileInfo);
            this.updateFileList();
            this.updateStatistics();
            
            console.log('„Éï„Ç°„Ç§„É´ËøΩÂä†:', fileInfo);
            return true;
        },
        
        // „Éï„Ç°„Ç§„É´„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
        validateFile(file) {
            // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ
            if (file.size > this.maxFileSize) {
                alert(`„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åô„Åé„Åæ„Åô: ${file.name}\nÊúÄÂ§ß„Çµ„Ç§„Ç∫: ${this.formatFileSize(this.maxFileSize)}`);
                return false;
            }
            
            // „Éï„Ç°„Ç§„É´Êï∞Âà∂Èôê
            if (this.attachedFiles.length >= this.maxFiles) {
                alert(`Ê∑ª‰ªò„Éï„Ç°„Ç§„É´Êï∞„Åå‰∏äÈôê„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åæ„Åô (ÊúÄÂ§ß${this.maxFiles}„Éï„Ç°„Ç§„É´)`);
                return false;
            }
            
            // ÂêàË®à„Çµ„Ç§„Ç∫Âà∂Èôê
            const totalSize = this.getTotalFileSize() + file.size;
            if (totalSize > this.maxTotalSize) {
                alert(`ÂêàË®à„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Åå‰∏äÈôê„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åæ„Åô\n‰∏äÈôê: ${this.formatFileSize(this.maxTotalSize)}\nÁèæÂú®: ${this.formatFileSize(totalSize)}`);
                return false;
            }
            
            // „Éï„Ç°„Ç§„É´ÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
            if (!this.allowedTypes.includes(file.type)) {
                alert(`ÂØæÂøú„Åó„Å¶„ÅÑ„Å™„ÅÑ„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„Åß„Åô: ${file.name}\nÂØæÂøúÂΩ¢Âºè: JPG, PNG, GIF, PDF, ZIP, DOC, XLS`);
                return false;
            }
            
            return true;
        },
        
        // „Éï„Ç°„Ç§„É´ÂâäÈô§
        removeFile(fileId) {
            const index = this.attachedFiles.findIndex(f => f.id === fileId);
            if (index !== -1) {
                const fileInfo = this.attachedFiles[index];
                
                // „Éó„É¨„Éì„É•„ÉºURL„ÇíÂâäÈô§
                if (fileInfo.previewUrl) {
                    URL.revokeObjectURL(fileInfo.previewUrl);
                }
                
                this.attachedFiles.splice(index, 1);
                this.updateFileList();
                this.updateStatistics();
                
                console.log('„Éï„Ç°„Ç§„É´ÂâäÈô§:', fileInfo.name);
            }
        },
        
        // ÂÖ®„Éï„Ç°„Ç§„É´ÂâäÈô§
        clearAllFiles() {
            this.attachedFiles.forEach(fileInfo => {
                if (fileInfo.previewUrl) {
                    URL.revokeObjectURL(fileInfo.previewUrl);
                }
            });
            
            this.attachedFiles = [];
            this.updateFileList();
            this.updateStatistics();
            
            // UI„ÇíÈö†„Åô
            document.getElementById('attachedFilesList').style.display = 'none';
            document.getElementById('insertedImagesPreview').style.display = 'none';
        },
        
        // „Éï„Ç°„Ç§„É´„É™„Çπ„ÉàË°®Á§∫„ÇíÊõ¥Êñ∞
        updateFileList() {
            const container = document.getElementById('fileListContainer');
            const listSection = document.getElementById('attachedFilesList');
            
            if (this.attachedFiles.length === 0) {
                listSection.style.display = 'none';
                return;
            }
            
            listSection.style.display = 'block';
            
            let html = '';
            this.attachedFiles.forEach(fileInfo => {
                const isImage = fileInfo.isImage;
                const icon = this.getFileIcon(fileInfo.type);
                
                html += `
                    <div class="file-item" style="display: flex; align-items: center; padding: 12px; border: 1px solid #e5e7eb; border-radius: 8px; margin-bottom: 10px; background: ${isImage ? '#f0f9ff' : '#f9fafb'};">
                        ${isImage ? 
                            `<img src="${fileInfo.previewUrl}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 6px; margin-right: 15px;">` :
                            `<div style="width: 60px; height: 60px; background: #e5e7eb; border-radius: 6px; margin-right: 15px; display: flex; align-items: center; justify-content: center; font-size: 1.5rem;">${icon}</div>`
                        }
                        <div style="flex: 1; min-width: 0;">
                            <div style="font-weight: 600; color: #374151; margin-bottom: 4px;">${fileInfo.name}</div>
                            <div style="font-size: 0.85rem; color: #6b7280; margin-bottom: 4px;">
                                ${this.formatFileSize(fileInfo.size)} | ${this.getFileTypeLabel(fileInfo.type)}
                            </div>
                            <div style="font-size: 0.75rem; color: #9ca3af;">
                                ${new Date(fileInfo.uploadDate).toLocaleString('ja-JP')}
                            </div>
                        </div>
                        <div style="display: flex; gap: 8px;">
                            ${isImage ? `<button onclick="fileAttachmentManager.insertImageIntoEmail('${fileInfo.id}')" class="btn btn-info" style="padding: 6px 12px; font-size: 0.8rem;">üìß ÊåøÂÖ•</button>` : ''}
                            <button onclick="fileAttachmentManager.previewFile('${fileInfo.id}')" class="btn btn-secondary" style="padding: 6px 12px; font-size: 0.8rem;">üëÄ</button>
                            <button onclick="fileAttachmentManager.removeFile('${fileInfo.id}')" class="btn btn-danger" style="padding: 6px 12px; font-size: 0.8rem;">üóëÔ∏è</button>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        },
        
        // Áµ±Ë®àÊÉÖÂ†±„ÇíÊõ¥Êñ∞
        updateStatistics() {
            const totalFiles = this.attachedFiles.length;
            const totalSize = this.getTotalFileSize();
            const imageFiles = this.attachedFiles.filter(f => f.isImage).length;
            const documentFiles = totalFiles - imageFiles;
            const usagePercentage = Math.round((totalSize / this.maxTotalSize) * 100);
            
            document.getElementById('totalFileCount').textContent = totalFiles;
            document.getElementById('totalFileSize').textContent = this.formatFileSize(totalSize);
            document.getElementById('imageFileCount').textContent = imageFiles;
            document.getElementById('documentFileCount').textContent = documentFiles;
            document.getElementById('usagePercentage').textContent = usagePercentage + '%';
            document.getElementById('usageBar').style.width = Math.min(usagePercentage, 100) + '%';
            
            // „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„ÅÆËâ≤„ÇíÂ§âÊõ¥
            const usageBar = document.getElementById('usageBar');
            if (usagePercentage < 50) {
                usageBar.style.background = 'linear-gradient(90deg, #10b981, #3b82f6)';
            } else if (usagePercentage < 80) {
                usageBar.style.background = 'linear-gradient(90deg, #f59e0b, #ef4444)';
            } else {
                usageBar.style.background = 'linear-gradient(90deg, #ef4444, #dc2626)';
            }
        },
        
        // ÁîªÂÉè„Çí„É°„Éº„É´„Å´ÊåøÂÖ•
        insertImageIntoEmail(fileId) {
            const fileInfo = this.attachedFiles.find(f => f.id === fileId);
            if (!fileInfo || !fileInfo.isImage) return;
            
            const insertPosition = document.getElementById('imageInsertPosition').value;
            const size = document.getElementById('imageSize').value;
            const alignment = document.getElementById('imageAlignment').value;
            const altText = document.getElementById('imageAltText').value || fileInfo.name;
            const linkUrl = document.getElementById('imageLinkUrl').value;
            const roundedCorners = document.getElementById('imageRoundedCorners').checked;
            const shadow = document.getElementById('imageShadow').checked;
            const border = document.getElementById('imageBorder').checked;
            
            // ÁîªÂÉè„Çµ„Ç§„Ç∫„ÇíÊ±∫ÂÆö
            let width = 400;
            switch (size) {
                case 'small': width = 200; break;
                case 'medium': width = 400; break;
                case 'large': width = 600; break;
                case 'full': width = '100%'; break;
                case 'custom':
                    const customWidth = document.getElementById('customImageWidth').value;
                    width = customWidth ? parseInt(customWidth) : 400;
                    break;
            }
            
            // ÁîªÂÉèHTML„ÇíÁîüÊàê
            let imageHtml = '';
            let styles = '';
            
            if (roundedCorners) styles += 'border-radius: 8px; ';
            if (shadow) styles += 'box-shadow: 0 4px 12px rgba(0,0,0,0.15); ';
            if (border) styles += 'border: 2px solid #e5e7eb; ';
            
            const alignmentStyle = alignment === 'center' ? 'display: block; margin: 0 auto;' : 
                                 alignment === 'right' ? 'float: right; margin-left: 15px;' : 
                                 'float: left; margin-right: 15px;';
            
            imageHtml = `<img src="${fileInfo.previewUrl}" alt="${altText}" style="width: ${width}px; ${styles} ${alignmentStyle}">`;
            
            if (linkUrl) {
                imageHtml = `<a href="${linkUrl}" target="_blank">${imageHtml}</a>`;
            }
            
            // „É°„Éº„É´Êú¨Êñá„Å´ÊåøÂÖ•
            const mainContent = document.getElementById('mainContent');
            if (mainContent) {
                const currentContent = mainContent.value;
                const insertText = `\n\n${imageHtml}\n\n`;
                mainContent.value = currentContent + insertText;
                
                fileInfo.insertedInEmail = true;
                this.updateInsertedImagesPreview();
                
                alert(`ÁîªÂÉè "${fileInfo.name}" „Çí„É°„Éº„É´„Å´ÊåøÂÖ•„Åó„Åæ„Åó„Åü`);
            }
        },
        
        // ÊåøÂÖ•Ê∏à„ÅøÁîªÂÉè„Éó„É¨„Éì„É•„Éº„ÇíÊõ¥Êñ∞
        updateInsertedImagesPreview() {
            const insertedImages = this.attachedFiles.filter(f => f.insertedInEmail && f.isImage);
            const previewSection = document.getElementById('insertedImagesPreview');
            const container = document.getElementById('imagePreviewContainer');
            
            if (insertedImages.length === 0) {
                previewSection.style.display = 'none';
                return;
            }
            
            previewSection.style.display = 'block';
            
            let html = '';
            insertedImages.forEach(fileInfo => {
                html += `
                    <div style="text-align: center; padding: 15px; background: #f8fafc; border-radius: 8px; border: 2px solid #0ea5e9;">
                        <img src="${fileInfo.previewUrl}" style="max-width: 100%; max-height: 150px; object-fit: cover; border-radius: 6px; margin-bottom: 10px;">
                        <div style="font-weight: 600; color: #374151; margin-bottom: 5px;">${fileInfo.name}</div>
                        <div style="font-size: 0.8rem; color: #6b7280;">${this.formatFileSize(fileInfo.size)}</div>
                        <button onclick="fileAttachmentManager.removeFromEmail('${fileInfo.id}')" class="btn btn-secondary" style="margin-top: 10px; padding: 4px 8px; font-size: 0.75rem;">‚ùå ÂâäÈô§</button>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        },
        
        // „É°„Éº„É´„Åã„ÇâÁîªÂÉè„ÇíÂâäÈô§
        removeFromEmail(fileId) {
            const fileInfo = this.attachedFiles.find(f => f.id === fileId);
            if (fileInfo) {
                fileInfo.insertedInEmail = false;
                this.updateInsertedImagesPreview();
                
                // „É°„Éº„É´Êú¨Êñá„Åã„Çâ„ÇÇÁîªÂÉè„ÇíÂâäÈô§„Åô„ÇãÂá¶ÁêÜ
                // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØÊ≠£Ë¶èË°®Áèæ„ÅßÁîªÂÉè„Çø„Ç∞„ÇíË¶ã„Å§„Åë„Å¶ÂâäÈô§„Åô„Çã
                const mainContent = document.getElementById('mainContent');
                if (mainContent) {
                    // Á∞°ÊòìÁöÑ„Å™ÂâäÈô§ÔºàÂÆüÈöõ„ÅØ„Çà„ÇäÁ≤æÂØÜ„Å™Âá¶ÁêÜ„ÅåÂøÖË¶ÅÔºâ
                    let content = mainContent.value;
                    const regex = new RegExp(`<img[^>]+src="${fileInfo.previewUrl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}"[^>]*>`, 'gi');
                    content = content.replace(regex, '');
                    mainContent.value = content;
                }
                
                alert(`ÁîªÂÉè "${fileInfo.name}" „Çí„É°„Éº„É´„Åã„ÇâÂâäÈô§„Åó„Åæ„Åó„Åü`);
            }
        },
        
        // „Éï„Ç°„Ç§„É´„Éó„É¨„Éì„É•„Éº
        previewFile(fileId) {
            const fileInfo = this.attachedFiles.find(f => f.id === fileId);
            if (!fileInfo) return;
            
            if (fileInfo.isImage) {
                // ÁîªÂÉè„Éó„É¨„Éì„É•„Éº„ÇíÊñ∞„Åó„ÅÑ„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅßË°®Á§∫
                const previewWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes');
                previewWindow.document.write(`
                    <!DOCTYPE html>
                    <html>
                        <head>
                            <title>ÁîªÂÉè„Éó„É¨„Éì„É•„Éº - ${fileInfo.name}</title>
                            <style>
                                body { margin: 0; padding: 20px; background: #f9fafb; display: flex; flex-direction: column; align-items: center; }
                                img { max-width: 100%; max-height: 80vh; border-radius: 8px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); }
                                .info { background: white; padding: 15px; border-radius: 8px; margin-top: 15px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
                            </style>
                        </head>
                        <body>
                            <img src="${fileInfo.previewUrl}" alt="${fileInfo.name}">
                            <div class="info">
                                <h3>${fileInfo.name}</h3>
                                <p>„Çµ„Ç§„Ç∫: ${this.formatFileSize(fileInfo.size)}</p>
                                <p>ÂΩ¢Âºè: ${fileInfo.type}</p>
                            </div>
                        </body>
                    </html>
                `);
                previewWindow.document.close();
            } else {
                // ÈùûÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅÆÊÉÖÂ†±Ë°®Á§∫
                alert(`„Éï„Ç°„Ç§„É´ÊÉÖÂ†±:\n\nÂêçÂâç: ${fileInfo.name}\n„Çµ„Ç§„Ç∫: ${this.formatFileSize(fileInfo.size)}\nÂΩ¢Âºè: ${fileInfo.type}\n\n„Åì„ÅÆ„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„ÅØ„Éó„É¨„Éì„É•„Éº„Åß„Åç„Åæ„Åõ„Çì„ÄÇ`);
            }
        },
        
        // ÁîªÂÉèÊúÄÈÅ©ÂåñÔºàÁ∞°ÊòìÁâàÔºâ
        optimizeImages() {
            const imageFiles = this.attachedFiles.filter(f => f.isImage);
            if (imageFiles.length === 0) {
                alert('ÊúÄÈÅ©Âåñ„Åô„ÇãÁîªÂÉè„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
                return;
            }
            
            if (confirm(`${imageFiles.length}ÂÄã„ÅÆÁîªÂÉè„ÇíÊúÄÈÅ©Âåñ„Åó„Åæ„Åô„ÅãÔºü\n\nÊúÄÈÅ©Âåñ„Å´„Çà„Çä„ÄÅ„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂâäÊ∏õ„Åï„Çå„ÄÅ„É°„Éº„É´ÈÄÅ‰ø°ÊôÇÈñì„ÅåÁü≠Á∏Æ„Åï„Çå„Åæ„Åô„ÄÇ`)) {
                // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ Canvas API „Çí‰ΩøÁî®„Åó„Å¶ÁîªÂÉè„ÇíÂúßÁ∏Æ
                alert('ÁîªÂÉèÊúÄÈÅ©ÂåñÊ©üËÉΩ„ÅØÈñãÁô∫‰∏≠„Åß„Åô„ÄÇ\n\nÁèæÂú®„ÅØÊâãÂãï„ÅßÁîªÂÉè„Çµ„Ç§„Ç∫„ÇíË™øÊï¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
            }
        },
        
        // „Éï„Ç°„Ç§„É´ÂúßÁ∏Æ
        compressFiles() {
            if (this.attachedFiles.length === 0) {
                alert('ÂúßÁ∏Æ„Åô„Çã„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
                return;
            }
            
            alert('„Éï„Ç°„Ç§„É´ÂúßÁ∏ÆÊ©üËÉΩ„ÅØÈñãÁô∫‰∏≠„Åß„Åô„ÄÇ\n\nZIP„Éï„Ç°„Ç§„É´„Å®„Åó„Å¶Ê∑ª‰ªò„Åô„Çã„Åì„Å®„ÇíÊ§úË®é„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        },
        
        // Ê∑ª‰ªò„Éï„Ç°„Ç§„É´ÂÖ®‰Ωì„ÅÆ„Éó„É¨„Éì„É•„Éº
        previewAttachments() {
            if (this.attachedFiles.length === 0) {
                alert('„Éó„É¨„Éì„É•„Éº„Åô„ÇãÊ∑ª‰ªò„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
                return;
            }
            
            const previewWindow = window.open('', '_blank', 'width=1000,height=700,scrollbars=yes');
            let html = `
                <!DOCTYPE html>
                <html>
                    <head>
                        <title>Ê∑ª‰ªò„Éï„Ç°„Ç§„É´„Éó„É¨„Éì„É•„Éº</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; background: #f9fafb; }
                            .file-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }
                            .file-card { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
                            .file-card img { max-width: 100%; height: 150px; object-fit: cover; border-radius: 6px; }
                            .file-icon { width: 100%; height: 150px; background: #e5e7eb; border-radius: 6px; display: flex; align-items: center; justify-content: center; font-size: 3rem; }
                        </style>
                    </head>
                    <body>
                        <h1>üìé Ê∑ª‰ªò„Éï„Ç°„Ç§„É´‰∏ÄË¶ß (${this.attachedFiles.length}‰ª∂)</h1>
                        <div class="file-grid">
            `;
            
            this.attachedFiles.forEach(fileInfo => {
                html += `
                    <div class="file-card">
                        ${fileInfo.isImage ? 
                            `<img src="${fileInfo.previewUrl}" alt="${fileInfo.name}">` :
                            `<div class="file-icon">${this.getFileIcon(fileInfo.type)}</div>`
                        }
                        <h3>${fileInfo.name}</h3>
                        <p>„Çµ„Ç§„Ç∫: ${this.formatFileSize(fileInfo.size)}</p>
                        <p>ÂΩ¢Âºè: ${this.getFileTypeLabel(fileInfo.type)}</p>
                    </div>
                `;
            });
            
            html += `
                        </div>
                    </body>
                </html>
            `;
            
            previewWindow.document.write(html);
            previewWindow.document.close();
        },
        
        // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„É°„ÇΩ„ÉÉ„Éâ
        getTotalFileSize() {
            return this.attachedFiles.reduce((total, file) => total + file.size, 0);
        },
        
        formatFileSize(bytes) {
            if (bytes === 0) return '0KB';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + sizes[i];
        },
        
        getFileIcon(type) {
            if (type.startsWith('image/')) return 'üñºÔ∏è';
            if (type === 'application/pdf') return 'üìÑ';
            if (type === 'application/zip') return 'üóúÔ∏è';
            if (type.includes('word')) return 'üìù';
            if (type.includes('excel') || type.includes('spreadsheet')) return 'üìä';
            return 'üìé';
        },
        
        getFileTypeLabel(type) {
            const labels = {
                'image/jpeg': 'JPEGÁîªÂÉè',
                'image/png': 'PNGÁîªÂÉè', 
                'image/gif': 'GIFÁîªÂÉè',
                'application/pdf': 'PDF„Éï„Ç°„Ç§„É´',
                'application/zip': 'ZIP„Éï„Ç°„Ç§„É´',
                'application/msword': 'WordÊñáÊõ∏',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'WordÊñáÊõ∏',
                'application/vnd.ms-excel': 'ExcelÊñáÊõ∏',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'ExcelÊñáÊõ∏'
            };
            return labels[type] || '„Åù„ÅÆ‰ªñ';
        }
    };

    // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    const dropZone = document.getElementById('dropZone');
    const fileInput = document.getElementById('fileInput');
    
    // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Çæ„Éº„É≥„ÅÆ„Ç§„Éô„É≥„Éà
    dropZone?.addEventListener('click', () => {
        fileInput?.click();
    });
    
    dropZone?.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.style.borderColor = '#059669';
        dropZone.style.background = '#f0fdf4';
        dropZone.querySelector('div').style.color = '#059669';
    });
    
    dropZone?.addEventListener('dragleave', (e) => {
        e.preventDefault();
        dropZone.style.borderColor = '#d1d5db';
        dropZone.style.background = '#f9fafb';
        dropZone.querySelector('div').style.color = '#9ca3af';
    });
    
    dropZone?.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.style.borderColor = '#d1d5db';
        dropZone.style.background = '#f9fafb';
        dropZone.querySelector('div').style.color = '#9ca3af';
        
        const files = Array.from(e.dataTransfer.files);
        files.forEach(file => {
            fileAttachmentManager.addFile(file);
        });
    });
    
    // „Éï„Ç°„Ç§„É´ÂÖ•Âäõ„ÅÆ„Ç§„Éô„É≥„Éà
    fileInput?.addEventListener('change', (e) => {
        const files = Array.from(e.target.files);
        files.forEach(file => {
            fileAttachmentManager.addFile(file);
        });
        
        // ÂÖ•Âäõ„Çí„ÇØ„É™„Ç¢
        e.target.value = '';
    });
    
    // ÁîªÂÉè„Çµ„Ç§„Ç∫ÈÅ∏Êäû„ÅÆÂ§âÊõ¥„Ç§„Éô„É≥„Éà
    document.getElementById('imageSize')?.addEventListener('change', function() {
        const customSettings = document.getElementById('customSizeSettings');
        if (this.value === 'custom') {
            customSettings.style.display = 'block';
        } else {
            customSettings.style.display = 'none';
        }
    });
    
    // „Éï„Ç°„Ç§„É´Êìç‰Ωú„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà
    document.getElementById('clearAllFilesBtn')?.addEventListener('click', () => {
        if (confirm('ÂÖ®„Å¶„ÅÆÊ∑ª‰ªò„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
            fileAttachmentManager.clearAllFiles();
        }
    });
    
    document.getElementById('compressFilesBtn')?.addEventListener('click', () => {
        fileAttachmentManager.compressFiles();
    });
    
    document.getElementById('optimizeImagesBtn')?.addEventListener('click', () => {
        fileAttachmentManager.optimizeImages();
    });
    
    document.getElementById('previewAttachmentsBtn')?.addEventListener('click', () => {
        fileAttachmentManager.previewAttachments();
    });

    // ‰∫àÊÉ≥ÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„ÅÆÂ§âÊõ¥„ÇÇÁõ£Ë¶ñ
    document.getElementById('predictionsContainer')?.addEventListener('input', clearPreview);
    
    // CTA„Éú„Çø„É≥„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÅÆÂ§âÊõ¥„ÇÇÁõ£Ë¶ñ
    document.getElementById('showCtaButton')?.addEventListener('change', clearPreview);

    // Êñ∞„Åó„ÅÑ„Ç∑„É≥„Éó„É´„Å™Â±•Ê≠¥Ë™≠„ÅøËæº„ÅøÈñ¢Êï∞
    function loadHistory() {
        const newHistoryArea = document.getElementById('newHistoryArea');
        if (!newHistoryArea) {
            console.error('newHistoryArea„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        try {
            // LocalStorage„Åã„ÇâÂ±•Ê≠¥„ÇíË™≠„ÅøËæº„Åø
            const existingHistory = localStorage.getItem('newsletter-history');
            const history = existingHistory ? JSON.parse(existingHistory) : [];
            
            console.log('LocalStorage„Åã„ÇâË™≠„ÅøËæº„Çì„Å†Â±•Ê≠¥:', history.length + '‰ª∂');
            
            if (history.length > 0) {
                let historyHTML = '';
                // ÊúÄÊñ∞10‰ª∂„ÅÆ„ÅøË°®Á§∫
                history.slice(0, 10).forEach(item => {
                    // Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Éà
                    const date = item.scheduledAt ? 
                        new Date(item.scheduledAt).toLocaleString('ja-JP') : 
                        new Date(item.createdAt).toLocaleString('ja-JP');
                    
                    // „Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫Ôºà72ÊôÇÈñìÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ‰ªò„ÅçÔºâ
                    let statusText = 'ÈÖç‰ø°Ê∏à„Åø';
                    let statusIcon = '‚úÖ';
                    let statusColor = '#16a34a';
                    
                    if (item.status === 'scheduled') {
                        const scheduledDate = new Date(item.scheduledAt);
                        const createdDate = new Date(item.timestamp);
                        const hoursDiff = (scheduledDate - createdDate) / (1000 * 60 * 60);
                        
                        if (hoursDiff > 72) {
                            statusText = '‰∫àÁ¥ÑÊ∏à„ÅøÔºàÈÖç‰ø°‰øùË®º„Å™„ÅóÔºâ';
                            statusIcon = '‚ö†Ô∏è';
                            statusColor = '#dc2626';
                        } else {
                            statusText = '‰∫àÁ¥ÑÊ∏à„Åø';
                            statusIcon = 'üìÖ';
                            statusColor = '#3b82f6';
                        }
                    }
                    
                    // „Éó„É©„É≥Ë°®Á§∫„ÇíÊó•Êú¨Ë™ûÂåñ
                    const planText = {
                        'all': 'ÂÖ®‰ºöÂì°',
                        'free': 'ÁÑ°Êñô‰ºöÂì°',
                        'paid': 'ÊúâÊñô‰ºöÂì°',
                        'standard': 'Standard‰ºöÂì°',
                        'premium': 'Premium‰ºöÂì°'
                    }[item.targetPlan] || item.targetPlan;
                    
                    historyHTML += `
                        <div class="new-history-item">
                            <div class="new-history-title">
                                ${item.subject}
                                <span class="new-status-sent">${statusText} ${statusIcon}</span>
                            </div>
                            <div class="new-history-info">
                                ÂØæË±°: ${planText} | ÈÖç‰ø°Êï∞: ${item.recipientCount || 0}‰ª∂ | ÈÖç‰ø°Êó•ÊôÇ: ${date}
                            </div>
                        </div>
                    `;
                });
                newHistoryArea.innerHTML = historyHTML;
            } else {
                newHistoryArea.innerHTML = `
                    <div class="new-no-history">
                        üìÑ „Åæ„Å†ÈÖç‰ø°Â±•Ê≠¥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì<br>
                        <small>„É°„É´„Éû„Ç¨„ÇíÈÖç‰ø°„Åô„Çã„Å®„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô</small>
                    </div>
                `;
            }
            
            console.log('‚úÖ Â±•Ê≠¥Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
        } catch (error) {
            console.error('Â±•Ê≠¥Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            newHistoryArea.innerHTML = `
                <div class="new-no-history">
                    ‚ö†Ô∏è Â±•Ê≠¥„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü<br>
                    <small>${error.message}</small>
                </div>
            `;
        }
    }

    // Â±•Ê≠¥„Çí‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞
    function saveHistoryToLocal(historyItem) {
        try {
            const existingHistory = localStorage.getItem('newsletter-history');
            const history = existingHistory ? JSON.parse(existingHistory) : [];
            
            // Êñ∞„Åó„ÅÑÂ±•Ê≠¥„ÇíÂÖàÈ†≠„Å´ËøΩÂä†
            history.unshift({
                ...historyItem,
                id: Date.now().toString(), // Á∞°ÊòìID
                createdAt: new Date().toISOString()
            });
            
            // ÊúÄÂ§ß50‰ª∂„Åæ„Åß‰øùÊåÅ
            const limitedHistory = history.slice(0, 50);
            
            localStorage.setItem('newsletter-history', JSON.stringify(limitedHistory));
            console.log('Â±•Ê≠¥„ÇíLocalStorage„Å´‰øùÂ≠ò:', historyItem);
        } catch (error) {
            console.error('Â±•Ê≠¥‰øùÂ≠ò„Ç®„É©„Éº:', error);
        }
    }

    // ÂÆüÈöõ„ÅÆÈÖç‰ø°Áä∂Ê≥ÅÁ¢∫Ë™çÔºàBrevo API„Åã„ÇâÁõ¥Êé•ÂèñÂæóÔºâ
    async function checkRealDeliveryStatus() {
        const button = document.getElementById('checkRealDeliveryBtn');
        const historyArea = document.getElementById('newHistoryArea');
        
        // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã
        button.textContent = 'üîç Á¢∫Ë™ç‰∏≠...';
        button.disabled = true;
        
        historyArea.innerHTML = `
            <div style="text-align: center; padding: 20px; color: #3b82f6;">
                <div style="font-size: 2rem; margin-bottom: 10px;">üîç</div>
                <div>Brevo API„Åã„ÇâÈÖç‰ø°Áä∂Ê≥Å„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÅÑ„Åæ„Åô...</div>
                <div style="font-size: 0.9rem; color: #6b7280; margin-top: 5px;">ÂÆüÈöõ„ÅÆÈÄÅ‰ø°Â±•Ê≠¥„Å®„Çπ„Ç±„Ç∏„É•„Éº„É´Áä∂Ê≥Å„ÇíÂèñÂæó‰∏≠</div>
            </div>
        `;

        try {
            // Êú¨Áï™Áí∞Â¢É„ÅÆcheck-delivery-status FunctionÂëº„Å≥Âá∫„Åó
            const response = await fetch('/.netlify/functions/check-delivery-status', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                displayRealDeliveryStatus(data.data);
            } else {
                throw new Error(data.error || 'ÈÖç‰ø°Áä∂Ê≥Å„ÅÆÂèñÂæó„Å´Â§±Êïó');
            }

        } catch (error) {
            console.error('ÈÖç‰ø°Áä∂Ê≥ÅÁ¢∫Ë™ç„Ç®„É©„Éº:', error);
            
            historyArea.innerHTML = `
                <div style="text-align: center; padding: 20px; color: #dc2626;">
                    <div style="font-size: 2rem; margin-bottom: 10px;">‚ùå</div>
                    <div style="font-weight: 600;">ÈÖç‰ø°Áä∂Ê≥ÅÁ¢∫Ë™ç„Ç®„É©„Éº</div>
                    <div style="font-size: 0.9rem; margin-top: 10px;">${error.message}</div>
                    <div style="font-size: 0.8rem; color: #6b7280; margin-top: 10px;">
                        Êú¨Áï™Áí∞Â¢É„ÅßNetlify Functions„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                    </div>
                </div>
            `;
        } finally {
            // „Éú„Çø„É≥„ÇíÂÖÉ„Å´Êàª„Åô
            button.textContent = 'üîç ÂÆüÈöõ„ÅÆÈÖç‰ø°Áä∂Ê≥ÅÁ¢∫Ë™ç';
            button.disabled = false;
        }
    }

    // ÂÆüÈöõ„ÅÆÈÖç‰ø°Áä∂Ê≥ÅË°®Á§∫
    function displayRealDeliveryStatus(data) {
        const historyArea = document.getElementById('newHistoryArea');
        const { account, recentEmails, scheduledEmails, summary, stats, debug } = data;

        let html = `
            <div style="background: #f0fdf4; border: 2px solid #16a34a; border-radius: 10px; padding: 20px; margin-bottom: 20px;">
                <h3 style="margin: 0 0 15px 0; color: #15803d;">‚úÖ BrevoÈÖç‰ø°Áä∂Ê≥ÅÔºà„É™„Ç¢„É´„Çø„Ç§„É†Ôºâ</h3>
                
                <!-- „Ç¢„Ç´„Ç¶„É≥„ÉàÊÉÖÂ†± -->
                <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                    <h4 style="margin: 0 0 10px 0; color: #374151;">üìä „Ç¢„Ç´„Ç¶„É≥„ÉàÊ¶ÇË¶Å</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                        <div>
                            <div style="font-size: 0.8rem; color: #6b7280;">„Ç¢„Ç´„Ç¶„É≥„Éà</div>
                            <div style="font-weight: 600;">${account.email || 'N/A'}</div>
                        </div>
                        <div>
                            <div style="font-size: 0.8rem; color: #6b7280;">„Éó„É©„É≥</div>
                            <div style="font-weight: 600;">${account.plan || 'N/A'}</div>
                        </div>
                        <div>
                            <div style="font-size: 0.8rem; color: #6b7280;">‰ºöÁ§æÂêç</div>
                            <div style="font-weight: 600;">${account.companyName || 'N/A'}</div>
                        </div>
                        <div>
                            <div style="font-size: 0.8rem; color: #6b7280;">„Çπ„ÉÜ„Éº„Çø„Çπ</div>
                            <div style="font-weight: 600; color: ${summary.accountStatus === 'active' ? '#16a34a' : '#dc2626'};">
                                ${summary.accountStatus === 'active' ? '‚úÖ „Ç¢„ÇØ„ÉÜ„Ç£„Éñ' : '‚ùå ‰∏çÊòé'}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Áµ±Ë®à„Çµ„Éû„É™„Éº -->
                <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                    <h4 style="margin: 0 0 10px 0; color: #374151;">üìà ÈÖç‰ø°Áµ±Ë®àÔºà24ÊôÇÈñìÔºâ</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; text-align: center;">
                        <div style="background: #f0f9ff; border-radius: 6px; padding: 10px;">
                            <div style="font-size: 1.5rem; color: #3b82f6;">${summary.totalSent24h}</div>
                            <div style="font-size: 0.8rem; color: #6b7280;">ÈÄÅ‰ø°Ê∏à„Åø</div>
                        </div>
                        <div style="background: #fef3c7; border-radius: 6px; padding: 10px;">
                            <div style="font-size: 1.5rem; color: #d97706;">${summary.pendingScheduled}</div>
                            <div style="font-size: 0.8rem; color: #6b7280;">‰∫àÁ¥ÑÂæÖ„Å°</div>
                        </div>
                    </div>
                </div>
        `;

        // „Çπ„Ç±„Ç∏„É•„Éº„É´ÈÖç‰ø°‰∏ÄË¶ß
        if (scheduledEmails && scheduledEmails.length > 0) {
            html += `
                <div style="background: #fef3c7; border: 2px solid #f59e0b; border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                    <h4 style="margin: 0 0 10px 0; color: #d97706;">‚è∞ „Çπ„Ç±„Ç∏„É•„Éº„É´ÈÖç‰ø°‰∏ÄË¶ß</h4>
                    ${scheduledEmails.map(email => `
                        <div style="background: white; border-radius: 6px; padding: 10px; margin-bottom: 8px;">
                            <div style="font-weight: 600; color: #374151;">${email.subject || 'N/A'}</div>
                            <div style="font-size: 0.9rem; color: #6b7280;">
                                ‰∫àÂÆö: ${email.scheduledAt ? new Date(email.scheduledAt).toLocaleString('ja-JP') : 'N/A'}
                            </div>
                            <div style="font-size: 0.8rem; color: #6b7280;">
                                ÂÆõÂÖà: ${email.to ? email.to.length : 0}‰ª∂ | 
                                „Çπ„ÉÜ„Éº„Çø„Çπ: ${email.status || 'unknown'}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } else {
            html += `
                <div style="background: #f0fdf4; border-radius: 8px; padding: 15px; margin-bottom: 15px; text-align: center;">
                    <div style="color: #16a34a;">‚úÖ „Çπ„Ç±„Ç∏„É•„Éº„É´ÈÖç‰ø°„Å™„Åó</div>
                    <div style="font-size: 0.9rem; color: #6b7280;">ÁèæÂú®‰∫àÁ¥ÑÂæÖ„Å°„ÅÆ„É°„Éº„É´„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</div>
                </div>
            `;
        }

        // ÊúÄËøë„ÅÆÈÖç‰ø°Â±•Ê≠¥
        if (recentEmails && recentEmails.length > 0) {
            html += `
                <div style="background: white; border-radius: 8px; padding: 15px;">
                    <h4 style="margin: 0 0 10px 0; color: #374151;">üìß ÊúÄËøë„ÅÆÈÖç‰ø°Â±•Ê≠¥Ôºà24ÊôÇÈñì‰ª•ÂÜÖÔºâ</h4>
                    <div style="max-height: 300px; overflow-y: auto;">
                        ${recentEmails.slice(0, 10).map(email => `
                            <div style="border-bottom: 1px solid #e5e7eb; padding: 8px 0;">
                                <div style="font-weight: 600; color: #374151;">${email.subject || 'N/A'}</div>
                                <div style="font-size: 0.9rem; color: #6b7280;">
                                    ÈÄÅ‰ø°Êó•ÊôÇ: ${email.date ? new Date(email.date).toLocaleString('ja-JP') : 'N/A'}
                                </div>
                                <div style="font-size: 0.8rem; color: #6b7280;">
                                    ÂÆõÂÖà: ${email.to ? email.to.length : 0}‰ª∂ | 
                                    „É°„ÉÉ„Çª„Éº„Ç∏ID: ${email.messageId || 'N/A'}
                                </div>
                                <div style="font-size: 0.8rem;">
                                    <span style="color: ${email.status === 'sent' ? '#16a34a' : '#dc2626'};">
                                        ${email.status === 'sent' ? '‚úÖ ÈÄÅ‰ø°ÊàêÂäü' : '‚ùå ÈÄÅ‰ø°Â§±Êïó'}
                                    </span>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        } else {
            html += `
                <div style="background: #fef2f2; border-radius: 8px; padding: 15px; text-align: center;">
                    <div style="color: #dc2626;">‚ö†Ô∏è ÈÖç‰ø°Â±•Ê≠¥„Å™„Åó</div>
                    <div style="font-size: 0.9rem; color: #6b7280;">24ÊôÇÈñì‰ª•ÂÜÖ„Å´ÈÄÅ‰ø°„Åï„Çå„Åü„É°„Éº„É´„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</div>
                </div>
            `;
        }

        // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÅÆË°®Á§∫
        if (debug) {
            html += `
                <div style="background: #fef3c7; border: 2px solid #f59e0b; border-radius: 8px; padding: 15px; margin-top: 15px;">
                    <h4 style="margin: 0 0 10px 0; color: #d97706;">üîç „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±</h4>
                    <div style="font-size: 0.9rem; color: #92400e;">
                        <div>Queued Emails: ${debug.queuedEmailsCount}‰ª∂</div>
                        <div>Scheduled Campaigns: ${debug.scheduledCampaignsCount}‰ª∂</div>
                        <div>Pending Emails: ${debug.pendingEmailsCount}‰ª∂</div>
                        <div style="margin-top: 10px; padding: 10px; background: rgba(245, 158, 11, 0.1); border-radius: 4px;">
                            ‚ö†Ô∏è ${debug.message}
                        </div>
                        <div style="margin-top: 10px; font-weight: 600;">
                            üí° ÈáçË¶Å: Brevo SMTP„ÅÆ‰∫àÁ¥ÑÈÖç‰ø°„ÅØ„ÄÅÂÆüÈöõ„Å´ÈÖç‰ø°ÊôÇÂàª„Å´„Å™„Çã„Åæ„ÅßAPI„ÅßÁ¢∫Ë™ç„Åß„Åç„Å™„ÅÑ‰ªïÊßò„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô
                        </div>
                    </div>
                </div>
            `;
        }

        html += `</div>`;

        historyArea.innerHTML = html;

        // ÁµêÊûú„Çí„É≠„Ç∞„Å´Ë®òÈå≤
        console.log('ÂÆüÈöõ„ÅÆÈÖç‰ø°Áä∂Ê≥Å:', {
            totalSent: summary.totalSent24h,
            scheduled: summary.pendingScheduled,
            accountStatus: summary.accountStatus,
            debug: debug
        });
    }

    // Â±•Ê≠¥Êõ¥Êñ∞„Éú„Çø„É≥
    document.getElementById('refreshHistoryBtn')?.addEventListener('click', loadHistory);
    document.getElementById('checkRealDeliveryBtn')?.addEventListener('click', checkRealDeliveryStatus);
    
    // „Çª„Ç∞„É°„É≥„ÉàÊ©üËÉΩ
    document.getElementById('targetPlan')?.addEventListener('change', toggleSegmentSection);
    document.getElementById('previewSegmentBtn')?.addEventListener('click', previewSegment);
    
    // „Çª„Ç∞„É°„É≥„Éà„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆË°®Á§∫Âà∂Âæ°
    function toggleSegmentSection() {
        const targetPlan = document.getElementById('targetPlan')?.value;
        const segmentSection = document.getElementById('segmentSection');
        
        if (targetPlan === 'segment') {
            segmentSection.style.display = 'block';
        } else {
            segmentSection.style.display = 'none';
            // „Çª„Ç∞„É°„É≥„Éà„Ç´„Ç¶„É≥„Éà„Çí„ÇØ„É™„Ç¢
            document.getElementById('segmentCount').innerHTML = '';
        }
    }
    
    // „Çª„Ç∞„É°„É≥„ÉàÂØæË±°„É¶„Éº„Ç∂„ÉºÁ¢∫Ë™ç
    function previewSegment() {
        try {
            const segmentConditions = getSegmentConditions();
            console.log('„Çª„Ç∞„É°„É≥„ÉàÊù°‰ª∂:', segmentConditions);
            
            // „Éá„É¢Áî®„ÅÆÁ∞°ÊòìË®àÁÆóÔºàÂÆüÈöõ„ÅØAirtable API„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ôºâ
            const demoUserCount = calculateDemoSegmentSize(segmentConditions);
            
            document.getElementById('segmentCount').innerHTML = `
                <span style="background: #dbeafe; padding: 8px 15px; border-radius: 6px; color: #0c4a6e;">
                    üë• ÂØæË±°„É¶„Éº„Ç∂„Éº: Á¥Ñ${demoUserCount}Âêç
                    ${demoUserCount === 0 ? '‚ö†Ô∏è Êù°‰ª∂„Å´Ë©≤ÂΩì„Åô„Çã„É¶„Éº„Ç∂„Éº„Åå„ÅÑ„Åæ„Åõ„Çì' : '‚úÖ ÈÖç‰ø°ÂèØËÉΩ'}
                </span>
            `;
            
            if (demoUserCount > 0) {
                // „Çª„Ç∞„É°„É≥„ÉàÊù°‰ª∂„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
                const conditionText = formatSegmentConditions(segmentConditions);
                if (conditionText) {
                    document.getElementById('segmentCount').innerHTML += `
                        <div style="margin-top: 10px; padding: 10px; background: rgba(59, 130, 246, 0.1); border-radius: 6px; font-size: 0.9em;">
                            <strong>ÈÅ©Áî®Êù°‰ª∂:</strong><br>${conditionText}
                        </div>
                    `;
                }
            }
            
        } catch (error) {
            console.error('„Çª„Ç∞„É°„É≥„ÉàÁ¢∫Ë™ç„Ç®„É©„Éº:', error);
            document.getElementById('segmentCount').innerHTML = `
                <span style="color: #dc2626;">‚ö†Ô∏è „Çª„Ç∞„É°„É≥„ÉàÁ¢∫Ë™ç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</span>
            `;
        }
    }
    
    // „Çª„Ç∞„É°„É≥„ÉàÊù°‰ª∂„ÇíÂèñÂæó
    function getSegmentConditions() {
        return {
            dateFrom: document.getElementById('segmentDateFrom')?.value || null,
            dateTo: document.getElementById('segmentDateTo')?.value || null,
            activity: document.getElementById('segmentActivity')?.value || null,
            emailHistory: document.getElementById('segmentEmailHistory')?.value || null,
            tags: document.getElementById('segmentTags')?.value || null,
            excludeBounced: document.getElementById('excludeBounced')?.checked || false,
            excludeUnsubscribed: document.getElementById('excludeUnsubscribed')?.checked || false,
            excludeInactive: document.getElementById('excludeInactive')?.checked || false
        };
    }
    
    // „Éá„É¢Áî®„Çª„Ç∞„É°„É≥„Éà„Çµ„Ç§„Ç∫Ë®àÁÆó
    function calculateDemoSegmentSize(conditions) {
        let baseCount = 100; // Âü∫Êú¨„É¶„Éº„Ç∂„ÉºÊï∞Ôºà„Éá„É¢Áî®Ôºâ
        
        // ÁôªÈå≤Êó•„Å´„Çà„ÇãÁµû„ÇäËæº„Åø
        if (conditions.dateFrom || conditions.dateTo) {
            baseCount = Math.floor(baseCount * 0.7); // 30%Ê∏õ
        }
        
        // „Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„Å´„Çà„ÇãÁµû„ÇäËæº„Åø
        switch (conditions.activity) {
            case 'active':
                baseCount = Math.floor(baseCount * 0.6); // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„ÅØ60%
                break;
            case 'inactive':
                baseCount = Math.floor(baseCount * 0.3); // Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„ÅØ30%
                break;
            case 'new':
                baseCount = Math.floor(baseCount * 0.1); // Êñ∞Ë¶è„ÅØ10%
                break;
        }
        
        // „É°„Éº„É´ÈÖç‰ø°Ê≠¥„Å´„Çà„ÇãÁµû„ÇäËæº„Åø
        switch (conditions.emailHistory) {
            case 'no-email':
                baseCount = Math.floor(baseCount * 0.4);
                break;
            case 'recent-email':
                baseCount = Math.floor(baseCount * 0.2);
                break;
            case 'old-email':
                baseCount = Math.floor(baseCount * 0.5);
                break;
        }
        
        // „Çø„Ç∞„Å´„Çà„ÇãÁµû„ÇäËæº„Åø
        if (conditions.tags) {
            baseCount = Math.floor(baseCount * 0.3); // „Çø„Ç∞„ÅÇ„Çä„ÅØ30%Á®ãÂ∫¶
        }
        
        // Èô§Â§ñÊù°‰ª∂
        if (conditions.excludeBounced) baseCount = Math.floor(baseCount * 0.95);
        if (conditions.excludeUnsubscribed) baseCount = Math.floor(baseCount * 0.98);
        if (conditions.excludeInactive) baseCount = Math.floor(baseCount * 0.85);
        
        return Math.max(0, baseCount);
    }
    
    // „Çª„Ç∞„É°„É≥„ÉàÊù°‰ª∂„Çí„ÉÜ„Ç≠„Çπ„Éà„ÅßË°®Á§∫
    function formatSegmentConditions(conditions) {
        const parts = [];
        
        if (conditions.dateFrom || conditions.dateTo) {
            const from = conditions.dateFrom || 'Âà∂Èôê„Å™„Åó';
            const to = conditions.dateTo || 'Âà∂Èôê„Å™„Åó';
            parts.push(`üìÖ ÁôªÈå≤Êó•: ${from} ÔΩû ${to}`);
        }
        
        if (conditions.activity) {
            const activityText = {
                'active': '„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„É¶„Éº„Ç∂„ÉºÔºà7Êó•‰ª•ÂÜÖ„É≠„Ç∞„Ç§„É≥Ôºâ',
                'inactive': 'Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„É¶„Éº„Ç∂„ÉºÔºà7Êó•‰ª•‰∏äÊú™„É≠„Ç∞„Ç§„É≥Ôºâ',
                'new': 'Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÔºà3Êó•‰ª•ÂÜÖÁôªÈå≤Ôºâ'
            }[conditions.activity];
            parts.push(`‚ö° ${activityText}`);
        }
        
        if (conditions.emailHistory) {
            const emailText = {
                'no-email': 'Êú™ÈÖç‰ø°„É¶„Éº„Ç∂„Éº',
                'recent-email': 'ÊúÄËøëÈÖç‰ø°Ê∏à„ÅøÔºà3Êó•‰ª•ÂÜÖÔºâ',
                'old-email': 'ÈÖç‰ø°„Åã„ÇâÊôÇÈñì„ÅåÁµåÈÅéÔºà7Êó•‰ª•‰∏äÔºâ'
            }[conditions.emailHistory];
            parts.push(`üìß ${emailText}`);
        }
        
        if (conditions.tags) {
            parts.push(`üè∑Ô∏è „Çø„Ç∞: ${conditions.tags}`);
        }
        
        const excludes = [];
        if (conditions.excludeBounced) excludes.push('ÈÖç‰ø°Â§±ÊïóÂ±•Ê≠¥„ÅÇ„Çä');
        if (conditions.excludeUnsubscribed) excludes.push('ÈÖç‰ø°ÂÅúÊ≠¢Ê∏à„Åø');
        if (conditions.excludeInactive) excludes.push('30Êó•‰ª•‰∏äÊú™„É≠„Ç∞„Ç§„É≥');
        
        if (excludes.length > 0) {
            parts.push(`‚ùå Èô§Â§ñ: ${excludes.join(', ')}`);
        }
        
        return parts.join('<br>');
    }
    
    // Â±•Ê≠¥„ÇØ„É™„Ç¢„Éú„Çø„É≥
    document.getElementById('clearHistoryBtn')?.addEventListener('click', () => {
        if (confirm('ÈÖç‰ø°Â±•Ê≠¥„Çí„Åô„Åπ„Å¶ÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü\n„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ')) {
            try {
                localStorage.removeItem('newsletter-history');
                console.log('‚úÖ Â±•Ê≠¥„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü');
                loadHistory(); // Â±•Ê≠¥Ë°®Á§∫„ÇíÊõ¥Êñ∞
                alert('Â±•Ê≠¥„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü');
            } catch (error) {
                console.error('Â±•Ê≠¥„ÇØ„É™„Ç¢„Ç®„É©„Éº:', error);
                alert('Â±•Ê≠¥„ÅÆ„ÇØ„É™„Ç¢„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
            }
        }
    });
    
    // Â§±Êïó„É°„Éº„É´Á¢∫Ë™ç„Éú„Çø„É≥
    document.getElementById('showFailedEmailsBtn')?.addEventListener('click', () => {
        loadFailedEmails();
        document.getElementById('failedEmailsSection').style.display = 'block';
    });
    
    // Â§±Êïó„É°„Éº„É´„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÈñâ„Åò„Çã
    document.getElementById('hideFailedBtn')?.addEventListener('click', () => {
        document.getElementById('failedEmailsSection').style.display = 'none';
    });
    
    // Â§±Êïó„É°„Éº„É´ÂÜçÈÄÅ‰ø°
    document.getElementById('retryFailedBtn')?.addEventListener('click', async () => {
        const failedEmails = getFailedEmails();
        if (failedEmails.length === 0) {
            alert('ÂÜçÈÄÅ‰ø°„Åô„Çã„É°„Éº„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        if (!confirm(`${failedEmails.length}‰ª∂„ÅÆ„É°„Éº„É´„ÇíÂÜçÈÄÅ‰ø°„Åó„Åæ„Åô„ÅãÔºü`)) {
            return;
        }
        
        try {
            // ÊúÄÂæå„Å´ÈÄÅ‰ø°„Åó„ÅüË®≠ÂÆö„ÇíÂÜçÂà©Áî®
            const lastHistory = JSON.parse(localStorage.getItem('newsletter-history') || '[]')[0];
            if (!lastHistory) {
                alert('ÂÜçÈÄÅ‰ø°„Åô„ÇãË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                return;
            }
            
            const retryResult = await retryFailedEmails(failedEmails, lastHistory);
            alert(`ÂÜçÈÄÅ‰ø°ÂÆå‰∫ÜÔºöÊàêÂäü ${retryResult.success}‰ª∂„ÄÅÂ§±Êïó ${retryResult.failed}‰ª∂`);
            
            // ÊàêÂäü„Åó„Åü„É°„Éº„É´„ÇíÂ§±Êïó„É™„Çπ„Éà„Åã„ÇâÂâäÈô§
            if (retryResult.success > 0) {
                clearSuccessfulRetries(retryResult.successfulEmails);
                loadFailedEmails(); // Â§±Êïó„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
            }
            
        } catch (error) {
            console.error('ÂÜçÈÄÅ‰ø°„Ç®„É©„Éº:', error);
            alert('ÂÜçÈÄÅ‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + error.message);
        }
    });
    
    // Â§±Êïó„É™„Çπ„Éà„ÇØ„É™„Ç¢
    document.getElementById('clearFailedBtn')?.addEventListener('click', () => {
        if (confirm('Â§±Êïó„É°„Éº„É´„É™„Çπ„Éà„Çí„Åô„Åπ„Å¶„ÇØ„É™„Ç¢„Åó„Åæ„Åô„ÅãÔºü')) {
            clearAllFailedEmails();
            loadFailedEmails();
            alert('Â§±Êïó„É°„Éº„É´„É™„Çπ„Éà„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü');
        }
    });

    // Â§±Êïó„É°„Éº„É´Ë™≠„ÅøËæº„ÅøÈñ¢Êï∞
    function loadFailedEmails() {
        const failedEmails = getFailedEmails();
        const failedEmailsList = document.getElementById('failedEmailsList');
        
        if (failedEmails.length === 0) {
            failedEmailsList.innerHTML = '<p style="color: #059669; font-weight: 600;">‚úÖ ÈÄÅ‰ø°Â§±Êïó„É°„Éº„É´„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>';
            return;
        }
        
        let html = `<p style="color: #991b1b; font-weight: 600;">üìß Â§±Êïó‰ª∂Êï∞: ${failedEmails.length}‰ª∂</p>`;
        html += '<div style="max-height: 200px; overflow-y: auto; border: 1px solid #f87171; border-radius: 6px; background: white; padding: 15px;">';
        
        failedEmails.forEach((item, index) => {
            html += `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; border-bottom: 1px solid #fee2e2;">
                    <div>
                        <strong>${item.email}</strong><br>
                        <small>„Éó„É©„É≥: ${item.plan || 'Unknown'} | „Ç®„É©„Éº: ${item.error || 'Unknown error'}</small>
                    </div>
                    <button onclick="removeFailedEmail(${index})" class="btn" style="background: #ef4444; color: white; padding: 4px 8px; font-size: 12px;">ÂâäÈô§</button>
                </div>
            `;
        });
        
        html += '</div>';
        failedEmailsList.innerHTML = html;
    }

    // Â§±Êïó„É°„Éº„É´ÂèñÂæó
    function getFailedEmails() {
        const keys = Object.keys(localStorage).filter(key => key.startsWith('newsletter-failed-'));
        let allFailed = [];
        
        keys.forEach(key => {
            try {
                const failedData = JSON.parse(localStorage.getItem(key));
                if (Array.isArray(failedData)) {
                    allFailed = allFailed.concat(failedData.map(item => ({...item, key})));
                }
            } catch (error) {
                console.error('Failed email data parse error:', error);
            }
        });
        
        return allFailed;
    }

    // Â§±Êïó„É°„Éº„É´ÂÜçÈÄÅ‰ø°Âá¶ÁêÜ
    async function retryFailedEmails(failedEmails, lastHistory) {
        const retryData = {
            subject: '[ÂÜçÈÄÅ‰ø°] ' + lastHistory.subject,
            htmlContent: lastHistory.htmlContent || generateBasicRetryHTML(lastHistory.subject),
            targetPlan: 'retry',
            scheduledAt: null,
            retryEmails: failedEmails.map(item => ({email: item.email, plan: item.plan}))
        };
        
        const response = await fetch('/.netlify/functions/send-newsletter', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(retryData)
        });
        
        if (!response.ok) {
            throw new Error(`ÂÜçÈÄÅ‰ø°Â§±Êïó: ${response.status}`);
        }
        
        const result = await response.json();
        return {
            success: result.recipientCount || 0,
            failed: failedEmails.length - (result.recipientCount || 0),
            successfulEmails: failedEmails.slice(0, result.recipientCount || 0)
        };
    }

    // ÂÄãÂà•Â§±Êïó„É°„Éº„É´ÂâäÈô§
    function removeFailedEmail(index) {
        const failedEmails = getFailedEmails();
        if (index < 0 || index >= failedEmails.length) return;
        
        const itemToRemove = failedEmails[index];
        const key = itemToRemove.key;
        
        try {
            const currentData = JSON.parse(localStorage.getItem(key) || '[]');
            const updatedData = currentData.filter(item => item.email !== itemToRemove.email);
            
            if (updatedData.length === 0) {
                localStorage.removeItem(key);
            } else {
                localStorage.setItem(key, JSON.stringify(updatedData));
            }
            
            loadFailedEmails(); // „É™„Çπ„Éà„ÇíÊõ¥Êñ∞
        } catch (error) {
            console.error('Failed email removal error:', error);
        }
    }

    // ÊàêÂäü„Åó„ÅüÂÜçÈÄÅ‰ø°„É°„Éº„É´„ÇíÂ§±Êïó„É™„Çπ„Éà„Åã„ÇâÂâäÈô§
    function clearSuccessfulRetries(successfulEmails) {
        successfulEmails.forEach(email => {
            const allFailed = getFailedEmails();
            allFailed.forEach(item => {
                if (item.email === email.email) {
                    removeFailedEmailByKey(item.key, email.email);
                }
            });
        });
    }

    // „Åô„Åπ„Å¶„ÅÆÂ§±Êïó„É°„Éº„É´„Çí„ÇØ„É™„Ç¢
    function clearAllFailedEmails() {
        const keys = Object.keys(localStorage).filter(key => key.startsWith('newsletter-failed-'));
        keys.forEach(key => localStorage.removeItem(key));
    }

    // Â§±Êïó„É°„Éº„É´„Çí„Ç≠„ÉºÊåáÂÆö„ÅßÂâäÈô§
    function removeFailedEmailByKey(key, email) {
        try {
            const currentData = JSON.parse(localStorage.getItem(key) || '[]');
            const updatedData = currentData.filter(item => item.email !== email);
            
            if (updatedData.length === 0) {
                localStorage.removeItem(key);
            } else {
                localStorage.setItem(key, JSON.stringify(updatedData));
            }
        } catch (error) {
            console.error('Failed email key removal error:', error);
        }
    }

    // Âü∫Êú¨ÁöÑ„Å™ÂÜçÈÄÅ‰ø°Áî®HTMLÁîüÊàê
    function generateBasicRetryHTML(subject) {
        return `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                <h1 style="color: #1e293b;">üèá NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ</h1>
                <p>„Åì„ÅÆ„É°„Éº„É´„ÅØÈÖç‰ø°„Ç®„É©„Éº„ÅÆ„Åü„ÇÅÂÜçÈÄÅ‰ø°„Åï„Çå„Åæ„Åó„Åü„ÄÇ</p>
                <h2>${subject}</h2>
                <p>Ë©≥Á¥∞„Å™ÂÜÖÂÆπ„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅÂÖ¨Âºè„Çµ„Ç§„Éà„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
                <a href="https://nankan-analytics.keiba.link/" style="background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">ÂÖ¨Âºè„Çµ„Ç§„Éà</a>
            </div>
        `;
    }

    // ÈÖç‰ø°„É¨„Éù„Éº„ÉàÈñ¢ÈÄ£
    document.getElementById('showReportBtn')?.addEventListener('click', () => {
        loadDeliveryReport();
        document.getElementById('reportSection').style.display = 'block';
    });
    
    document.getElementById('hideReportBtn')?.addEventListener('click', () => {
        document.getElementById('reportSection').style.display = 'none';
    });
    
    document.getElementById('refreshReportBtn')?.addEventListener('click', () => {
        loadDeliveryReport();
    });

    // ÈÖç‰ø°„É¨„Éù„Éº„ÉàË™≠„ÅøËæº„ÅøÈñ¢Êï∞
    function loadDeliveryReport() {
        const reportContent = document.getElementById('reportContent');
        reportContent.innerHTML = '<p>üìä „É¨„Éù„Éº„Éà„ÇíË™≠„ÅøËæº„Åø‰∏≠...</p>';
        
        try {
            const history = JSON.parse(localStorage.getItem('newsletter-history') || '[]');
            
            if (history.length === 0) {
                reportContent.innerHTML = '<p style="color: #6b7280;">ÈÖç‰ø°Â±•Ê≠¥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>';
                return;
            }
            
            // ÊúÄÊñ∞10‰ª∂„ÅÆÈÖç‰ø°„Å´„Å§„ÅÑ„Å¶Áµ±Ë®à„ÇíË®àÁÆó
            const recentHistory = history.slice(0, 10);
            const totalSent = recentHistory.reduce((sum, item) => sum + (item.recipientCount || 0), 0);
            const totalFailed = recentHistory.reduce((sum, item) => sum + (item.failedCount || 0), 0);
            const successRate = totalSent + totalFailed > 0 ? ((totalSent / (totalSent + totalFailed)) * 100).toFixed(1) : '0';
            
            // „Éó„É©„É≥Âà•Áµ±Ë®à
            const planStats = {};
            recentHistory.forEach(item => {
                const plan = item.targetPlan || 'unknown';
                if (!planStats[plan]) {
                    planStats[plan] = { sent: 0, failed: 0 };
                }
                planStats[plan].sent += item.recipientCount || 0;
                planStats[plan].failed += item.failedCount || 0;
            });
            
            let html = `
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 25px;">
                    <div style="background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                        <h4 style="margin: 0 0 10px 0; color: #059669;">üì§ Á∑èÈÖç‰ø°Êï∞</h4>
                        <div style="font-size: 2em; font-weight: bold; color: #059669;">${totalSent}</div>
                    </div>
                    <div style="background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                        <h4 style="margin: 0 0 10px 0; color: #dc2626;">‚ùå ÈÖç‰ø°Â§±Êïó</h4>
                        <div style="font-size: 2em; font-weight: bold; color: ${totalFailed > 0 ? '#dc2626' : '#6b7280'};">${totalFailed}</div>
                    </div>
                    <div style="background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                        <h4 style="margin: 0 0 10px 0; color: #0ea5e9;">üìà ÊàêÂäüÁéá</h4>
                        <div style="font-size: 2em; font-weight: bold; color: ${parseFloat(successRate) > 90 ? '#059669' : parseFloat(successRate) > 70 ? '#f59e0b' : '#dc2626'};">${successRate}%</div>
                    </div>
                    <div style="background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                        <h4 style="margin: 0 0 10px 0; color: #7c3aed;">üìß ÈÖç‰ø°ÂõûÊï∞</h4>
                        <div style="font-size: 2em; font-weight: bold; color: #7c3aed;">${recentHistory.length}</div>
                    </div>
                </div>
                
                <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                    <h4 style="margin-top: 0; color: #374151;">üìä „Éó„É©„É≥Âà•ÈÖç‰ø°Áµ±Ë®à</h4>
                    <div style="display: grid; gap: 10px;">
            `;
            
            Object.entries(planStats).forEach(([plan, stats]) => {
                const planName = {
                    'all': 'ÂÖ®‰ºöÂì°',
                    'free': 'ÁÑ°Êñô‰ºöÂì°',
                    'paid': 'ÊúâÊñô‰ºöÂì°',
                    'standard': 'Standard‰ºöÂì°',
                    'premium': 'Premium‰ºöÂì°',
                    'retry': 'ÂÜçÈÄÅ‰ø°'
                }[plan] || plan;
                
                const planSuccessRate = stats.sent + stats.failed > 0 ? ((stats.sent / (stats.sent + stats.failed)) * 100).toFixed(1) : '0';
                
                html += `
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; background: #f8fafc; border-radius: 6px;">
                        <span style="font-weight: 600; color: #374151;">${planName}</span>
                        <div style="display: flex; gap: 15px; align-items: center;">
                            <span style="color: #059669;">ÊàêÂäü: ${stats.sent}</span>
                            <span style="color: #dc2626;">Â§±Êïó: ${stats.failed}</span>
                            <span style="color: #0ea5e9; font-weight: 600;">${planSuccessRate}%</span>
                        </div>
                    </div>
                `;
            });
            
            html += `
                    </div>
                </div>
                
                <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); margin-top: 20px;">
                    <h4 style="margin-top: 0; color: #374151;">üìÖ ÊúÄËøë„ÅÆÈÖç‰ø°Â±•Ê≠¥ (Ë©≥Á¥∞)</h4>
                    <div style="max-height: 300px; overflow-y: auto;">
            `;
            
            recentHistory.forEach((item, index) => {
                const date = new Date(item.scheduledAt || item.createdAt).toLocaleString('ja-JP');
                const statusColor = item.failedCount > 0 ? '#f59e0b' : '#059669';
                const statusText = item.failedCount > 0 ? `ÊàêÂäü${item.recipientCount}‰ª∂ / Â§±Êïó${item.failedCount}‰ª∂` : `ÊàêÂäü${item.recipientCount}‰ª∂`;
                
                html += `
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; border-bottom: 1px solid #e5e7eb;">
                        <div>
                            <div style="font-weight: 600; color: #374151;">${item.subject}</div>
                            <div style="font-size: 0.9em; color: #6b7280;">${date}</div>
                        </div>
                        <div style="text-align: right;">
                            <div style="color: ${statusColor}; font-weight: 600;">${statusText}</div>
                            <div style="font-size: 0.9em; color: #6b7280;">${item.status === 'scheduled' ? '‰∫àÁ¥ÑÊ∏à„Åø' : 'ÈÖç‰ø°Ê∏à„Åø'}</div>
                        </div>
                    </div>
                `;
            });
            
            html += `
                    </div>
                </div>
                
                <div style="background: #fef3c7; padding: 15px; border-radius: 8px; margin-top: 20px; border-left: 4px solid #f59e0b;">
                    <h4 style="margin: 0 0 10px 0; color: #92400e;">üí° ÊîπÂñÑÊèêÊ°à</h4>
                    <ul style="margin: 0; padding-left: 20px; color: #78350f;">
            `;
            
            if (parseFloat(successRate) < 95) {
                html += '<li>ÈÖç‰ø°ÊàêÂäüÁéá„Åå95%„Çí‰∏ãÂõû„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÂìÅË≥™Á¢∫Ë™ç„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ</li>';
            }
            if (totalFailed > 0) {
                html += '<li>ÈÖç‰ø°Â§±Êïó„É°„Éº„É´„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„ÄåÂ§±Êïó„É°„Éº„É´Á¢∫Ë™ç„Äç„Åã„ÇâÂÜçÈÄÅ‰ø°„ÇíÊ§úË®é„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</li>';
            }
            if (recentHistory.length < 5) {
                html += '<li>ÂÆöÊúüÁöÑ„Å™ÈÖç‰ø°„Åß„É¶„Éº„Ç∂„Éº„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà„ÇíÂêë‰∏ä„Åï„Åõ„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ</li>';
            }
            if (planStats['free'] && planStats['paid']) {
                const freeRate = planStats['free'].sent / (planStats['free'].sent + planStats['free'].failed || 1);
                const paidRate = (planStats['standard']?.sent || 0) + (planStats['premium']?.sent || 0);
                if (freeRate > paidRate) {
                    html += '<li>ÁÑ°Êñô‰ºöÂì°„Å∏„ÅÆÈÖç‰ø°„ÅåÂ§ö„ÇÅ„Åß„Åô„ÄÇÊúâÊñô‰ºöÂì°Âêë„Åë„ÅÆÁâπÂà•„Ç≥„É≥„ÉÜ„É≥„ÉÑÈÖç‰ø°„ÇÇÊ§úË®é„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</li>';
                }
            }
            
            if (parseFloat(successRate) >= 95 && totalFailed === 0 && recentHistory.length >= 5) {
                html += '<li style="color: #059669;">‚ú® ÈÖç‰ø°„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅØËâØÂ•Ω„Åß„ÅôÔºÅ„Åì„ÅÆË™øÂ≠ê„ÅßÁ∂ôÁ∂ö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</li>';
            }
            
            html += `
                    </ul>
                </div>
            `;
            
            reportContent.innerHTML = html;
            
        } catch (error) {
            console.error('„É¨„Éù„Éº„ÉàÁîüÊàê„Ç®„É©„Éº:', error);
            reportContent.innerHTML = '<p style="color: #dc2626;">„É¨„Éù„Éº„Éà„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</p>';
        }
    }

    // „ÉÜ„É≥„Éó„É¨„Éº„ÉàÁÆ°ÁêÜÊ©üËÉΩ
    document.getElementById('saveTemplateBtn')?.addEventListener('click', saveCurrentTemplate);
    document.getElementById('loadTemplateBtn')?.addEventListener('click', showTemplateModal);
    document.getElementById('closeTemplateModalBtn')?.addEventListener('click', hideTemplateModal);
    document.getElementById('deleteAllTemplatesBtn')?.addEventListener('click', deleteAllTemplates);
    
    // „ÉÜ„Çπ„ÉàÈÄÅ‰ø°Ê©üËÉΩ
    document.getElementById('testSendBtn')?.addEventListener('click', showTestSendModal);
    document.getElementById('cancelTestSendBtn')?.addEventListener('click', hideTestSendModal);
    document.getElementById('executeTestSendBtn')?.addEventListener('click', executeTestSend);
    
    // „ÉÜ„Çπ„ÉàÈÄÅ‰ø°„É¢„Éº„ÉÄ„É´Ë°®Á§∫
    function showTestSendModal() {
        // „Éá„Éï„Ç©„É´„Éà„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíË®≠ÂÆö
        const savedEmail = localStorage.getItem('test-email-address') || 'admin@example.com';
        document.getElementById('testEmailAddress').value = savedEmail;
        
        document.getElementById('testSendStatus').innerHTML = '';
        document.getElementById('testSendModal').style.display = 'block';
    }
    
    // „ÉÜ„Çπ„ÉàÈÄÅ‰ø°„É¢„Éº„ÉÄ„É´ÈùûË°®Á§∫
    function hideTestSendModal() {
        document.getElementById('testSendModal').style.display = 'none';
        document.getElementById('testSendStatus').innerHTML = '';
    }
    
    // „ÉÜ„Çπ„ÉàÈÄÅ‰ø°ÂÆüË°å
    async function executeTestSend() {
        const testEmail = document.getElementById('testEmailAddress')?.value;
        const statusDiv = document.getElementById('testSendStatus');
        const executeBtn = document.getElementById('executeTestSendBtn');
        
        // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
        if (!testEmail || !testEmail.includes('@')) {
            statusDiv.innerHTML = '<div style="color: #dc2626; font-weight: 600;">‚ö†Ô∏è ÊúâÂäπ„Å™„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ</div>';
            return;
        }
        
        const subject = document.getElementById('subject')?.value;
        const mainContent = document.getElementById('mainContent')?.value;
        
        if (!subject || !mainContent) {
            statusDiv.innerHTML = '<div style="color: #dc2626; font-weight: 600;">‚ö†Ô∏è ‰ª∂Âêç„Å®Êú¨Êñá„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ</div>';
            return;
        }
        
        // „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Çí‰øùÂ≠ò
        localStorage.setItem('test-email-address', testEmail);
        
        try {
            // „Éú„Çø„É≥ÁÑ°ÂäπÂåñ
            executeBtn.disabled = true;
            executeBtn.textContent = 'ÈÄÅ‰ø°‰∏≠...';
            
            statusDiv.innerHTML = '<div style="color: #3b82f6; font-weight: 600;">üìß „ÉÜ„Çπ„Éà„É°„Éº„É´„ÇíÈÄÅ‰ø°„Åó„Å¶„ÅÑ„Åæ„Åô...</div>';
            
            // „ÉÜ„Çπ„ÉàÈÄÅ‰ø°Áî®„ÅÆ„Éá„Éº„ÇøÊ∫ñÂÇô
            const templateData = collectFormData();
            templateData.subject = '[TEST] ' + templateData.subject;
            
            // HTML„Ç≥„É≥„ÉÜ„É≥„ÉÑÁîüÊàê
            const htmlContent = generateAdvancedNewsletterHTML(templateData);
            
            const testSendData = {
                subject: templateData.subject,
                htmlContent: htmlContent,
                targetPlan: 'test',
                scheduledAt: null,
                testEmail: testEmail
            };
            
            console.log('„ÉÜ„Çπ„ÉàÈÄÅ‰ø°„Éá„Éº„Çø:', testSendData);
            
            // „ÉÜ„Çπ„ÉàÈÄÅ‰ø°APIÂëº„Å≥Âá∫„Åó
            const response = await fetch('/.netlify/functions/send-newsletter', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(testSendData)
            });
            
            const responseText = await response.text();
            console.log('„ÉÜ„Çπ„ÉàÈÄÅ‰ø°„É¨„Çπ„Éù„É≥„Çπ:', responseText);
            
            let result;
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.error('„ÉÜ„Çπ„ÉàÈÄÅ‰ø°„É¨„Çπ„Éù„É≥„ÇπËß£Êûê„Ç®„É©„Éº:', parseError);
                throw new Error('„Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆÂøúÁ≠î„ÇíËß£Êûê„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
            }
            
            if (response.ok && result.success) {
                statusDiv.innerHTML = `
                    <div style="color: #059669; font-weight: 600;">
                        ‚úÖ „ÉÜ„Çπ„Éà„É°„Éº„É´„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü<br>
                        <small style="color: #6b7280;">ÈÄÅ‰ø°ÂÖà: ${testEmail}</small>
                    </div>
                `;
                
                // 3ÁßíÂæå„Å´„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
                setTimeout(() => {
                    hideTestSendModal();
                }, 3000);
                
            } else {
                const errorMessage = result.error || `ÈÄÅ‰ø°„Ç®„É©„Éº (${response.status})`;
                statusDiv.innerHTML = `<div style="color: #dc2626; font-weight: 600;">‚ùå ${errorMessage}</div>`;
            }
            
        } catch (error) {
            console.error('„ÉÜ„Çπ„ÉàÈÄÅ‰ø°„Ç®„É©„Éº:', error);
            statusDiv.innerHTML = `<div style="color: #dc2626; font-weight: 600;">‚ùå „ÉÜ„Çπ„ÉàÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}</div>`;
        } finally {
            // „Éú„Çø„É≥Âæ©ÂÖÉ
            executeBtn.disabled = false;
            executeBtn.textContent = 'üìß „ÉÜ„Çπ„ÉàÈÄÅ‰ø°ÂÆüË°å';
        }
    }
    
    // „Éï„Ç©„Éº„É†„Éá„Éº„Çø„ÇíÂèéÈõÜÔºà„ÉÜ„Çπ„ÉàÈÄÅ‰ø°Áî®Ôºâ
    function collectFormData() {
        const templateType = document.getElementById('templateType')?.value || 'prediction';
        const targetPlan = document.getElementById('targetPlan')?.value || 'all';
        
        let templateData = {
            title: document.getElementById('subject')?.value || '„ÉÜ„Çπ„Éà„É°„Éº„É´',
            subject: document.getElementById('subject')?.value || '„ÉÜ„Çπ„Éà„É°„Éº„É´',
            mainContent: document.getElementById('mainContent')?.value || '',
            templateType: templateType,
            targetPlan: targetPlan,
            customCtaText: document.getElementById('customCtaText')?.value || '',
            customCtaUrl: document.getElementById('customCtaUrl')?.value || '',
            showCtaButton: document.getElementById('showCtaButton')?.checked || true,
            predictions: [],
            results: [],
            predictionNote: document.getElementById('predictionNote')?.value || '',
            additionalSection: document.getElementById('additionalSection')?.value || '',
            customHeadline: document.getElementById('customHeadline')?.value || '',
            customAccent: document.getElementById('customAccent')?.value || '',
            campaignTitle: document.getElementById('campaignTitle')?.value || '',
            campaignDetails: document.getElementById('campaignDetails')?.value || '',
            originalPrice: document.getElementById('originalPrice')?.value || '',
            campaignPrice: document.getElementById('campaignPrice')?.value || '',
            campaignDeadline: document.getElementById('campaignDeadline')?.value || ''
        };
        
        // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„ÉóÂà•„ÅÆ„Éá„Éº„ÇøÂèéÈõÜ
        if (templateType === 'prediction') {
            const predictionInputs = document.querySelectorAll('.prediction-input');
            predictionInputs.forEach(input => {
                const raceName = input.querySelector('.race-name-input')?.value;
                const horses = input.querySelector('.horses-input')?.value;
                if (raceName && horses) {
                    templateData.predictions.push({
                        raceName: raceName,
                        horses: horses.split('\n').filter(h => h.trim())
                    });
                }
            });
        }
        
        if (templateType === 'result') {
            const resultInputs = document.querySelectorAll('.result-input');
            resultInputs.forEach(input => {
                const raceName = input.querySelector('.race-name-input')?.value;
                const winner = input.querySelector('.winner-input')?.value;
                const payout = input.querySelector('.payout-input')?.value;
                const status = input.querySelector('.status-select')?.value;
                if (raceName && winner) {
                    templateData.results.push({
                        raceName: raceName,
                        winner: winner,
                        payout: payout,
                        status: status || 'miss'
                    });
                }
            });
        }
        
        return templateData;
    }

    // ÁèæÂú®„ÅÆË®≠ÂÆö„Çí„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶‰øùÂ≠ò
    function saveCurrentTemplate() {
        const subject = document.getElementById('subject')?.value;
        const mainContent = document.getElementById('mainContent')?.value;
        const templateType = document.getElementById('templateType')?.value;
        
        if (!subject || !mainContent) {
            alert('‰ª∂Âêç„Å®Êú¨Êñá„ÇíÂÖ•Âäõ„Åó„Å¶„Åã„Çâ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }
        
        const templateName = prompt('„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:', subject.substring(0, 30));
        if (!templateName) {
            return;
        }
        
        try {
            // ÁèæÂú®„ÅÆ„Éï„Ç©„Éº„É†„Éá„Éº„Çø„ÇíÂèéÈõÜ
            const templateData = {
                id: Date.now().toString(),
                name: templateName,
                subject: subject,
                mainContent: mainContent,
                templateType: templateType,
                targetPlan: document.getElementById('targetPlan')?.value || 'all',
                customCtaText: document.getElementById('customCtaText')?.value || '',
                customCtaUrl: document.getElementById('customCtaUrl')?.value || '',
                showCtaButton: document.getElementById('showCtaButton')?.checked || true,
                createdAt: new Date().toISOString(),
                
                // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„ÉóÂà•„ÅÆ„Éá„Éº„Çø
                predictions: [],
                results: [],
                predictionNote: document.getElementById('predictionNote')?.value || '',
                additionalSection: document.getElementById('additionalSection')?.value || '',
                
                // „Ç´„Çπ„Çø„É†„Éï„Ç£„Éº„É´„Éâ
                customHeadline: document.getElementById('customHeadline')?.value || '',
                customAccent: document.getElementById('customAccent')?.value || '',
                
                // „Ç≠„É£„É≥„Éö„Éº„É≥„Éï„Ç£„Éº„É´„Éâ
                campaignTitle: document.getElementById('campaignTitle')?.value || '',
                campaignDetails: document.getElementById('campaignDetails')?.value || '',
                originalPrice: document.getElementById('originalPrice')?.value || '',
                campaignPrice: document.getElementById('campaignPrice')?.value || '',
                campaignDeadline: document.getElementById('campaignDeadline')?.value || ''
            };
            
            // ‰∫àÊÉ≥„Éá„Éº„Çø„ÅÆÂèéÈõÜÔºà‰∫àÊÉ≥„Çø„Ç§„Éó„ÅÆÂ†¥ÂêàÔºâ
            if (templateType === 'prediction') {
                const predictionInputs = document.querySelectorAll('.prediction-input');
                predictionInputs.forEach(input => {
                    const raceName = input.querySelector('.race-name-input')?.value;
                    const horses = input.querySelector('.horses-input')?.value;
                    if (raceName && horses) {
                        templateData.predictions.push({
                            raceName: raceName,
                            horses: horses.split('\n').filter(h => h.trim())
                        });
                    }
                });
            }
            
            // ÁµêÊûú„Éá„Éº„Çø„ÅÆÂèéÈõÜÔºàÁµêÊûú„Çø„Ç§„Éó„ÅÆÂ†¥ÂêàÔºâ
            if (templateType === 'result') {
                const resultInputs = document.querySelectorAll('.result-input');
                resultInputs.forEach(input => {
                    const raceName = input.querySelector('.race-name-input')?.value;
                    const winner = input.querySelector('.winner-input')?.value;
                    const payout = input.querySelector('.payout-input')?.value;
                    const status = input.querySelector('.status-select')?.value;
                    if (raceName && winner) {
                        templateData.results.push({
                            raceName: raceName,
                            winner: winner,
                            payout: payout,
                            status: status || 'miss'
                        });
                    }
                });
            }
            
            // LocalStorage„Å´‰øùÂ≠ò
            const existingTemplates = JSON.parse(localStorage.getItem('email-templates') || '[]');
            existingTemplates.unshift(templateData); // ÊúÄÊñ∞„ÇíÂÖàÈ†≠„Å´
            
            // ÊúÄÂ§ß20‰ª∂„Åæ„Åß‰øùÊåÅ
            const limitedTemplates = existingTemplates.slice(0, 20);
            localStorage.setItem('email-templates', JSON.stringify(limitedTemplates));
            
            alert(`„ÉÜ„É≥„Éó„É¨„Éº„Éà„Äå${templateName}„Äç„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü`);
            console.log('‚úÖ „ÉÜ„É≥„Éó„É¨„Éº„Éà‰øùÂ≠òÂÆå‰∫Ü:', templateData);
            
        } catch (error) {
            console.error('„ÉÜ„É≥„Éó„É¨„Éº„Éà‰øùÂ≠ò„Ç®„É©„Éº:', error);
            alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
        }
    }

    // „ÉÜ„É≥„Éó„É¨„Éº„ÉàÈÅ∏Êäû„É¢„Éº„ÉÄ„É´„ÇíË°®Á§∫
    function showTemplateModal() {
        loadTemplateList();
        document.getElementById('templateModal').style.display = 'block';
    }

    // „ÉÜ„É≥„Éó„É¨„Éº„ÉàÈÅ∏Êäû„É¢„Éº„ÉÄ„É´„ÇíÈùûË°®Á§∫
    function hideTemplateModal() {
        document.getElementById('templateModal').style.display = 'none';
    }

    // „ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ß„ÇíË™≠„ÅøËæº„Åø
    function loadTemplateList() {
        const templateList = document.getElementById('templateList');
        const templates = JSON.parse(localStorage.getItem('email-templates') || '[]');
        
        if (templates.length === 0) {
            templateList.innerHTML = `
                <div style="text-align: center; color: #6b7280; padding: 40px;">
                    <div style="font-size: 48px; margin-bottom: 15px;">üìù</div>
                    <p>‰øùÂ≠ò„Åï„Çå„Åü„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                    <small>„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰ΩúÊàê„Åó„Å¶„Äå„ÉÜ„É≥„Éó„É¨„Éº„Éà‰øùÂ≠ò„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ</small>
                </div>
            `;
            return;
        }
        
        let html = '';
        templates.forEach((template, index) => {
            const createdDate = new Date(template.createdAt).toLocaleDateString('ja-JP');
            const templateTypeName = {
                'prediction': 'üéØ ‰∫àÊÉ≥',
                'result': 'üìä ÁµêÊûú',
                'campaign': 'üé™ „Ç≠„É£„É≥„Éö„Éº„É≥',
                'custom': '‚ú® „Ç´„Çπ„Çø„É†'
            }[template.templateType] || template.templateType;
            
            html += `
                <div style="border: 1px solid #e5e7eb; border-radius: 8px; padding: 20px; margin-bottom: 15px; background: white;">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 10px;">
                        <div>
                            <h4 style="margin: 0 0 5px 0; color: #374151;">${template.name}</h4>
                            <div style="font-size: 0.9em; color: #6b7280;">
                                ${templateTypeName} | ${createdDate} | ÂØæË±°: ${getTargetPlanName(template.targetPlan)}
                            </div>
                        </div>
                        <div style="display: flex; gap: 8px;">
                            <button onclick="loadTemplate(${index})" class="btn btn-primary" style="padding: 6px 12px; font-size: 0.9em;">üìÇ Ë™≠Ëæº</button>
                            <button onclick="deleteTemplate(${index})" class="btn btn-danger" style="padding: 6px 12px; font-size: 0.9em;">üóëÔ∏è</button>
                        </div>
                    </div>
                    <div style="background: #f8fafc; padding: 12px; border-radius: 6px; font-size: 0.9em; color: #4b5563;">
                        <strong>‰ª∂Âêç:</strong> ${template.subject}<br>
                        <strong>Êú¨Êñá:</strong> ${template.mainContent.substring(0, 100)}${template.mainContent.length > 100 ? '...' : ''}
                    </div>
                </div>
            `;
        });
        
        templateList.innerHTML = html;
    }

    // „Éó„É©„É≥Âêç„ÇíÊó•Êú¨Ë™û„Å´Â§âÊèõ
    function getTargetPlanName(plan) {
        const planNames = {
            'all': 'ÂÖ®‰ºöÂì°',
            'free': 'ÁÑ°Êñô‰ºöÂì°',
            'paid': 'ÊúâÊñô‰ºöÂì°',
            'standard': 'Standard‰ºöÂì°',
            'premium': 'Premium‰ºöÂì°'
        };
        return planNames[plan] || plan;
    }

    // „ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíË™≠„ÅøËæº„Åø
    function loadTemplate(index) {
        try {
            const templates = JSON.parse(localStorage.getItem('email-templates') || '[]');
            if (index < 0 || index >= templates.length) {
                alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                return;
            }
            
            const template = templates[index];
            
            // Á¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞
            if (!confirm(`„ÉÜ„É≥„Éó„É¨„Éº„Éà„Äå${template.name}„Äç„ÇíË™≠„ÅøËæº„Åø„Åæ„Åô„ÅãÔºü\nÁèæÂú®„ÅÆÂÖ•ÂäõÂÜÖÂÆπ„ÅØ‰∏äÊõ∏„Åç„Åï„Çå„Åæ„Åô„ÄÇ`)) {
                return;
            }
            
            // „Éï„Ç©„Éº„É†„Å´ÂÄ§„ÇíË®≠ÂÆö
            document.getElementById('subject').value = template.subject || '';
            document.getElementById('mainContent').value = template.mainContent || '';
            document.getElementById('templateType').value = template.templateType || 'prediction';
            document.getElementById('targetPlan').value = template.targetPlan || 'all';
            document.getElementById('customCtaText').value = template.customCtaText || '';
            document.getElementById('customCtaUrl').value = template.customCtaUrl || '';
            
            if (document.getElementById('showCtaButton')) {
                document.getElementById('showCtaButton').checked = template.showCtaButton !== false;
            }
            
            // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„ÉóÂõ∫Êúâ„ÅÆË®≠ÂÆö
            if (template.predictionNote) {
                const predNoteEl = document.getElementById('predictionNote');
                if (predNoteEl) predNoteEl.value = template.predictionNote;
            }
            
            if (template.additionalSection) {
                const addSectionEl = document.getElementById('additionalSection');
                if (addSectionEl) addSectionEl.value = template.additionalSection;
            }
            
            // „Ç´„Çπ„Çø„É†„Éï„Ç£„Éº„É´„Éâ
            if (template.customHeadline) {
                const customHeadlineEl = document.getElementById('customHeadline');
                if (customHeadlineEl) customHeadlineEl.value = template.customHeadline;
            }
            
            if (template.customAccent) {
                const customAccentEl = document.getElementById('customAccent');
                if (customAccentEl) customAccentEl.value = template.customAccent;
            }
            
            // „Ç≠„É£„É≥„Éö„Éº„É≥„Éï„Ç£„Éº„É´„Éâ
            if (template.campaignTitle) {
                const campaignTitleEl = document.getElementById('campaignTitle');
                if (campaignTitleEl) campaignTitleEl.value = template.campaignTitle;
            }
            
            // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„Éó„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÊõ¥Êñ∞
            setTimeout(() => {
                updateTemplateSection();
            }, 100);
            
            // „Éó„É¨„Éì„É•„Éº„Çí„ÇØ„É™„Ç¢
            clearPreview();
            
            // „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
            hideTemplateModal();
            
            alert(`„ÉÜ„É≥„Éó„É¨„Éº„Éà„Äå${template.name}„Äç„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü`);
            console.log('‚úÖ „ÉÜ„É≥„Éó„É¨„Éº„ÉàË™≠„ÅøËæº„ÅøÂÆå‰∫Ü:', template);
            
        } catch (error) {
            console.error('„ÉÜ„É≥„Éó„É¨„Éº„ÉàË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
        }
    }

    // „ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂâäÈô§
    function deleteTemplate(index) {
        try {
            const templates = JSON.parse(localStorage.getItem('email-templates') || '[]');
            if (index < 0 || index >= templates.length) {
                alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                return;
            }
            
            const template = templates[index];
            if (!confirm(`„ÉÜ„É≥„Éó„É¨„Éº„Éà„Äå${template.name}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\n„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ`)) {
                return;
            }
            
            templates.splice(index, 1);
            localStorage.setItem('email-templates', JSON.stringify(templates));
            
            // „É™„Çπ„Éà„ÇíÊõ¥Êñ∞
            loadTemplateList();
            
            alert(`„ÉÜ„É≥„Éó„É¨„Éº„Éà„Äå${template.name}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`);
            
        } catch (error) {
            console.error('„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂâäÈô§„Ç®„É©„Éº:', error);
            alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
        }
    }

    // ÂÖ®„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂâäÈô§
    function deleteAllTemplates() {
        const templates = JSON.parse(localStorage.getItem('email-templates') || '[]');
        if (templates.length === 0) {
            alert('ÂâäÈô§„Åô„Çã„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        if (!confirm(`„Åô„Åπ„Å¶„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÔºà${templates.length}‰ª∂Ôºâ„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\n„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ`)) {
            return;
        }
        
        localStorage.removeItem('email-templates');
        loadTemplateList();
        alert('„Åô„Åπ„Å¶„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
    }

    // „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„Å®„Åó„Å¶ÂÆöÁæ©ÔºàHTML„Åã„Çâ„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ„Å´„Åô„Çã„Åü„ÇÅÔºâ
    window.removeFailedEmail = removeFailedEmail;
    window.loadTemplate = loadTemplate;
    window.deleteTemplate = deleteTemplate;

    // ÁèæÂú®ÊôÇÂàª„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞
    function updateCurrentTime() {
        const now = new Date();
        const timeString = now.toLocaleString('ja-JP', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        const currentTimeElement = document.getElementById('currentTime');
        if (currentTimeElement) {
            currentTimeElement.textContent = timeString;
        }
    }

    // ÁèæÂú®ÊôÇÂàª„Çí1Áßí„Åî„Å®„Å´Êõ¥Êñ∞
    setInterval(updateCurrentTime, 1000);

    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ê©üËÉΩÈñ¢ÈÄ£
    let securitySettings = {
        hourlyLimit: 50,
        dailyLimit: 1000,
        adminPassword: 'nankan123',
        ipRestrictionEnabled: false,
        allowedIps: [],
        timeRestrictionEnabled: false,
        allowedStartTime: '09:00',
        allowedEndTime: '18:00'
    };

    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø
    function loadSecuritySettings() {
        try {
            const saved = localStorage.getItem('newsletter-security');
            if (saved) {
                securitySettings = { ...securitySettings, ...JSON.parse(saved) };
            }
            
            // UI „Å´Ë®≠ÂÆö„ÇíÂèçÊò†
            document.getElementById('securityHourlyLimit').value = securitySettings.hourlyLimit;
            document.getElementById('securityDailyLimit').value = securitySettings.dailyLimit;
            document.getElementById('enableIpRestriction').checked = securitySettings.ipRestrictionEnabled;
            document.getElementById('allowedIps').value = securitySettings.allowedIps.join('\n');
            document.getElementById('enableTimeRestriction').checked = securitySettings.timeRestrictionEnabled;
            document.getElementById('allowedStartTime').value = securitySettings.allowedStartTime;
            document.getElementById('allowedEndTime').value = securitySettings.allowedEndTime;
            
            // „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπÁä∂ÊÖã„Å´Âøú„Åò„Å¶„Éï„Ç£„Éº„É´„Éâ„ÇíÊúâÂäπ/ÁÑ°ÂäπÂåñ
            document.getElementById('allowedIps').disabled = !securitySettings.ipRestrictionEnabled;
            document.getElementById('allowedStartTime').disabled = !securitySettings.timeRestrictionEnabled;
            document.getElementById('allowedEndTime').disabled = !securitySettings.timeRestrictionEnabled;
            
        } catch (error) {
            console.error('„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆöË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        }
    }

    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„Çí‰øùÂ≠ò
    function saveSecuritySettings() {
        try {
            localStorage.setItem('newsletter-security', JSON.stringify(securitySettings));
        } catch (error) {
            console.error('„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö‰øùÂ≠ò„Ç®„É©„Éº:', error);
        }
    }

    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÇíË®òÈå≤
    function logSecurityEvent(type, message, severity = 'info') {
        try {
            const log = {
                timestamp: new Date().toISOString(),
                type: type,
                message: message,
                severity: severity,
                ip: document.getElementById('currentIp')?.textContent || 'unknown'
            };
            
            const logs = JSON.parse(localStorage.getItem('security-logs') || '[]');
            logs.unshift(log);
            
            // ÊúÄÊñ∞1000‰ª∂„Åæ„Åß‰øùÊåÅ
            if (logs.length > 1000) {
                logs.splice(1000);
            }
            
            localStorage.setItem('security-logs', JSON.stringify(logs));
            console.log('„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞Ë®òÈå≤:', log);
        } catch (error) {
            console.error('„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞Ë®òÈå≤„Ç®„É©„Éº:', error);
        }
    }

    // „É¨„Éº„ÉàÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    function checkRateLimit() {
        try {
            const now = new Date();
            const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            const oneHourAgo = new Date(now.getTime() - (60 * 60 * 1000));
            
            const history = JSON.parse(localStorage.getItem('newsletter-history') || '[]');
            
            let todayCount = 0;
            let hourCount = 0;
            
            history.forEach(item => {
                const sentTime = new Date(item.createdAt || item.scheduledAt);
                if (sentTime >= todayStart) {
                    todayCount += item.recipientCount || 0;
                }
                if (sentTime >= oneHourAgo) {
                    hourCount += item.recipientCount || 0;
                }
            });
            
            // UIÊõ¥Êñ∞
            document.getElementById('todaySentCount').textContent = todayCount;
            document.getElementById('hourSentCount').textContent = hourCount;
            
            // Âà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
            const dailyLimit = parseInt(securitySettings.dailyLimit) || 0;
            const hourlyLimit = parseInt(securitySettings.hourlyLimit) || 0;
            
            if (dailyLimit > 0 && todayCount >= dailyLimit) {
                logSecurityEvent('RATE_LIMIT', `Êó•Ê¨°Âà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü (${todayCount}/${dailyLimit}ÈÄö)`, 'warning');
                return { allowed: false, reason: `Êó•Ê¨°Âà∂Èôê„Å´ÈÅî„Åó„Å¶„ÅÑ„Åæ„Åô (${todayCount}/${dailyLimit}ÈÄö)` };
            }
            
            if (hourlyLimit > 0 && hourCount >= hourlyLimit) {
                logSecurityEvent('RATE_LIMIT', `ÊôÇÈñìÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü (${hourCount}/${hourlyLimit}ÈÄö)`, 'warning');
                return { allowed: false, reason: `ÊôÇÈñìÂà∂Èôê„Å´ÈÅî„Åó„Å¶„ÅÑ„Åæ„Åô (${hourCount}/${hourlyLimit}ÈÄö)` };
            }
            
            return { allowed: true, todayCount, hourCount };
            
        } catch (error) {
            console.error('„É¨„Éº„ÉàÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
            return { allowed: true };
        }
    }

    // ÊôÇÈñìÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    function checkTimeRestriction() {
        if (!securitySettings.timeRestrictionEnabled) {
            return { allowed: true };
        }
        
        const now = new Date();
        const currentTime = now.getHours() * 100 + now.getMinutes();
        const startTime = parseInt(securitySettings.allowedStartTime.replace(':', ''));
        const endTime = parseInt(securitySettings.allowedEndTime.replace(':', ''));
        
        if (currentTime < startTime || currentTime > endTime) {
            const reason = `Ë®±ÂèØÊôÇÈñìÂ§ñ„Åß„Åô (${securitySettings.allowedStartTime}-${securitySettings.allowedEndTime})`;
            logSecurityEvent('TIME_RESTRICTION', reason, 'warning');
            return { allowed: false, reason };
        }
        
        return { allowed: true };
    }

    // ÁÆ°ÁêÜËÄÖË™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
    function checkAdminAuth(recipientCount) {
        // 500ÈÄö‰ª•‰∏ä„ÅÆÂ†¥Âêà„ÅÆ„ÅøÁÆ°ÁêÜËÄÖË™çË®º„ÅåÂøÖË¶ÅÔºàÁ∑©ÂíåÔºâ
        if (recipientCount >= 500) {
            const inputPassword = document.getElementById('adminPassword').value;
            if (!inputPassword || inputPassword.trim() === '') {
                logSecurityEvent('AUTH_FAILURE', `ÁÆ°ÁêÜËÄÖË™çË®ºÊú™ÂÖ•Âäõ (${recipientCount}ÈÄö„ÅÆÈÖç‰ø°Ë©¶Ë°å)`, 'error');
                return { allowed: false, reason: 'Â§ßÈáèÈÖç‰ø°„ÅÆ„Åü„ÇÅÁÆ°ÁêÜËÄÖ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÂøÖË¶Å„Åß„Åô' };
            }
            if (inputPassword !== securitySettings.adminPassword) {
                logSecurityEvent('AUTH_FAILURE', `ÁÆ°ÁêÜËÄÖË™çË®ºÂ§±Êïó (${recipientCount}ÈÄö„ÅÆÈÖç‰ø°Ë©¶Ë°å)`, 'error');
                return { allowed: false, reason: 'ÁÆ°ÁêÜËÄÖ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì' };
            }
            logSecurityEvent('AUTH_SUCCESS', `ÁÆ°ÁêÜËÄÖË™çË®ºÊàêÂäü (${recipientCount}ÈÄö„ÅÆÈÖç‰ø°)`, 'info');
        }
        return { allowed: true };
    }

    // ÂåÖÊã¨ÁöÑ„Å™„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
    function performSecurityCheck(recipientCount) {
        const checks = [
            checkRateLimit(),
            checkTimeRestriction(),
            checkAdminAuth(recipientCount)
        ];
        
        for (const check of checks) {
            if (!check.allowed) {
                return check;
            }
        }
        
        logSecurityEvent('SEND_APPROVED', `ÈÖç‰ø°ÊâøË™ç: ${recipientCount}ÈÄö`, 'info');
        return { allowed: true };
    }

    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    document.getElementById('securityHourlyLimit')?.addEventListener('change', (e) => {
        securitySettings.hourlyLimit = parseInt(e.target.value) || 0;
        saveSecuritySettings();
        checkRateLimit(); // UIÊõ¥Êñ∞
    });

    document.getElementById('securityDailyLimit')?.addEventListener('change', (e) => {
        securitySettings.dailyLimit = parseInt(e.target.value) || 0;
        saveSecuritySettings();
        checkRateLimit(); // UIÊõ¥Êñ∞
    });

    document.getElementById('enableIpRestriction')?.addEventListener('change', (e) => {
        securitySettings.ipRestrictionEnabled = e.target.checked;
        document.getElementById('allowedIps').disabled = !e.target.checked;
        saveSecuritySettings();
    });

    document.getElementById('allowedIps')?.addEventListener('change', (e) => {
        securitySettings.allowedIps = e.target.value.split('\n').filter(ip => ip.trim());
        saveSecuritySettings();
    });

    document.getElementById('enableTimeRestriction')?.addEventListener('change', (e) => {
        securitySettings.timeRestrictionEnabled = e.target.checked;
        document.getElementById('allowedStartTime').disabled = !e.target.checked;
        document.getElementById('allowedEndTime').disabled = !e.target.checked;
        saveSecuritySettings();
    });

    document.getElementById('allowedStartTime')?.addEventListener('change', (e) => {
        securitySettings.allowedStartTime = e.target.value;
        saveSecuritySettings();
    });

    document.getElementById('allowedEndTime')?.addEventListener('change', (e) => {
        securitySettings.allowedEndTime = e.target.value;
        saveSecuritySettings();
    });

    // ÁÆ°ÁêÜËÄÖË™çË®ºÁ¢∫Ë™ç„Éú„Çø„É≥
    document.getElementById('verifyAdminBtn')?.addEventListener('click', () => {
        const statusDiv = document.getElementById('adminAuthStatus');
        const messageSpan = document.getElementById('adminAuthMessage');
        const inputPassword = document.getElementById('adminPassword').value;
        
        if (!inputPassword) {
            statusDiv.style.display = 'block';
            statusDiv.style.background = '#fef2f2';
            statusDiv.style.border = '1px solid #fecaca';
            messageSpan.textContent = '„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
            messageSpan.style.color = '#dc2626';
            return;
        }
        
        if (inputPassword === securitySettings.adminPassword) {
            statusDiv.style.display = 'block';
            statusDiv.style.background = '#ecfdf5';
            statusDiv.style.border = '1px solid #a7f3d0';
            messageSpan.textContent = '‚úÖ Ë™çË®ºÊàêÂäü';
            messageSpan.style.color = '#065f46';
            logSecurityEvent('AUTH_TEST', 'ÁÆ°ÁêÜËÄÖË™çË®º„ÉÜ„Çπ„ÉàÊàêÂäü', 'info');
        } else {
            statusDiv.style.display = 'block';
            statusDiv.style.background = '#fef2f2';
            statusDiv.style.border = '1px solid #fecaca';
            messageSpan.textContent = '‚ùå Ë™çË®ºÂ§±Êïó';
            messageSpan.style.color = '#dc2626';
            logSecurityEvent('AUTH_TEST', 'ÁÆ°ÁêÜËÄÖË™çË®º„ÉÜ„Çπ„ÉàÂ§±Êïó', 'warning');
        }
    });

    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞Ë°®Á§∫
    document.getElementById('showSecurityLogBtn')?.addEventListener('click', () => {
        const logArea = document.getElementById('securityLogArea');
        try {
            const logs = JSON.parse(localStorage.getItem('security-logs') || '[]');
            
            if (logs.length === 0) {
                logArea.innerHTML = '<div style="color: #6b7280; text-align: center;">üìÑ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
                return;
            }
            
            const recentLogs = logs.slice(0, 20); // ÊúÄÊñ∞20‰ª∂
            let html = '';
            
            recentLogs.forEach(log => {
                const date = new Date(log.timestamp).toLocaleString('ja-JP');
                const severityColor = {
                    'info': '#059669',
                    'warning': '#d97706',
                    'error': '#dc2626'
                }[log.severity] || '#6b7280';
                
                const severityIcon = {
                    'info': 'üìù',
                    'warning': '‚ö†Ô∏è',
                    'error': 'üö®'
                }[log.severity] || 'üìã';
                
                html += `
                    <div style="padding: 8px; border-bottom: 1px solid #e5e7eb; font-size: 0.9rem;">
                        <div style="color: ${severityColor}; font-weight: 600;">
                            ${severityIcon} ${log.type}
                        </div>
                        <div style="color: #374151; margin: 2px 0;">
                            ${log.message}
                        </div>
                        <div style="color: #6b7280; font-size: 0.8rem;">
                            ${date} | IP: ${log.ip}
                        </div>
                    </div>
                `;
            });
            
            logArea.innerHTML = html;
            
        } catch (error) {
            logArea.innerHTML = '<div style="color: #dc2626;">„É≠„Ç∞„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</div>';
            console.error('„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞Ë°®Á§∫„Ç®„É©„Éº:', error);
        }
    });

    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÇØ„É™„Ç¢
    document.getElementById('clearSecurityLogBtn')?.addEventListener('click', () => {
        if (confirm('„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„Çí„Åô„Åπ„Å¶ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
            localStorage.removeItem('security-logs');
            logSecurityEvent('LOG_CLEARED', '„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„Åå„ÇØ„É™„Ç¢„Åï„Çå„Åæ„Åó„Åü', 'info');
            document.getElementById('securityLogArea').innerHTML = '<div style="color: #6b7280; text-align: center;">üìÑ „É≠„Ç∞„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü</div>';
            alert('„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü');
        }
    });

    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞Âá∫Âäõ
    document.getElementById('exportSecurityLogBtn')?.addEventListener('click', () => {
        try {
            const logs = JSON.parse(localStorage.getItem('security-logs') || '[]');
            const csv = 'Timestamp,Type,Message,Severity,IP\n' + 
                       logs.map(log => `"${log.timestamp}","${log.type}","${log.message}","${log.severity}","${log.ip}"`).join('\n');
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `security-log-${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            logSecurityEvent('LOG_EXPORT', '„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„Åå„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åï„Çå„Åæ„Åó„Åü', 'info');
        } catch (error) {
            alert('„É≠„Ç∞„ÅÆÂá∫Âäõ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            console.error('„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞Âá∫Âäõ„Ç®„É©„Éº:', error);
        }
    });

    // Êé®ÂÆöÂèó‰ø°ËÄÖÊï∞„ÇíË®àÁÆó
    function calculateEstimatedRecipients(targetPlan) {
        // „Éó„É©„É≥Âà•„ÅÆÊé®ÂÆö„É¶„Éº„Ç∂„ÉºÊï∞ÔºàÂÆüÈöõ„ÅÆÈ°ßÂÆ¢Êï∞„Å´Âøú„Åò„Å¶Ë™øÊï¥Ôºâ
        const estimatedCounts = {
            'all': 500,
            'free': 300,
            'paid': 200,
            'standard': 150,
            'premium': 50
        };
        
        return estimatedCounts[targetPlan] || 100;
    }

    // ÁèæÂú®„ÅÆIP„Ç¢„Éâ„É¨„ÇπÂèñÂæó
    async function getCurrentIP() {
        try {
            const response = await fetch('https://api.ipify.org?format=json');
            const data = await response.json();
            document.getElementById('currentIp').textContent = data.ip;
        } catch (error) {
            console.error('IPÂèñÂæó„Ç®„É©„Éº:', error);
            document.getElementById('currentIp').textContent = 'ÂèñÂæóÂ§±Êïó';
        }
    }

    // UnsubscribeÊ©üËÉΩÈñ¢ÈÄ£
    let unsubscribeSettings = {
        autoUnsubscribeLink: true,
        unsubscribeLinkText: 'ÈÖç‰ø°ÂÅúÊ≠¢„ÅØ„Åì„Å°„Çâ',
        allowSelfResubscribe: false
    };

    // UnsubscribeË®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø
    function loadUnsubscribeSettings() {
        try {
            const saved = localStorage.getItem('newsletter-unsubscribe');
            if (saved) {
                unsubscribeSettings = { ...unsubscribeSettings, ...JSON.parse(saved) };
            }
            
            document.getElementById('autoUnsubscribeLink').checked = unsubscribeSettings.autoUnsubscribeLink;
            document.getElementById('unsubscribeLinkText').value = unsubscribeSettings.unsubscribeLinkText;
            document.getElementById('allowSelfResubscribe').checked = unsubscribeSettings.allowSelfResubscribe;
            
            updateUnsubscribePreview();
            
        } catch (error) {
            console.error('UnsubscribeË®≠ÂÆöË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        }
    }

    // UnsubscribeË®≠ÂÆö„Çí‰øùÂ≠ò
    function saveUnsubscribeSettings() {
        try {
            localStorage.setItem('newsletter-unsubscribe', JSON.stringify(unsubscribeSettings));
        } catch (error) {
            console.error('UnsubscribeË®≠ÂÆö‰øùÂ≠ò„Ç®„É©„Éº:', error);
        }
    }

    // ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„Éà„ÅÆÁÆ°ÁêÜ
    function getUnsubscribedUsers() {
        try {
            return JSON.parse(localStorage.getItem('newsletter-unsubscribed') || '[]');
        } catch (error) {
            console.error('ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„ÉàÂèñÂæó„Ç®„É©„Éº:', error);
            return [];
        }
    }

    function addUnsubscribedUser(email, reason = 'manual', timestamp = null) {
        try {
            const unsubscribed = getUnsubscribedUsers();
            const existing = unsubscribed.find(user => user.email === email);
            
            if (existing) {
                return false; // Êó¢„Å´ÈÖç‰ø°ÂÅúÊ≠¢Ê∏à„Åø
            }
            
            unsubscribed.push({
                email: email,
                reason: reason,
                timestamp: timestamp || new Date().toISOString(),
                ip: document.getElementById('currentIp')?.textContent || 'unknown'
            });
            
            localStorage.setItem('newsletter-unsubscribed', JSON.stringify(unsubscribed));
            return true;
        } catch (error) {
            console.error('ÈÖç‰ø°ÂÅúÊ≠¢ËøΩÂä†„Ç®„É©„Éº:', error);
            return false;
        }
    }

    function removeUnsubscribedUser(email) {
        try {
            const unsubscribed = getUnsubscribedUsers();
            const filtered = unsubscribed.filter(user => user.email !== email);
            localStorage.setItem('newsletter-unsubscribed', JSON.stringify(filtered));
            return true;
        } catch (error) {
            console.error('ÈÖç‰ø°ÂÅúÊ≠¢ÂâäÈô§„Ç®„É©„Éº:', error);
            return false;
        }
    }

    // ÈÖç‰ø°ÂÅúÊ≠¢Áµ±Ë®à„ÇíÊõ¥Êñ∞
    function updateUnsubscribeStats() {
        const unsubscribed = getUnsubscribedUsers();
        const now = new Date();
        const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);
        
        const monthlyCount = unsubscribed.filter(user => {
            const unsubDate = new Date(user.timestamp);
            return unsubDate >= thisMonth;
        }).length;
        
        document.getElementById('totalUnsubscribed').textContent = unsubscribed.length;
        document.getElementById('monthlyUnsubscribed').textContent = monthlyCount;
    }

    // ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„Éà„ÇíË°®Á§∫
    function showUnsubscribedUsers() {
        const listArea = document.getElementById('unsubscribeListArea');
        const unsubscribed = getUnsubscribedUsers();
        
        if (unsubscribed.length === 0) {
            listArea.innerHTML = '<div style="color: #6b7280; text-align: center;">üìÑ ÈÖç‰ø°ÂÅúÊ≠¢„É¶„Éº„Ç∂„Éº„ÅØ„ÅÑ„Åæ„Åõ„Çì</div>';
            return;
        }
        
        let html = '';
        unsubscribed.forEach((user, index) => {
            const date = new Date(user.timestamp).toLocaleString('ja-JP');
            const reasonText = {
                'manual': 'ÊâãÂãïËøΩÂä†',
                'user_request': '„É¶„Éº„Ç∂„Éº„É™„ÇØ„Ç®„Çπ„Éà',
                'bounce': 'ÈÖç‰ø°„Ç®„É©„Éº',
                'complaint': 'Ëã¶ÊÉÖ'
            }[user.reason] || user.reason;
            
            html += `
                <div style="padding: 10px; border-bottom: 1px solid #e5e7eb; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <div style="font-weight: 600; color: #374151;">${user.email}</div>
                        <div style="font-size: 0.9rem; color: #6b7280;">
                            ÁêÜÁî±: ${reasonText} | Êó•ÊôÇ: ${date} | IP: ${user.ip}
                        </div>
                    </div>
                    <button onclick="removeUnsubscribeUser('${user.email}')" class="btn btn-success" style="padding: 5px 10px; font-size: 0.8rem;">
                        ‚úÖ ÂÜçË≥ºË™≠
                    </button>
                </div>
            `;
        });
        
        listArea.innerHTML = html;
    }

    // Unsubscribe„É™„É≥„ÇØ„Éó„É¨„Éì„É•„Éº„ÇíÊõ¥Êñ∞
    function updateUnsubscribePreview() {
        const linkText = unsubscribeSettings.unsubscribeLinkText;
        const preview = document.getElementById('unsubscribePreview');
        
        if (unsubscribeSettings.autoUnsubscribeLink) {
            preview.innerHTML = `
                <div style="text-align: center; margin-top: 20px; padding: 10px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280;">
                    <a href="#" style="color: #3b82f6; text-decoration: underline;">${linkText}</a><br>
                    NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ | „Äí100-0001 Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫
                </div>
            `;
        } else {
            preview.innerHTML = '<div style="color: #9ca3af; text-align: center; font-style: italic;">Unsubscribe„É™„É≥„ÇØ„ÅØË°®Á§∫„Åï„Çå„Åæ„Åõ„Çì</div>';
        }
    }

    // „É°„Éº„É´ÈÄÅ‰ø°ÊôÇ„Å´Unsubscribe„É™„É≥„ÇØ„ÇíËá™ÂãïËøΩÂä†
    function addUnsubscribeFooter(htmlContent) {
        if (!unsubscribeSettings.autoUnsubscribeLink) {
            return htmlContent;
        }
        
        const unsubscribeFooter = `
            <div style="text-align: center; margin-top: 30px; padding: 20px; border-top: 2px solid #e5e7eb; background: #f9fafb;">
                <div style="font-size: 12px; color: #6b7280; line-height: 1.5;">
                    <p style="margin: 0 0 10px 0;">
                        <a href="{{unsubscribe_url}}" style="color: #3b82f6; text-decoration: underline;">${unsubscribeSettings.unsubscribeLinkText}</a>
                    </p>
                    <p style="margin: 0; font-size: 11px;">
                        NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ<br>
                        „Äí100-0001 Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫<br>
                        „Åì„ÅÆ„É°„Éº„É´„Å´ÂøÉÂΩì„Åü„Çä„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ„ÅäÊâãÊï∞„Åß„Åô„Åå‰∏äË®ò„É™„É≥„ÇØ„Åã„ÇâÈÖç‰ø°ÂÅúÊ≠¢„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ
                    </p>
                </div>
            </div>
        `;
        
        // </body>„Çø„Ç∞„ÅÆÁõ¥Ââç„Å´ÊåøÂÖ•
        if (htmlContent.includes('</body>')) {
            return htmlContent.replace('</body>', unsubscribeFooter + '</body>');
        } else {
            return htmlContent + unsubscribeFooter;
        }
    }

    // UnsubscribeË®≠ÂÆö„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    document.getElementById('autoUnsubscribeLink')?.addEventListener('change', (e) => {
        unsubscribeSettings.autoUnsubscribeLink = e.target.checked;
        saveUnsubscribeSettings();
        updateUnsubscribePreview();
    });

    document.getElementById('unsubscribeLinkText')?.addEventListener('input', (e) => {
        unsubscribeSettings.unsubscribeLinkText = e.target.value;
        saveUnsubscribeSettings();
        updateUnsubscribePreview();
    });

    document.getElementById('allowSelfResubscribe')?.addEventListener('change', (e) => {
        unsubscribeSettings.allowSelfResubscribe = e.target.checked;
        saveUnsubscribeSettings();
    });

    // ÈÖç‰ø°ÂÅúÊ≠¢„É¶„Éº„Ç∂„ÉºË°®Á§∫
    document.getElementById('showUnsubscribedBtn')?.addEventListener('click', () => {
        showUnsubscribedUsers();
        updateUnsubscribeStats();
    });

    // ÊâãÂãïÈÖç‰ø°ÂÅúÊ≠¢ËøΩÂä†
    document.getElementById('addUnsubscribeBtn')?.addEventListener('click', () => {
        const email = prompt('ÈÖç‰ø°ÂÅúÊ≠¢„Åô„Çã„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:');
        if (email && email.includes('@')) {
            if (addUnsubscribedUser(email, 'manual')) {
                alert('ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„Éà„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü');
                showUnsubscribedUsers();
                updateUnsubscribeStats();
            } else {
                alert('Êó¢„Å´ÈÖç‰ø°ÂÅúÊ≠¢Ê∏à„Åø„Åã„ÄÅËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } else if (email) {
            alert('ÊúâÂäπ„Å™„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        }
    });

    // ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„ÉàÂá∫Âäõ
    document.getElementById('exportUnsubscribeBtn')?.addEventListener('click', () => {
        try {
            const unsubscribed = getUnsubscribedUsers();
            if (unsubscribed.length === 0) {
                alert('ÈÖç‰ø°ÂÅúÊ≠¢„É¶„Éº„Ç∂„Éº„Åå„ÅÑ„Åæ„Åõ„Çì');
                return;
            }
            
            const csv = 'Email,Reason,Timestamp,IP\n' + 
                       unsubscribed.map(user => `"${user.email}","${user.reason}","${user.timestamp}","${user.ip}"`).join('\n');
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `unsubscribed-users-${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
        } catch (error) {
            alert('„É™„Çπ„ÉàÂá∫Âäõ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            console.error('ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„ÉàÂá∫Âäõ„Ç®„É©„Éº:', error);
        }
    });

    // ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„Éà„ÇØ„É™„Ç¢
    document.getElementById('clearUnsubscribeBtn')?.addEventListener('click', () => {
        if (confirm('ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„Éà„Çí„Åô„Åπ„Å¶„ÇØ„É™„Ç¢„Åó„Åæ„Åô„ÅãÔºü\n„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ')) {
            localStorage.removeItem('newsletter-unsubscribed');
            showUnsubscribedUsers();
            updateUnsubscribeStats();
            alert('ÈÖç‰ø°ÂÅúÊ≠¢„É™„Çπ„Éà„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü');
        }
    });

    // ÂÜçË≥ºË™≠Âá¶ÁêÜ
    document.getElementById('resubscribeBtn')?.addEventListener('click', () => {
        const email = document.getElementById('resubscribeEmail').value;
        if (email && email.includes('@')) {
            if (removeUnsubscribedUser(email)) {
                alert('ÂÜçË≥ºË™≠„ÇíË®±ÂèØ„Åó„Åæ„Åó„Åü');
                document.getElementById('resubscribeEmail').value = '';
                showUnsubscribedUsers();
                updateUnsubscribeStats();
            } else {
                alert('Ë©≤ÂΩì„Åô„Çã„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„Åã„ÄÅÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } else {
            alert('ÊúâÂäπ„Å™„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        }
    });

    // „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºÊ©üËÉΩÈñ¢ÈÄ£
    let sendProgress = {
        isActive: false,
        isCancelled: false,
        currentStep: 0,
        totalRecipients: 0,
        sentCount: 0,
        failedCount: 0,
        startTime: null,
        steps: [
            { id: 'step1', label: '„Éá„Éº„ÇøÊ§úË®º‰∏≠...', icon: 'üîç' },
            { id: 'step2', label: 'Âèó‰ø°ËÄÖ„É™„Çπ„ÉàÊ∫ñÂÇô‰∏≠...', icon: 'üìã' },
            { id: 'step3', label: '„É°„Éº„É´ÈÄÅ‰ø°‰∏≠...', icon: 'üìß' },
            { id: 'step4', label: 'ÁµêÊûúÁ¢∫Ë™ç‰∏≠...', icon: '‚úÖ' }
        ]
    };

    // „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„ÇíË°®Á§∫
    function showProgressBar(totalRecipients) {
        sendProgress.isActive = true;
        sendProgress.isCancelled = false;
        sendProgress.currentStep = 0;
        sendProgress.totalRecipients = totalRecipients;
        sendProgress.sentCount = 0;
        sendProgress.failedCount = 0;
        sendProgress.startTime = new Date();

        const progressArea = document.getElementById('sendProgressArea');
        progressArea.style.display = 'block';

        // ÈÄÅ‰ø°„Éú„Çø„É≥„ÇíÁÑ°ÂäπÂåñ
        const sendBtn = document.getElementById('sendBtn');
        sendBtn.disabled = true;
        sendBtn.textContent = 'ÈÖç‰ø°‰∏≠...';

        // „Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥Ë°®Á§∫
        document.getElementById('cancelSendBtn').style.display = 'inline-block';
        document.getElementById('hideProgressBtn').style.display = 'none';

        // ÂàùÊúüÁµ±Ë®àË®≠ÂÆö
        updateProgressStats();

        // ÊúÄÂàù„ÅÆ„Çπ„ÉÜ„ÉÉ„ÉóÈñãÂßã
        setProgressStep(0);

        // „Çπ„ÇØ„É≠„Éº„É´„Åó„Å¶Ë°®Á§∫
        progressArea.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    // „Éó„É≠„Ç∞„É¨„Çπ„Çπ„ÉÜ„ÉÉ„Éó„ÇíË®≠ÂÆö
    function setProgressStep(stepIndex) {
        if (stepIndex >= sendProgress.steps.length) return;

        sendProgress.currentStep = stepIndex;
        const step = sendProgress.steps[stepIndex];

        // „Éó„É≠„Ç∞„É¨„Çπ„É©„Éô„É´Êõ¥Êñ∞
        document.getElementById('progressLabel').textContent = step.icon + ' ' + step.label;

        // „Çπ„ÉÜ„ÉÉ„ÉóÁä∂ÊÖãÊõ¥Êñ∞
        sendProgress.steps.forEach((s, index) => {
            const stepElement = document.getElementById(s.id);
            stepElement.className = 'progress-step';

            if (index < stepIndex) {
                stepElement.className += ' completed';
                stepElement.textContent = '‚úÖ ' + s.label.replace('‰∏≠...', 'ÂÆå‰∫Ü');
            } else if (index === stepIndex) {
                stepElement.className += ' active';
                stepElement.textContent = s.icon + ' ' + s.label;
            } else {
                stepElement.textContent = '‚è≥ ' + s.label;
            }
        });

        // „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºÊõ¥Êñ∞
        const baseProgress = (stepIndex / sendProgress.steps.length) * 100;
        updateProgressBar(baseProgress);
    }

    // „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„ÇíÊõ¥Êñ∞
    function updateProgressBar(percentage) {
        const progressBar = document.getElementById('progressBar');
        const progressPercentage = document.getElementById('progressPercentage');

        progressBar.style.width = Math.min(100, Math.max(0, percentage)) + '%';
        progressPercentage.textContent = Math.round(percentage) + '%';
    }

    // ÈÄÅ‰ø°Áµ±Ë®à„ÇíÊõ¥Êñ∞
    function updateProgressStats() {
        document.getElementById('sentCount').textContent = sendProgress.sentCount;
        document.getElementById('failedCount').textContent = sendProgress.failedCount;
        document.getElementById('remainingCount').textContent = 
            Math.max(0, sendProgress.totalRecipients - sendProgress.sentCount - sendProgress.failedCount);

        // ‰∫àÊÉ≥ÊôÇÈñìË®àÁÆó
        if (sendProgress.sentCount > 0 && sendProgress.startTime) {
            const elapsedTime = (new Date() - sendProgress.startTime) / 1000; // Áßí
            const avgTimePerEmail = elapsedTime / sendProgress.sentCount;
            const remainingEmails = sendProgress.totalRecipients - sendProgress.sentCount - sendProgress.failedCount;
            const estimatedSeconds = avgTimePerEmail * remainingEmails;

            if (remainingEmails > 0) {
                const minutes = Math.floor(estimatedSeconds / 60);
                const seconds = Math.floor(estimatedSeconds % 60);
                document.getElementById('estimatedTime').textContent = 
                    minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;
            } else {
                document.getElementById('estimatedTime').textContent = 'ÂÆå‰∫Ü';
            }
        }
    }

    // ÈÄÅ‰ø°ÈÄ≤Êçó„ÇíÊõ¥Êñ∞
    function updateSendProgress(sent, failed) {
        sendProgress.sentCount = sent;
        sendProgress.failedCount = failed;

        const totalProcessed = sent + failed;
        const stepProgress = sendProgress.currentStep === 2 ? 
            50 + (totalProcessed / sendProgress.totalRecipients) * 50 : 
            (sendProgress.currentStep / sendProgress.steps.length) * 100;

        updateProgressBar(stepProgress);
        updateProgressStats();
    }

    // „Éó„É≠„Ç∞„É¨„ÇπÂÆå‰∫Ü
    function completeProgress(success = true, finalMessage = '') {
        sendProgress.isActive = false;

        if (success) {
            setProgressStep(sendProgress.steps.length);
            updateProgressBar(100);
            
            document.getElementById('progressLabel').textContent = '‚úÖ ÈÖç‰ø°ÂÆå‰∫ÜÔºÅ';
            
            if (finalMessage) {
                const progressArea = document.getElementById('sendProgressArea');
                const messageDiv = document.createElement('div');
                messageDiv.style.cssText = 'margin-top: 15px; padding: 15px; background: #ecfdf5; border: 1px solid #a7f3d0; border-radius: 8px; color: #047857; font-weight: 600;';
                messageDiv.innerHTML = 'üéâ ' + finalMessage;
                progressArea.appendChild(messageDiv);
            }
        } else {
            document.getElementById('progressLabel').textContent = '‚ùå ÈÖç‰ø°‰∏≠Êñ≠';
            document.getElementById('progressBar').style.background = '#dc2626';
        }

        // „Éú„Çø„É≥Áä∂ÊÖã„É™„Çª„ÉÉ„Éà
        const sendBtn = document.getElementById('sendBtn');
        sendBtn.disabled = false;
        sendBtn.textContent = 'ÈÖç‰ø°ÂÆüË°å';

        document.getElementById('cancelSendBtn').style.display = 'none';
        document.getElementById('hideProgressBtn').style.display = 'inline-block';

        // ÊúÄÁµÇÁµ±Ë®àÊõ¥Êñ∞
        updateProgressStats();
    }

    // „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„ÇíÈùûË°®Á§∫
    function hideProgressBar() {
        document.getElementById('sendProgressArea').style.display = 'none';
        sendProgress.isActive = false;
    }

    // ÈÄÅ‰ø°„Ç≠„É£„É≥„Çª„É´
    function cancelSending() {
        if (confirm('ÈÖç‰ø°„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åô„ÅãÔºü\nÊó¢„Å´ÈÄÅ‰ø°„Åï„Çå„Åü„É°„Éº„É´„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ')) {
            sendProgress.isCancelled = true;
            completeProgress(false);
            
            // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞Ë®òÈå≤
            logSecurityEvent('SEND_CANCELLED', 'ÈÖç‰ø°„Åå„É¶„Éº„Ç∂„Éº„Å´„Çà„Å£„Å¶„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü', 'warning');
            
            alert('ÈÖç‰ø°„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü');
        }
    }

    // È´òÂ∫¶„Å™„Çπ„Ç±„Ç∏„É•„Éº„É´Ê©üËÉΩÈñ¢ÈÄ£
    let scheduleSettings = {
        type: 'immediate',
        scheduledDateTime: null,
        timezone: 'Asia/Tokyo',
        recurring: {
            frequency: 'daily',
            time: '09:00',
            startDate: null,
            endDate: null,
            weekdays: []
        }
    };

    // „Çπ„Ç±„Ç∏„É•„Éº„É´„Çø„Ç§„ÉóÂ§âÊõ¥
    function updateScheduleType() {
        const immediate = document.getElementById('scheduleImmediate');
        const scheduled = document.getElementById('scheduleReserved');
        const recurring = document.getElementById('scheduleRecurring');
        
        const scheduledSection = document.getElementById('scheduledSection');
        const recurringSection = document.getElementById('recurringSection');
        const scheduleStatus = document.getElementById('scheduleStatus');
        
        if (immediate?.checked) {
            scheduleSettings.type = 'immediate';
            scheduledSection.style.display = 'none';
            recurringSection.style.display = 'none';
            scheduleStatus.innerHTML = 'üöÄ Âç≥ÊôÇÈÖç‰ø°';
            scheduleStatus.style.background = '#ecfdf5';
            scheduleStatus.style.color = '#047857';
        } else if (scheduled?.checked) {
            scheduleSettings.type = 'scheduled';
            scheduledSection.style.display = 'block';
            recurringSection.style.display = 'none';
            scheduleStatus.innerHTML = 'üìÖ ‰∫àÁ¥ÑÈÖç‰ø°';
            scheduleStatus.style.background = '#eff6ff';
            scheduleStatus.style.color = '#1d4ed8';
            updateScheduleDateTime();
        } else if (recurring?.checked) {
            scheduleSettings.type = 'recurring';
            scheduledSection.style.display = 'none';
            recurringSection.style.display = 'block';
            scheduleStatus.innerHTML = 'üîÑ ÂÆöÊúüÈÖç‰ø°';
            scheduleStatus.style.background = '#f3f4f6';
            scheduleStatus.style.color = '#7c2d12';
            updateRecurringPreview();
        }
    }

    // Êó•ÊôÇ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÈñ¢Êï∞
    function formatDateTime(date, timezone = 'Asia/Tokyo') {
        return date.toLocaleString('ja-JP', {
            timeZone: timezone,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    // „ÇØ„Ç§„ÉÉ„ÇØË®≠ÂÆöÊ©üËÉΩ
    function setupQuickSchedule() {
        // „Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´ÁèæÂú®ÊôÇÂàª„ÇíÂèñÂæó„Åô„Çã„Çà„ÅÜ„Å´‰øÆÊ≠£
        
        document.getElementById('schedule1Hour')?.addEventListener('click', () => {
            const now = new Date(); // „ÇØ„É™„ÉÉ„ÇØÊôÇ„ÅÆÁèæÂú®ÊôÇÂàª„ÇíÂèñÂæó
            const oneHourLater = new Date(now.getTime() + 60 * 60 * 1000);
            setScheduleDateTime(oneHourLater);
            console.log('1ÊôÇÈñìÂæåË®≠ÂÆö:', oneHourLater.toLocaleString('ja-JP'));
        });
        
        document.getElementById('schedule3Hours')?.addEventListener('click', () => {
            const now = new Date(); // „ÇØ„É™„ÉÉ„ÇØÊôÇ„ÅÆÁèæÂú®ÊôÇÂàª„ÇíÂèñÂæó
            const threeHoursLater = new Date(now.getTime() + 3 * 60 * 60 * 1000);
            setScheduleDateTime(threeHoursLater);
            console.log('3ÊôÇÈñìÂæåË®≠ÂÆö:', threeHoursLater.toLocaleString('ja-JP'));
        });
        
        document.getElementById('scheduleTomorrow9AM')?.addEventListener('click', () => {
            const now = new Date(); // „ÇØ„É™„ÉÉ„ÇØÊôÇ„ÅÆÁèæÂú®ÊôÇÂàª„ÇíÂèñÂæó
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            tomorrow.setHours(9, 0, 0, 0);
            
            // 72ÊôÇÈñì‰ª•ÂÜÖ„ÉÅ„Çß„ÉÉ„ÇØ
            const hoursDiff = (tomorrow - now) / (1000 * 60 * 60);
            if (hoursDiff <= 72) {
                setScheduleDateTime(tomorrow);
                console.log('ÊòéÊó•9ÊôÇË®≠ÂÆö:', tomorrow.toLocaleString('ja-JP'));
            } else {
                alert('‚ö†Ô∏è ÊòéÊó•9ÊôÇ„ÅØ72ÊôÇÈñì„ÇíË∂Ö„Åà„Çã„Åü„ÇÅ„ÄÅÈÖç‰ø°„Åï„Çå„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\n72ÊôÇÈñì‰ª•ÂÜÖ„ÅÆÊôÇÈñì„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
            }
        });
        
        document.getElementById('scheduleMonday9AM')?.addEventListener('click', () => {
            const now = new Date(); // „ÇØ„É™„ÉÉ„ÇØÊôÇ„ÅÆÁèæÂú®ÊôÇÂàª„ÇíÂèñÂæó
            const nextMonday = new Date(now);
            const daysUntilMonday = (1 + 7 - now.getDay()) % 7 || 7;
            nextMonday.setDate(now.getDate() + daysUntilMonday);
            nextMonday.setHours(9, 0, 0, 0);
            
            // 72ÊôÇÈñì‰ª•ÂÜÖ„ÉÅ„Çß„ÉÉ„ÇØ
            const hoursDiff = (nextMonday - now) / (1000 * 60 * 60);
            if (hoursDiff <= 72) {
                setScheduleDateTime(nextMonday);
                console.log('Êù•ÈÄ±ÊúàÊõú9ÊôÇË®≠ÂÆö:', nextMonday.toLocaleString('ja-JP'));
            } else {
                alert(`‚ö†Ô∏è Êù•ÈÄ±ÊúàÊõúÊó•„ÅØ${Math.round(hoursDiff)}ÊôÇÈñìÂæå„Åß72ÊôÇÈñì„ÇíË∂Ö„Åà„Çã„Åü„ÇÅ„ÄÅÈÖç‰ø°„Åï„Çå„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\n72ÊôÇÈñì‰ª•ÂÜÖÔºà3Êó•‰ª•ÂÜÖÔºâ„ÅÆÊôÇÈñì„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
            }
        });
    }

    // Êó•ÊôÇË®≠ÂÆöÔºà„É≠„Éº„Ç´„É´ÊôÇÈñì„ÅßÊ≠£„Åó„ÅèË®≠ÂÆöÔºâ
    function setScheduleDateTime(date) {
        // toISOString()„ÅØUTC„Å™„ÅÆ„Åß„ÄÅ„É≠„Éº„Ç´„É´ÊôÇÈñì„Å´Â§âÊèõ
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        
        const datetimeLocal = `${year}-${month}-${day}T${hours}:${minutes}`;
        document.getElementById('scheduledAt').value = datetimeLocal;
        
        console.log('Ë®≠ÂÆö„Åô„ÇãÊó•ÊôÇ:', date.toLocaleString('ja-JP'));
        console.log('inputÂÄ§:', datetimeLocal);
        
        updateScheduleDateTime();
    }

    // ‰∫àÁ¥ÑÈÖç‰ø°„ÅÆÊó•ÊôÇË°®Á§∫Êõ¥Êñ∞
    function updateScheduleDateTime() {
        const scheduledAt = document.getElementById('scheduledAt').value;
        const scheduleStatus = document.getElementById('scheduleStatus');
        const scheduleWarning = document.getElementById('scheduleWarning');
        const scheduleValid = document.getElementById('scheduleValid');
        
        // Ë≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈùûË°®Á§∫
        if (scheduleWarning) scheduleWarning.style.display = 'none';
        if (scheduleValid) scheduleValid.style.display = 'none';
        
        if (scheduledAt) {
            const selectedDate = new Date(scheduledAt);
            const now = new Date();
            const timezone = document.getElementById('scheduleTimezone').value;
            const hoursDiff = (selectedDate - now) / (1000 * 60 * 60); // ÊôÇÈñìÂ∑Æ
            
            if (selectedDate > now) {
                // 72ÊôÇÈñìÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
                if (hoursDiff > 72) {
                    scheduleStatus.innerHTML = `‚ö†Ô∏è ${formatDateTime(selectedDate, timezone)} - ÈÖç‰ø°Â§±Êïó„É™„Çπ„ÇØÈ´ò`;
                    scheduleStatus.style.background = '#fef2f2';
                    scheduleStatus.style.color = '#dc2626';
                    if (scheduleWarning) {
                        scheduleWarning.style.display = 'block';
                        scheduleWarning.innerHTML = `‚ö†Ô∏è ${Math.round(hoursDiff)}ÊôÇÈñìÂæå„ÅÆ‰∫àÁ¥Ñ„Åß„Åô„ÄÇ72ÊôÇÈñì„ÇíË∂Ö„Åà„Çã„Å®ÈÖç‰ø°„Åï„Çå„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ`;
                    }
                } else {
                    scheduleStatus.innerHTML = `üìÖ ${formatDateTime(selectedDate, timezone)} ÈÖç‰ø°‰∫àÂÆö`;
                    scheduleStatus.style.background = '#f0fdf4';
                    scheduleStatus.style.color = '#16a34a';
                    if (scheduleValid) {
                        scheduleValid.style.display = 'block';
                        scheduleValid.innerHTML = `‚úÖ ${Math.round(hoursDiff)}ÊôÇÈñìÂæå„ÅÆÈÖç‰ø° - Ê≠£Â∏∏„Å´Âãï‰Ωú„Åó„Åæ„Åô`;
                    }
                }
            } else {
                scheduleStatus.innerHTML = '‚ö†Ô∏è ÈÅéÂéª„ÅÆÊó•ÊôÇ„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åô';
                scheduleStatus.style.background = '#fef2f2';
                scheduleStatus.style.color = '#dc2626';
            }
        } else {
            scheduleStatus.innerHTML = 'üìÖ ‰∫àÁ¥ÑÈÖç‰ø° - Êó•ÊôÇ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
            scheduleStatus.style.background = '#fefce8';
            scheduleStatus.style.color = '#a16207';
        }
    }

    // ÂÆöÊúüÈÖç‰ø°„Éó„É¨„Éì„É•„ÉºÊõ¥Êñ∞
    function updateRecurringPreview() {
        const frequency = document.getElementById('recurringFrequency')?.value;
        const time = document.getElementById('recurringTime')?.value;
        const startDate = document.getElementById('recurringStartDate')?.value;
        const endDate = document.getElementById('recurringEndDate')?.value;
        const previewText = document.getElementById('recurringPreviewText');
        
        if (!previewText) return;
        
        let preview = '';
        
        if (frequency === 'daily') {
            preview = `ÊØéÊó• ${time} „Å´ÈÖç‰ø°`;
        } else if (frequency === 'weekly') {
            const selectedWeekdays = [];
            ['recurMon', 'recurTue', 'recurWed', 'recurThu', 'recurFri', 'recurSat', 'recurSun'].forEach(id => {
                const checkbox = document.getElementById(id);
                if (checkbox?.checked) {
                    const dayNames = { recurMon: 'Êúà', recurTue: 'ÁÅ´', recurWed: 'Ê∞¥', recurThu: 'Êú®', recurFri: 'Èáë', recurSat: 'Âúü', recurSun: 'Êó•' };
                    selectedWeekdays.push(dayNames[id]);
                }
            });
            
            if (selectedWeekdays.length > 0) {
                preview = `ÊØéÈÄ± ${selectedWeekdays.join('„Éª')}ÊõúÊó• ${time} „Å´ÈÖç‰ø°`;
            } else {
                preview = `ÊØéÈÄ± ${time} „Å´ÈÖç‰ø° (ÊõúÊó•„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ)`;
            }
        } else if (frequency === 'monthly') {
            preview = `ÊØéÊúà1Êó• ${time} „Å´ÈÖç‰ø°`;
        }
        
        if (startDate) {
            preview += `<br>ÈñãÂßã: ${new Date(startDate).toLocaleDateString('ja-JP')}`;
        }
        if (endDate) {
            preview += ` | ÁµÇ‰∫Ü: ${new Date(endDate).toLocaleDateString('ja-JP')}`;
        }
        
        previewText.innerHTML = preview || 'Ë®≠ÂÆö„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
    }

    // ÂÆöÊúüÈÖç‰ø°„ÅÆÈ†ªÂ∫¶Â§âÊõ¥ÊôÇ„ÅÆÂá¶ÁêÜ
    function updateRecurringFrequency() {
        const frequency = document.getElementById('recurringFrequency')?.value;
        const weeklySchedule = document.getElementById('weeklySchedule');
        
        if (frequency === 'weekly') {
            weeklySchedule.style.display = 'block';
        } else {
            weeklySchedule.style.display = 'none';
        }
        
        updateRecurringPreview();
    }

    // „Çπ„Ç±„Ç∏„É•„Éº„É´Èñ¢ÈÄ£„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    document.getElementById('scheduleImmediate')?.addEventListener('change', updateScheduleType);
    document.getElementById('scheduleReserved')?.addEventListener('change', updateScheduleType);
    document.getElementById('scheduleRecurring')?.addEventListener('change', updateScheduleType);
    
    document.getElementById('scheduledAt')?.addEventListener('change', updateScheduleDateTime);
    document.getElementById('scheduleTimezone')?.addEventListener('change', updateScheduleDateTime);
    
    document.getElementById('recurringFrequency')?.addEventListener('change', updateRecurringFrequency);
    document.getElementById('recurringTime')?.addEventListener('change', updateRecurringPreview);
    document.getElementById('recurringStartDate')?.addEventListener('change', updateRecurringPreview);
    document.getElementById('recurringEndDate')?.addEventListener('change', updateRecurringPreview);
    
    // ÈÄ±Èñì„Çπ„Ç±„Ç∏„É•„Éº„É´„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ
    ['recurMon', 'recurTue', 'recurWed', 'recurThu', 'recurFri', 'recurSat', 'recurSun'].forEach(id => {
        document.getElementById(id)?.addEventListener('change', updateRecurringPreview);
    });

    // ÂÆöÊúüÈÖç‰ø°„ÅÆÂàùÊúüË®≠ÂÆö
    function initializeRecurringSettings() {
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);
        
        document.getElementById('recurringStartDate').value = tomorrow.toISOString().split('T')[0];
        updateRecurringFrequency();
    }

    // „É™„Ç¢„É´„Çø„Ç§„É†ÈÖç‰ø°„É¢„Éã„ÇøÊ©üËÉΩ
    let realtimeMonitor = {
        isActive: true,
        autoRefresh: true,
        updateInterval: null,
        logs: [],
        maxLogs: 100,
        stats: {
            sentToday: 0,
            successRate: 100,
            activeUsers: 0,
            queueSize: 0
        }
    };

    // „É™„Ç¢„É´„Çø„Ç§„É†„É≠„Ç∞„Å´ËøΩÂä†
    function addRealtimeLog(message, type = 'info', data = null) {
        const now = new Date();
        const timestamp = now.toLocaleTimeString('ja-JP');
        
        const logEntry = {
            timestamp: timestamp,
            message: message,
            type: type,
            data: data,
            id: Date.now()
        };
        
        realtimeMonitor.logs.unshift(logEntry);
        
        // „É≠„Ç∞Êï∞Âà∂Èôê
        if (realtimeMonitor.logs.length > realtimeMonitor.maxLogs) {
            realtimeMonitor.logs.pop();
        }
        
        updateRealtimeLogDisplay();
    }

    // „É™„Ç¢„É´„Çø„Ç§„É†„É≠„Ç∞Ë°®Á§∫„ÇíÊõ¥Êñ∞
    function updateRealtimeLogDisplay() {
        const logArea = document.getElementById('realtimeLogArea');
        if (!logArea) return;
        
        let html = '';
        realtimeMonitor.logs.forEach(log => {
            const color = {
                'info': '#64748b',
                'success': '#10b981',
                'warning': '#f59e0b',
                'error': '#ef4444'
            }[log.type] || '#64748b';
            
            const icon = {
                'info': 'üìã',
                'success': '‚úÖ',
                'warning': '‚ö†Ô∏è',
                'error': '‚ùå'
            }[log.type] || 'üìã';
            
            html += `<div style="color: ${color};">[${log.timestamp}] ${icon} ${log.message}</div>`;
        });
        
        // ÂàùÊúü„É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ‰øùÊåÅ
        if (html === '') {
            html = `
                <div style="color: #64748b;">üìä „É™„Ç¢„É´„Çø„Ç§„É†„É≠„Ç∞„ÇíÁõ£Ë¶ñ‰∏≠...</div>
                <div style="color: #10b981;">‚úÖ „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü</div>
                <div style="color: #64748b;">[${new Date().toLocaleTimeString('ja-JP')}] „É¢„Éã„Çø„É™„É≥„Ç∞ÈñãÂßã</div>
            `;
        }
        
        logArea.innerHTML = html;
        
        // Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´
        logArea.scrollTop = 0;
    }

    // „É™„Ç¢„É´„Çø„Ç§„É†Áµ±Ë®à„ÇíÊõ¥Êñ∞
    function updateRealtimeStats() {
        try {
            const history = JSON.parse(localStorage.getItem('newsletter-history') || '[]');
            const today = new Date();
            const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
            
            // ‰ªäÊó•„ÅÆÈÖç‰ø°Áµ±Ë®à
            let todaySent = 0;
            let todayFailed = 0;
            
            history.forEach(item => {
                const itemDate = new Date(item.createdAt || item.scheduledAt);
                if (itemDate >= todayStart) {
                    todaySent += item.recipientCount || 0;
                    todayFailed += item.failedCount || 0;
                }
            });
            
            // ÊàêÂäüÁéáË®àÁÆó
            const successRate = todaySent + todayFailed > 0 ? 
                ((todaySent / (todaySent + todayFailed)) * 100).toFixed(1) : '100';
            
            // UIÊõ¥Êñ∞
            document.getElementById('realtimeSentToday').textContent = todaySent;
            document.getElementById('realtimeSuccessRate').textContent = successRate + '%';
            document.getElementById('realtimeActiveUsers').textContent = Math.floor(Math.random() * 50) + 10; // „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
            document.getElementById('realtimeQueueSize').textContent = sendProgress.isActive ? 
                Math.max(0, sendProgress.totalRecipients - sendProgress.sentCount - sendProgress.failedCount) : 0;
            
            // ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÂàª
            document.getElementById('realtimeLastUpdate').textContent = new Date().toLocaleTimeString('ja-JP');
            
            // „Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞
            const statusElement = document.getElementById('realtimeStatus');
            if (parseFloat(successRate) >= 95) {
                statusElement.innerHTML = 'üü¢ „Ç∑„Çπ„ÉÜ„É†Ê≠£Â∏∏';
                statusElement.style.color = '#059669';
            } else if (parseFloat(successRate) >= 80) {
                statusElement.innerHTML = 'üü° Ê≥®ÊÑè„ÅåÂøÖË¶Å';
                statusElement.style.color = '#d97706';
            } else {
                statusElement.innerHTML = 'üî¥ ÂïèÈ°å„ÅÇ„Çä';
                statusElement.style.color = '#dc2626';
            }
            
        } catch (error) {
            console.error('„É™„Ç¢„É´„Çø„Ç§„É†Áµ±Ë®àÊõ¥Êñ∞„Ç®„É©„Éº:', error);
        }
    }

    // „Ç∑„Çπ„ÉÜ„É†ÂÅ•Â∫∑Áä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ
    async function checkSystemHealth() {
        const emailServiceStatus = document.getElementById('emailServiceStatus');
        const emailServiceText = document.getElementById('emailServiceText');
        const emailServiceLatency = document.getElementById('emailServiceLatency');
        const emailServiceLastCheck = document.getElementById('emailServiceLastCheck');
        
        const databaseStatus = document.getElementById('databaseStatus');
        const databaseText = document.getElementById('databaseText');
        const databaseRecords = document.getElementById('databaseRecords');
        const databaseLastSync = document.getElementById('databaseLastSync');
        
        try {
            // „É°„Éº„É´„Çµ„Éº„Éì„Çπ„ÅÆ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÔºà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Ôºâ
            const emailStartTime = Date.now();
            const emailLatency = Math.floor(Math.random() * 500) + 50; // 50-550ms
            
            setTimeout(() => {
                emailServiceLatency.textContent = emailLatency + 'ms';
                emailServiceLastCheck.textContent = new Date().toLocaleTimeString('ja-JP');
                
                if (emailLatency < 200) {
                    emailServiceStatus.style.background = '#10b981';
                    emailServiceText.textContent = 'Ê≠£Â∏∏Á®ºÂÉç';
                    emailServiceText.style.color = '#059669';
                } else if (emailLatency < 400) {
                    emailServiceStatus.style.background = '#f59e0b';
                    emailServiceText.textContent = 'ÂøúÁ≠îÈÅÖÂª∂';
                    emailServiceText.style.color = '#d97706';
                } else {
                    emailServiceStatus.style.background = '#ef4444';
                    emailServiceText.textContent = 'ÂøúÁ≠îÈÅÖÂª∂';
                    emailServiceText.style.color = '#dc2626';
                }
            }, emailLatency);
            
            // „Éá„Éº„Çø„Éô„Éº„ÇπÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØÔºà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Ôºâ
            const customers = getUnsubscribedUsers();
            databaseRecords.textContent = customers.length + ' / ' + (Math.floor(Math.random() * 1000) + 500);
            databaseLastSync.textContent = new Date().toLocaleTimeString('ja-JP');
            
            databaseStatus.style.background = '#10b981';
            databaseText.textContent = 'Êé•Á∂öÊ≠£Â∏∏';
            databaseText.style.color = '#059669';
            
        } catch (error) {
            console.error('„Ç∑„Çπ„ÉÜ„É†ÂÅ•Â∫∑Áä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
            emailServiceStatus.style.background = '#ef4444';
            emailServiceText.textContent = '„Ç®„É©„Éº';
            emailServiceText.style.color = '#dc2626';
        }
    }

    // „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞„ÅÆÈñãÂßã/ÂÅúÊ≠¢
    function toggleRealtimeUpdate() {
        const button = document.getElementById('realtimeAutoRefresh');
        
        if (realtimeMonitor.autoRefresh) {
            // ÂÅúÊ≠¢
            realtimeMonitor.autoRefresh = false;
            if (realtimeMonitor.updateInterval) {
                clearInterval(realtimeMonitor.updateInterval);
                realtimeMonitor.updateInterval = null;
            }
            button.innerHTML = '‚è∏Ô∏è Ëá™ÂãïÊõ¥Êñ∞ OFF';
            button.classList.remove('btn-info');
            button.classList.add('btn-secondary');
            
            addRealtimeLog('Ëá™ÂãïÊõ¥Êñ∞„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü', 'warning');
        } else {
            // ÈñãÂßã
            realtimeMonitor.autoRefresh = true;
            startRealtimeUpdate();
            button.innerHTML = 'üîÑ Ëá™ÂãïÊõ¥Êñ∞ ON';
            button.classList.remove('btn-secondary');
            button.classList.add('btn-info');
            
            addRealtimeLog('Ëá™ÂãïÊõ¥Êñ∞„ÇíÂÜçÈñã„Åó„Åæ„Åó„Åü', 'success');
        }
    }

    // „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞„ÇíÈñãÂßã
    function startRealtimeUpdate() {
        if (realtimeMonitor.updateInterval) {
            clearInterval(realtimeMonitor.updateInterval);
        }
        
        realtimeMonitor.updateInterval = setInterval(() => {
            if (realtimeMonitor.autoRefresh) {
                updateRealtimeStats();
                checkSystemHealth();
                
                // „É©„É≥„ÉÄ„É†„Å™„É≠„Ç∞„Ç®„É≥„Éà„É™Ôºà„Éá„É¢Áî®Ôºâ
                if (Math.random() < 0.1) { // 10%„ÅÆÁ¢∫Áéá
                    const demoMessages = [
                        'Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤„ÇíÊ§úÂá∫',
                        '„É°„Éº„É´ÈñãÂ∞Å„ÇíÁ¢∫Ë™ç',
                        'ÈÖç‰ø°„Ç≠„É•„Éº„ÇíÂá¶ÁêÜ‰∏≠',
                        '„Ç∑„Çπ„ÉÜ„É†„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπËâØÂ•Ω'
                    ];
                    addRealtimeLog(demoMessages[Math.floor(Math.random() * demoMessages.length)], 'info');
                }
            }
        }, 5000); // 5ÁßíÈñìÈöî
    }

    // „É™„Ç¢„É´„Çø„Ç§„É†„É≠„Ç∞„ÇØ„É™„Ç¢
    function clearRealtimeLog() {
        realtimeMonitor.logs = [];
        updateRealtimeLogDisplay();
        addRealtimeLog('„É≠„Ç∞„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü', 'success');
    }

    // „É™„Ç¢„É´„Çø„Ç§„É†Ê©üËÉΩÂàùÊúüÂåñ
    function initializeRealtimeMonitor() {
        document.getElementById('initTime').textContent = new Date().toLocaleTimeString('ja-JP');
        
        updateRealtimeStats();
        checkSystemHealth();
        
        if (realtimeMonitor.autoRefresh) {
            startRealtimeUpdate();
        }
        
        // ÂàùÊúü„É≠„Ç∞
        addRealtimeLog('„É™„Ç¢„É´„Çø„Ç§„É†„É¢„Éã„Çø„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü', 'success');
    }

    // „É™„Ç¢„É´„Çø„Ç§„É†Ê©üËÉΩ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    document.getElementById('realtimeAutoRefresh')?.addEventListener('click', toggleRealtimeUpdate);
    document.getElementById('realtimeClearLog')?.addEventListener('click', clearRealtimeLog);

    // „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºÈñ¢ÈÄ£„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    document.getElementById('cancelSendBtn')?.addEventListener('click', cancelSending);
    document.getElementById('hideProgressBtn')?.addEventListener('click', hideProgressBar);

    // „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞ÔºàHTML„Åã„ÇâÂëº„Å≥Âá∫„ÅóÁî®Ôºâ
    window.removeUnsubscribeUser = function(email) {
        if (confirm(`${email} „ÅÆÈÖç‰ø°ÂÅúÊ≠¢„ÇíËß£Èô§„Åó„ÄÅÂÜçË≥ºË™≠„ÇíË®±ÂèØ„Åó„Åæ„Åô„ÅãÔºü`)) {
            if (removeUnsubscribedUser(email)) {
                alert('ÂÜçË≥ºË™≠„ÇíË®±ÂèØ„Åó„Åæ„Åó„Åü');
                showUnsubscribedUsers();
                updateUnsubscribeStats();
            } else {
                alert('ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        }
    };

    // ====================
    // 6. ÈÖç‰ø°„Ç≠„É•„Éº„Ç∑„Çπ„ÉÜ„É† JavaScriptÂÆüË£Ö
    // ====================

    // „Ç≠„É•„Éº„Éû„Éç„Éº„Ç∏„É£„Éº
    const queueManager = {
        // „Ç≠„É•„Éº„ÅÆÁä∂ÊÖã
        isRunning: false,
        isPaused: false,
        currentQueue: [],
        processingQueue: [],
        completedQueue: [],
        failedQueue: [],
        
        // Ë®≠ÂÆö
        config: {
            maxConcurrent: 3,
            batchSize: 50,
            retryCount: 3,
            retryDelay: 5000,
            processDelay: 1000,
            priority: 'normal' // high, normal, low
        },

        // Áµ±Ë®à
        stats: {
            totalProcessed: 0,
            totalSuccess: 0,
            totalFailed: 0,
            startTime: null,
            lastProcessedTime: null,
            averageProcessingTime: 0,
            throughput: 0
        },

        // „Ç≠„É•„Éº„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†
        addJob(job) {
            const queueJob = {
                id: `job-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                type: job.type || 'email',
                priority: job.priority || this.config.priority,
                data: job.data,
                recipients: job.recipients || [],
                createdAt: new Date().toISOString(),
                status: 'pending',
                attempts: 0,
                maxAttempts: job.maxAttempts || this.config.retryCount,
                estimatedProcessingTime: this.estimateProcessingTime(job),
                progress: 0
            };

            // ÂÑ™ÂÖàÂ∫¶„Å´Âü∫„Å•„ÅÑ„Å¶„ÇΩ„Éº„ÉàÊåøÂÖ•
            this.insertByPriority(queueJob);
            this.updateQueueDisplay();
            this.updateStats();
            
            console.log(`‚úÖ „Ç≠„É•„Éº„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†: ${queueJob.id} (${queueJob.type})`);
            this.logActivity(`Êñ∞„Åó„ÅÑ„Ç∏„Éß„Éñ„ÅåËøΩÂä†„Åï„Çå„Åæ„Åó„Åü: ${queueJob.type}`, 'info');
            
            return queueJob.id;
        },

        // ÂÑ™ÂÖàÂ∫¶„Å´Âü∫„Å•„ÅÑ„Å¶„Ç≠„É•„Éº„Å´ÊåøÂÖ•
        insertByPriority(job) {
            const priorityOrder = { high: 0, normal: 1, low: 2 };
            const jobPriority = priorityOrder[job.priority] || 1;
            
            let insertIndex = this.currentQueue.length;
            for (let i = 0; i < this.currentQueue.length; i++) {
                const existingPriority = priorityOrder[this.currentQueue[i].priority] || 1;
                if (jobPriority < existingPriority) {
                    insertIndex = i;
                    break;
                }
            }
            
            this.currentQueue.splice(insertIndex, 0, job);
        },

        // Âá¶ÁêÜÊôÇÈñì„ÇíÊé®ÂÆö
        estimateProcessingTime(job) {
            const baseTime = {
                email: 2000,
                sms: 1000,
                push: 500
            };
            
            const recipientCount = job.recipients ? job.recipients.length : 1;
            const typeTime = baseTime[job.type] || 2000;
            
            return typeTime * Math.ceil(recipientCount / this.config.batchSize);
        },

        // „Ç≠„É•„ÉºÂá¶ÁêÜÈñãÂßã
        async startQueue() {
            if (this.isRunning) {
                console.log('‚ö†Ô∏è „Ç≠„É•„Éº„ÅØÊó¢„Å´ÂÆüË°å‰∏≠„Åß„Åô');
                return;
            }

            this.isRunning = true;
            this.isPaused = false;
            this.stats.startTime = new Date().toISOString();
            
            console.log('üöÄ „Ç≠„É•„ÉºÂá¶ÁêÜ„ÇíÈñãÂßã„Åó„Åæ„Åô');
            this.logActivity('„Ç≠„É•„ÉºÂá¶ÁêÜ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü', 'success');
            
            this.updateQueueControls();
            this.processQueue();
        },

        // „Ç≠„É•„ÉºÂá¶ÁêÜÂÅúÊ≠¢
        stopQueue() {
            this.isRunning = false;
            this.isPaused = false;
            
            console.log('‚èπÔ∏è „Ç≠„É•„ÉºÂá¶ÁêÜ„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü');
            this.logActivity('„Ç≠„É•„ÉºÂá¶ÁêÜ„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü', 'warning');
            
            this.updateQueueControls();
        },

        // „Ç≠„É•„ÉºÂá¶ÁêÜ‰∏ÄÊôÇÂÅúÊ≠¢
        pauseQueue() {
            this.isPaused = !this.isPaused;
            
            const status = this.isPaused ? '‰∏ÄÊôÇÂÅúÊ≠¢' : 'ÂÜçÈñã';
            console.log(`‚è∏Ô∏è „Ç≠„É•„ÉºÂá¶ÁêÜ„Çí${status}„Åó„Åæ„Åó„Åü`);
            this.logActivity(`„Ç≠„É•„ÉºÂá¶ÁêÜ„Çí${status}„Åó„Åæ„Åó„Åü`, 'info');
            
            this.updateQueueControls();
            
            if (!this.isPaused && this.isRunning) {
                this.processQueue();
            }
        },

        // „É°„Ç§„É≥„ÅÆÂá¶ÁêÜ„É´„Éº„Éó
        async processQueue() {
            while (this.isRunning && this.currentQueue.length > 0) {
                if (this.isPaused) {
                    await this.delay(1000);
                    continue;
                }

                // ÂêåÊôÇÂÆüË°åÊï∞Âà∂Âæ°
                if (this.processingQueue.length >= this.config.maxConcurrent) {
                    await this.delay(500);
                    continue;
                }

                // Ê¨°„ÅÆ„Ç∏„Éß„Éñ„ÇíÂèñÂæó
                const job = this.currentQueue.shift();
                if (!job) break;

                // Âá¶ÁêÜ„Ç≠„É•„Éº„Å´ÁßªÂãï
                job.status = 'processing';
                job.startTime = new Date().toISOString();
                this.processingQueue.push(job);
                
                this.updateQueueDisplay();
                
                // „Ç∏„Éß„Éñ„ÇíÈùûÂêåÊúü„ÅßÂá¶ÁêÜ
                this.processJob(job).catch(error => {
                    console.error(`‚ùå „Ç∏„Éß„ÉñÂá¶ÁêÜ„Ç®„É©„Éº: ${job.id}`, error);
                });

                // Âá¶ÁêÜÈñìÈöî
                await this.delay(this.config.processDelay);
            }

            // ÂÖ®„Ç∏„Éß„ÉñÂÆå‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ
            if (this.isRunning && this.currentQueue.length === 0 && this.processingQueue.length === 0) {
                this.completeQueue();
            }
        },

        // ÂÄãÂà•„Ç∏„Éß„ÉñÂá¶ÁêÜ
        async processJob(job) {
            try {
                console.log(`üìß „Ç∏„Éß„ÉñÂá¶ÁêÜÈñãÂßã: ${job.id} (${job.type})`);
                this.logActivity(`„Ç∏„Éß„ÉñÂá¶ÁêÜÈñãÂßã: ${job.type} - ${job.recipients.length}‰ª∂`, 'info');

                // „Éê„ÉÉ„ÉÅ„Åî„Å®„Å´Âá¶ÁêÜ
                const batches = this.createBatches(job.recipients, this.config.batchSize);
                let successCount = 0;
                let failedCount = 0;

                for (let i = 0; i < batches.length; i++) {
                    const batch = batches[i];
                    const batchResult = await this.processBatch(job, batch, i + 1, batches.length);
                    
                    successCount += batchResult.success;
                    failedCount += batchResult.failed;
                    
                    // „Éó„É≠„Ç∞„É¨„Çπ„ÅÆÊõ¥Êñ∞
                    job.progress = Math.round(((i + 1) / batches.length) * 100);
                    this.updateJobProgress(job);
                    
                    // „Éê„ÉÉ„ÉÅÈñì„ÅÆÂæÖÊ©ü
                    if (i < batches.length - 1) {
                        await this.delay(this.config.processDelay);
                    }
                }

                // „Ç∏„Éß„ÉñÂÆå‰∫ÜÂá¶ÁêÜ
                job.endTime = new Date().toISOString();
                job.status = failedCount === 0 ? 'completed' : 'partial';
                job.results = {
                    total: job.recipients.length,
                    success: successCount,
                    failed: failedCount,
                    processingTime: Date.now() - new Date(job.startTime).getTime()
                };

                // Áµ±Ë®à„ÅÆÊõ¥Êñ∞
                this.stats.totalProcessed++;
                this.stats.totalSuccess += successCount;
                this.stats.totalFailed += failedCount;
                this.stats.lastProcessedTime = new Date().toISOString();
                
                this.updateAverageProcessingTime(job.results.processingTime);

                // Âá¶ÁêÜ„Ç≠„É•„Éº„Åã„ÇâÂÆå‰∫Ü„Ç≠„É•„Éº„Å´ÁßªÂãï
                this.moveJobToCompleted(job);

                console.log(`‚úÖ „Ç∏„Éß„ÉñÂÆå‰∫Ü: ${job.id} - ÊàêÂäü: ${successCount}, Â§±Êïó: ${failedCount}`);
                this.logActivity(`„Ç∏„Éß„ÉñÂÆå‰∫Ü: ${job.type} - ÊàêÂäü: ${successCount}, Â§±Êïó: ${failedCount}`, 
                               failedCount === 0 ? 'success' : 'warning');

            } catch (error) {
                console.error(`‚ùå „Ç∏„Éß„ÉñÂá¶ÁêÜÂ§±Êïó: ${job.id}`, error);
                
                job.attempts++;
                job.lastError = error.message;
                job.status = 'error';

                // „É™„Éà„É©„Ç§Âá¶ÁêÜ
                if (job.attempts < job.maxAttempts) {
                    console.log(`üîÑ „Ç∏„Éß„Éñ„Çí„É™„Éà„É©„Ç§„Åó„Åæ„Åô: ${job.id} (${job.attempts}/${job.maxAttempts})`);
                    this.logActivity(`„Ç∏„Éß„Éñ„Çí„É™„Éà„É©„Ç§„Åó„Åæ„Åô: ${job.type} (${job.attempts}/${job.maxAttempts})`, 'warning');
                    
                    // „É™„Éà„É©„Ç§Áî®„Å´„Ç≠„É•„Éº„Å´Êàª„Åô
                    setTimeout(() => {
                        job.status = 'pending';
                        this.insertByPriority(job);
                        this.removeFromProcessing(job);
                    }, this.config.retryDelay);
                } else {
                    // Â§±Êïó„Ç≠„É•„Éº„Å´ÁßªÂãï
                    job.status = 'failed';
                    this.moveJobToFailed(job);
                    this.logActivity(`„Ç∏„Éß„Éñ„ÅåÊúÄÂ§ß„É™„Éà„É©„Ç§ÂõûÊï∞„Å´ÈÅî„Åó„Åæ„Åó„Åü: ${job.type}`, 'error');
                }
            }
        },

        // „Éê„ÉÉ„ÉÅÂá¶ÁêÜ
        async processBatch(job, recipients, batchNum, totalBatches) {
            try {
                console.log(`üì¶ „Éê„ÉÉ„ÉÅÂá¶ÁêÜ ${batchNum}/${totalBatches}: ${recipients.length}‰ª∂`);
                
                let successCount = 0;
                let failedCount = 0;

                // „Ç∏„Éß„Éñ„Çø„Ç§„Éó„Å´Âøú„Åò„ÅüÂá¶ÁêÜ
                switch (job.type) {
                    case 'email':
                        const emailResult = await this.sendEmailBatch(job.data, recipients);
                        successCount = emailResult.success;
                        failedCount = emailResult.failed;
                        break;
                    
                    case 'sms':
                        const smsResult = await this.sendSMSBatch(job.data, recipients);
                        successCount = smsResult.success;
                        failedCount = smsResult.failed;
                        break;
                    
                    default:
                        // „ÉÜ„Çπ„ÉàÂá¶ÁêÜÔºàÂÆüÈöõ„ÅÆÈÄÅ‰ø°„Çí„Ç∑„Éü„É•„É¨„Éº„ÉàÔºâ
                        await this.delay(Math.random() * 2000 + 1000);
                        successCount = recipients.length;
                        failedCount = 0;
                }

                return { success: successCount, failed: failedCount };

            } catch (error) {
                console.error('‚ùå „Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Ç®„É©„Éº:', error);
                return { success: 0, failed: recipients.length };
            }
        },

        // „É°„Éº„É´ÈÄÅ‰ø°„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÔºàÂÆüË£ÖÊôÇ„ÅØÂÆüÈöõ„ÅÆAPIÂëº„Å≥Âá∫„Åó„Å´ÁΩÆ„ÅçÊèõ„ÅàÔºâ
        async sendEmailBatch(emailData, recipients) {
            await this.delay(Math.random() * 1000 + 500);
            
            // 90%ÊàêÂäüÁéá„Åß„Ç∑„Éü„É•„É¨„Éº„Éà
            const successRate = 0.9;
            const successCount = Math.floor(recipients.length * successRate);
            const failedCount = recipients.length - successCount;
            
            return { success: successCount, failed: failedCount };
        },

        // SMS„Éê„ÉÉ„ÉÅÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÂÆüË£ÖÁî®Ôºâ
        async sendSMSBatch(smsData, recipients) {
            await this.delay(Math.random() * 800 + 300);
            
            // SMSÈÄÅ‰ø°„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
            const successCount = recipients.length;
            const failedCount = 0;
            
            return { success: successCount, failed: failedCount };
        },

        // Âèó‰ø°ËÄÖ„É™„Çπ„Éà„Çí„Éê„ÉÉ„ÉÅ„Å´ÂàÜÂâ≤
        createBatches(recipients, batchSize) {
            const batches = [];
            for (let i = 0; i < recipients.length; i += batchSize) {
                batches.push(recipients.slice(i, i + batchSize));
            }
            return batches;
        },

        // „Ç∏„Éß„Éñ„ÇíÂÆå‰∫Ü„Ç≠„É•„Éº„Å´ÁßªÂãï
        moveJobToCompleted(job) {
            this.removeFromProcessing(job);
            this.completedQueue.unshift(job); // ÊúÄÊñ∞„ÇíÂÖàÈ†≠„Å´
            
            // ÂÆå‰∫Ü„Ç≠„É•„Éº„ÅÆ‰∏äÈôêÁÆ°ÁêÜÔºàÊúÄÊñ∞100‰ª∂„Åæ„Åß‰øùÊåÅÔºâ
            if (this.completedQueue.length > 100) {
                this.completedQueue = this.completedQueue.slice(0, 100);
            }
            
            this.updateQueueDisplay();
        },

        // „Ç∏„Éß„Éñ„ÇíÂ§±Êïó„Ç≠„É•„Éº„Å´ÁßªÂãï
        moveJobToFailed(job) {
            this.removeFromProcessing(job);
            this.failedQueue.unshift(job);
            
            // Â§±Êïó„Ç≠„É•„Éº„ÅÆ‰∏äÈôêÁÆ°ÁêÜ
            if (this.failedQueue.length > 50) {
                this.failedQueue = this.failedQueue.slice(0, 50);
            }
            
            this.updateQueueDisplay();
        },

        // Âá¶ÁêÜ„Ç≠„É•„Éº„Åã„Çâ„Ç∏„Éß„Éñ„ÇíÂâäÈô§
        removeFromProcessing(job) {
            this.processingQueue = this.processingQueue.filter(j => j.id !== job.id);
        },

        // „Ç≠„É•„ÉºÂÖ®‰ΩìÂÆå‰∫ÜÂá¶ÁêÜ
        completeQueue() {
            this.isRunning = false;
            this.isPaused = false;
            
            const processingTime = this.stats.startTime ? 
                Date.now() - new Date(this.stats.startTime).getTime() : 0;
            
            console.log(`üéâ ÂÖ®„Ç≠„É•„ÉºÂá¶ÁêÜÂÆå‰∫Ü - Âá¶ÁêÜÊôÇÈñì: ${Math.round(processingTime / 1000)}Áßí`);
            this.logActivity(`ÂÖ®„Ç≠„É•„ÉºÂá¶ÁêÜÂÆå‰∫Ü - Âá¶ÁêÜÊôÇÈñì: ${Math.round(processingTime / 1000)}Áßí`, 'success');
            
            this.updateQueueControls();
            this.updateThroughput();
        },

        // „Çπ„É´„Éº„Éó„ÉÉ„ÉàÊõ¥Êñ∞
        updateThroughput() {
            if (this.stats.startTime && this.stats.totalProcessed > 0) {
                const elapsedMinutes = (Date.now() - new Date(this.stats.startTime).getTime()) / (1000 * 60);
                this.stats.throughput = Math.round(this.stats.totalProcessed / elapsedMinutes);
            }
        },

        // Âπ≥ÂùáÂá¶ÁêÜÊôÇÈñìÊõ¥Êñ∞
        updateAverageProcessingTime(processingTime) {
            if (this.stats.averageProcessingTime === 0) {
                this.stats.averageProcessingTime = processingTime;
            } else {
                this.stats.averageProcessingTime = Math.round(
                    (this.stats.averageProcessingTime + processingTime) / 2
                );
            }
        },

        // „Ç∏„Éß„Éñ„ÅÆÈÄ≤ÊçóÊõ¥Êñ∞
        updateJobProgress(job) {
            const jobElement = document.querySelector(`[data-job-id="${job.id}"]`);
            if (jobElement) {
                const progressBar = jobElement.querySelector('.progress-bar');
                const progressText = jobElement.querySelector('.progress-text');
                
                if (progressBar) {
                    progressBar.style.width = `${job.progress}%`;
                }
                if (progressText) {
                    progressText.textContent = `${job.progress}%`;
                }
            }
        },

        // UI„Ç≥„É≥„Éà„É≠„Éº„É´Êõ¥Êñ∞
        updateQueueControls() {
            const startBtn = document.getElementById('startQueueBtn');
            const pauseBtn = document.getElementById('pauseQueueBtn');
            const stopBtn = document.getElementById('stopQueueBtn');
            
            if (startBtn) {
                startBtn.disabled = this.isRunning;
                startBtn.textContent = this.isRunning ? 'ÂÆüË°å‰∏≠...' : '„Ç≠„É•„ÉºÈñãÂßã';
            }
            
            if (pauseBtn) {
                pauseBtn.disabled = !this.isRunning;
                pauseBtn.textContent = this.isPaused ? 'ÂÜçÈñã' : '‰∏ÄÊôÇÂÅúÊ≠¢';
            }
            
            if (stopBtn) {
                stopBtn.disabled = !this.isRunning;
            }
        },

        // „Ç≠„É•„ÉºË°®Á§∫„ÅÆÊõ¥Êñ∞
        updateQueueDisplay() {
            this.updateQueueList('pending', this.currentQueue);
            this.updateQueueList('processing', this.processingQueue);
            this.updateQueueList('completed', this.completedQueue);
            this.updateQueueList('failed', this.failedQueue);
            this.updateStats();
        },

        // ÂÄãÂà•„Ç≠„É•„Éº„É™„Çπ„ÉàÊõ¥Êñ∞
        updateQueueList(type, queue) {
            const container = document.getElementById(`${type}QueueList`);
            if (!container) return;

            if (queue.length === 0) {
                container.innerHTML = `<div class="queue-empty">„Ç≠„É•„Éº„Å´„Ç∏„Éß„Éñ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>`;
                return;
            }

            const queueHtml = queue.map(job => `
                <div class="queue-item ${job.priority}" data-job-id="${job.id}">
                    <div class="job-header">
                        <div class="job-info">
                            <span class="job-id">${job.id}</span>
                            <span class="job-type">${this.getJobTypeIcon(job.type)} ${job.type.toUpperCase()}</span>
                            <span class="job-priority priority-${job.priority}">
                                ${job.priority.toUpperCase()}
                            </span>
                        </div>
                        <div class="job-actions">
                            ${this.getJobActions(job)}
                        </div>
                    </div>
                    <div class="job-details">
                        <div class="job-recipients">
                            üìß Âèó‰ø°ËÄÖ: ${job.recipients.length}‰ª∂
                        </div>
                        <div class="job-time">
                            ‚è∞ ‰ΩúÊàê: ${new Date(job.createdAt).toLocaleTimeString()}
                            ${job.startTime ? `| ÈñãÂßã: ${new Date(job.startTime).toLocaleTimeString()}` : ''}
                            ${job.endTime ? `| ÂÆå‰∫Ü: ${new Date(job.endTime).toLocaleTimeString()}` : ''}
                        </div>
                        ${job.status === 'processing' ? `
                            <div class="job-progress">
                                <div class="progress-container">
                                    <div class="progress-bar" style="width: ${job.progress}%"></div>
                                </div>
                                <span class="progress-text">${job.progress}%</span>
                            </div>
                        ` : ''}
                        ${job.results ? `
                            <div class="job-results">
                                ‚úÖ ÊàêÂäü: ${job.results.success} | ‚ùå Â§±Êïó: ${job.results.failed}
                                | ‚è±Ô∏è Âá¶ÁêÜÊôÇÈñì: ${Math.round(job.results.processingTime / 1000)}Áßí
                            </div>
                        ` : ''}
                        ${job.lastError ? `
                            <div class="job-error">‚ùå „Ç®„É©„Éº: ${job.lastError}</div>
                        ` : ''}
                    </div>
                </div>
            `).join('');

            container.innerHTML = queueHtml;
        },

        // „Ç∏„Éß„Éñ„Çø„Ç§„Éó„Ç¢„Ç§„Ç≥„É≥ÂèñÂæó
        getJobTypeIcon(type) {
            const icons = {
                email: 'üìß',
                sms: 'üí¨',
                push: 'üîî'
            };
            return icons[type] || 'üìã';
        },

        // „Ç∏„Éß„Éñ„Ç¢„ÇØ„Ç∑„Éß„É≥ÂèñÂæó
        getJobActions(job) {
            const actions = [];
            
            if (job.status === 'pending') {
                actions.push(`<button class="btn-small" onclick="queueManager.removeJob('${job.id}')">ÂâäÈô§</button>`);
                actions.push(`<button class="btn-small" onclick="queueManager.prioritizeJob('${job.id}')">ÂÑ™ÂÖàÂåñ</button>`);
            }
            
            if (job.status === 'failed') {
                actions.push(`<button class="btn-small" onclick="queueManager.retryJob('${job.id}')">ÂÜçÂÆüË°å</button>`);
            }
            
            return actions.join(' ');
        },

        // „Ç∏„Éß„ÉñÂâäÈô§
        removeJob(jobId) {
            this.currentQueue = this.currentQueue.filter(job => job.id !== jobId);
            this.updateQueueDisplay();
            this.logActivity(`„Ç∏„Éß„Éñ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü: ${jobId}`, 'warning');
        },

        // „Ç∏„Éß„ÉñÂÑ™ÂÖàÂåñ
        prioritizeJob(jobId) {
            const job = this.currentQueue.find(j => j.id === jobId);
            if (job) {
                job.priority = 'high';
                this.currentQueue = this.currentQueue.filter(j => j.id !== jobId);
                this.insertByPriority(job);
                this.updateQueueDisplay();
                this.logActivity(`„Ç∏„Éß„Éñ„ÇíÂÑ™ÂÖàÂåñ„Åó„Åæ„Åó„Åü: ${jobId}`, 'info');
            }
        },

        // „Ç∏„Éß„ÉñÂÜçÂÆüË°å
        retryJob(jobId) {
            const job = this.failedQueue.find(j => j.id === jobId);
            if (job) {
                job.status = 'pending';
                job.attempts = 0;
                job.lastError = null;
                
                this.failedQueue = this.failedQueue.filter(j => j.id !== jobId);
                this.insertByPriority(job);
                this.updateQueueDisplay();
                this.logActivity(`„Ç∏„Éß„Éñ„ÇíÂÜçÂÆüË°å„Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü: ${jobId}`, 'info');
            }
        },

        // Áµ±Ë®àÊõ¥Êñ∞
        updateStats() {
            const elements = {
                totalJobs: document.getElementById('totalJobs'),
                pendingJobs: document.getElementById('pendingJobs'),
                processingJobs: document.getElementById('processingJobs'),
                completedJobs: document.getElementById('completedJobs'),
                failedJobs: document.getElementById('failedJobs'),
                successRate: document.getElementById('successRate'),
                avgProcessingTime: document.getElementById('avgProcessingTime'),
                throughput: document.getElementById('throughput')
            };

            const totalJobs = this.currentQueue.length + this.processingQueue.length + 
                            this.completedQueue.length + this.failedQueue.length;
            
            const successRate = this.stats.totalProcessed > 0 ? 
                Math.round((this.stats.totalSuccess / (this.stats.totalSuccess + this.stats.totalFailed)) * 100) : 0;

            if (elements.totalJobs) elements.totalJobs.textContent = totalJobs;
            if (elements.pendingJobs) elements.pendingJobs.textContent = this.currentQueue.length;
            if (elements.processingJobs) elements.processingJobs.textContent = this.processingQueue.length;
            if (elements.completedJobs) elements.completedJobs.textContent = this.completedQueue.length;
            if (elements.failedJobs) elements.failedJobs.textContent = this.failedQueue.length;
            if (elements.successRate) elements.successRate.textContent = `${successRate}%`;
            if (elements.avgProcessingTime) {
                elements.avgProcessingTime.textContent = `${Math.round(this.stats.averageProcessingTime / 1000)}Áßí`;
            }
            if (elements.throughput) elements.throughput.textContent = `${this.stats.throughput}/ÂàÜ`;
        },

        // „Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„É≠„Ç∞
        logActivity(message, type = 'info') {
            const activityLog = document.getElementById('queueActivityLog');
            if (!activityLog) return;

            const logEntry = document.createElement('div');
            logEntry.className = `activity-entry ${type}`;
            logEntry.innerHTML = `
                <span class="activity-time">${new Date().toLocaleTimeString()}</span>
                <span class="activity-message">${message}</span>
            `;

            activityLog.insertBefore(logEntry, activityLog.firstChild);

            // „É≠„Ç∞‰∏äÈôêÁÆ°ÁêÜÔºàÊúÄÊñ∞50‰ª∂„Åæ„ÅßÔºâ
            while (activityLog.children.length > 50) {
                activityLog.removeChild(activityLog.lastChild);
            }
        },

        // Ë®≠ÂÆöÊõ¥Êñ∞
        updateConfig(newConfig) {
            this.config = { ...this.config, ...newConfig };
            this.logActivity('„Ç≠„É•„ÉºË®≠ÂÆö„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü', 'info');
            console.log('üìù „Ç≠„É•„ÉºË®≠ÂÆöÊõ¥Êñ∞:', this.config);
        },

        // „Ç≠„É•„Éº„É™„Çª„ÉÉ„Éà
        resetQueue() {
            if (this.isRunning) {
                this.stopQueue();
            }
            
            this.currentQueue = [];
            this.processingQueue = [];
            this.completedQueue = [];
            this.failedQueue = [];
            this.stats = {
                totalProcessed: 0,
                totalSuccess: 0,
                totalFailed: 0,
                startTime: null,
                lastProcessedTime: null,
                averageProcessingTime: 0,
                throughput: 0
            };
            
            this.updateQueueDisplay();
            this.logActivity('„Ç≠„É•„Éº„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü', 'warning');
        },

        // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£: ÈÅÖÂª∂
        delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    };

    // „Ç≠„É•„Éº„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
    function setupQueueEventHandlers() {
        // „Ç≠„É•„ÉºÈñãÂßã„Éú„Çø„É≥
        const startQueueBtn = document.getElementById('startQueueBtn');
        if (startQueueBtn) {
            startQueueBtn.addEventListener('click', () => {
                queueManager.startQueue();
            });
        }

        // „Ç≠„É•„Éº‰∏ÄÊôÇÂÅúÊ≠¢„Éú„Çø„É≥
        const pauseQueueBtn = document.getElementById('pauseQueueBtn');
        if (pauseQueueBtn) {
            pauseQueueBtn.addEventListener('click', () => {
                queueManager.pauseQueue();
            });
        }

        // „Ç≠„É•„ÉºÂÅúÊ≠¢„Éú„Çø„É≥
        const stopQueueBtn = document.getElementById('stopQueueBtn');
        if (stopQueueBtn) {
            stopQueueBtn.addEventListener('click', () => {
                queueManager.stopQueue();
            });
        }

        // „Ç≠„É•„Éº„É™„Çª„ÉÉ„Éà„Éú„Çø„É≥
        const resetQueueBtn = document.getElementById('resetQueueBtn');
        if (resetQueueBtn) {
            resetQueueBtn.addEventListener('click', () => {
                if (confirm('Êú¨ÂΩì„Å´„Ç≠„É•„Éº„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åô„ÅãÔºüÂÖ®„Å¶„ÅÆ„Ç∏„Éß„Éñ„ÅåÂâäÈô§„Åï„Çå„Åæ„Åô„ÄÇ')) {
                    queueManager.resetQueue();
                }
            });
        }

        // Ë®≠ÂÆöÊõ¥Êñ∞„Éï„Ç©„Éº„É†
        const queueConfigForm = document.getElementById('queueConfigForm');
        if (queueConfigForm) {
            queueConfigForm.addEventListener('submit', (e) => {
                e.preventDefault();
                
                const formData = new FormData(queueConfigForm);
                const config = {
                    maxConcurrent: parseInt(formData.get('maxConcurrent')) || 3,
                    batchSize: parseInt(formData.get('batchSize')) || 50,
                    retryCount: parseInt(formData.get('retryCount')) || 3,
                    processDelay: parseInt(formData.get('processDelay')) || 1000,
                    priority: formData.get('priority') || 'normal'
                };
                
                queueManager.updateConfig(config);
                showNotification('„Ç≠„É•„ÉºË®≠ÂÆö„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü', 'success');
            });
        }

        // „ÉÜ„Çπ„Éà„Ç∏„Éß„ÉñËøΩÂä†„Éú„Çø„É≥
        const addTestJobBtn = document.getElementById('addTestJobBtn');
        if (addTestJobBtn) {
            addTestJobBtn.addEventListener('click', () => {
                const testJob = {
                    type: 'email',
                    priority: 'normal',
                    data: {
                        subject: '„ÉÜ„Çπ„Éà„É°„Éº„É´',
                        content: '„Åì„Çå„ÅØ„Ç≠„É•„Éº„Ç∑„Çπ„ÉÜ„É†„ÅÆ„ÉÜ„Çπ„Éà„Åß„Åô„ÄÇ'
                    },
                    recipients: Array.from({ length: 10 }, (_, i) => ({
                        email: `test${i + 1}@example.com`,
                        name: `„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº${i + 1}`
                    }))
                };
                
                const jobId = queueManager.addJob(testJob);
                showNotification(`„ÉÜ„Çπ„Éà„Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü: ${jobId}`, 'success');
            });
        }

        // ÂÆöÊúüÁöÑ„Å™Áµ±Ë®àÊõ¥Êñ∞Ôºà5ÁßíÈñìÈöîÔºâ
        setInterval(() => {
            if (queueManager.isRunning) {
                queueManager.updateThroughput();
                queueManager.updateStats();
            }
        }, 5000);
    }

    // „É°„Éº„É´„Éï„Ç©„Éº„É†„Åã„Çâ„ÅÆ„Ç≠„É•„Éº„Ç∏„Éß„Éñ‰ΩúÊàê
    function createQueueJobFromEmail() {
        const recipients = getSelectedRecipients();
        if (recipients.length === 0) {
            showNotification('Âèó‰ø°ËÄÖ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
            return;
        }

        const emailData = {
            subject: document.getElementById('subject')?.value || '',
            content: document.getElementById('content')?.value || '',
            contentHtml: document.getElementById('contentHtml')?.value || '',
            senderName: document.getElementById('senderName')?.value || 'NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ',
            priority: document.getElementById('emailPriority')?.value || 'normal'
        };

        if (!emailData.subject || !emailData.content) {
            showNotification('‰ª∂Âêç„Å®Êú¨Êñá„ÅØÂøÖÈ†à„Åß„Åô', 'error');
            return;
        }

        const job = {
            type: 'email',
            priority: emailData.priority,
            data: emailData,
            recipients: recipients,
            maxAttempts: 3
        };

        const jobId = queueManager.addJob(job);
        showNotification(`„É°„Éº„É´ÈÖç‰ø°„Ç∏„Éß„Éñ„Çí„Ç≠„É•„Éº„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü: ${jobId}`, 'success');
        
        // „Ç≠„É•„Éº„Çø„Éñ„Å´Âàá„ÇäÊõø„Åà
        document.querySelector('[data-tab="queue"]')?.click();
    }

    // ÂàùÊúüË°®Á§∫„ÅßÂ±•Ê≠¥„ÇíË™≠„ÅøËæº„Åø
    document.addEventListener('DOMContentLoaded', () => {
        loadHistory();
        updateCurrentTime();
        loadSecuritySettings();
        loadUnsubscribeSettings();
        getCurrentIP();
        checkRateLimit();
        updateUnsubscribeStats();
        setupQuickSchedule();
        initializeRecurringSettings();
        setupQueueEventHandlers(); // „Ç≠„É•„Éº„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº„ÇíË®≠ÂÆö
        // ÂàùÊúüÁä∂ÊÖã„Åß„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆË°®Á§∫„ÇíË®≠ÂÆö
        updateTemplateSection();
        // CTA„Éú„Çø„É≥Ë®≠ÂÆö„ÅÆÂàùÊúüÁä∂ÊÖã„ÇíË®≠ÂÆö
        updateCtaButtonSettings();
        
        // „Éó„É¨„Éì„É•„Éº„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅÆ‰ª£ÊõøÂá¶ÁêÜ
        const previewBtn = document.getElementById('generatePreviewBtn');
        if (!previewBtn) {
            console.warn('„Éó„É¨„Éì„É•„Éº„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            // „Éó„É¨„Éì„É•„Éº„Éú„Çø„É≥„ÇíÂãïÁöÑ„Å´‰ΩúÊàê
            const previewArea = document.getElementById('previewArea');
            if (previewArea && !document.getElementById('generatePreviewBtn')) {
                const newPreviewBtn = document.createElement('button');
                newPreviewBtn.id = 'generatePreviewBtn';
                newPreviewBtn.type = 'button';
                newPreviewBtn.textContent = 'üîç „Éó„É¨„Éì„É•„ÉºÁîüÊàê';
                newPreviewBtn.className = 'btn btn-secondary';
                newPreviewBtn.style.marginBottom = '20px';
                
                previewArea.parentNode.insertBefore(newPreviewBtn, previewArea);
                newPreviewBtn.addEventListener('click', generatePreview);
                
                console.log('‚úÖ „Éó„É¨„Éì„É•„Éº„Éú„Çø„É≥„ÇíÂãïÁöÑ„Å´‰ΩúÊàê„Åó„Åæ„Åó„Åü');
            }
        } else {
            console.log('‚úÖ „Éó„É¨„Éì„É•„Éº„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü');
        }
        
        console.log('„Éö„Éº„Ç∏ÂàùÊúüÂåñÂÆå‰∫Ü');
    });

    // „Éó„É¨„Éì„É•„ÉºÁîüÊàê
    document.getElementById('previewBtn')?.addEventListener('click', async () => {
        const subject = document.getElementById('subject').value;
        const mainContent = document.getElementById('mainContent').value;
        const templateType = document.getElementById('templateType').value;
        
        if (!subject || !mainContent) {
            alert('‰ª∂Âêç„Å®Êú¨Êñá„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }

        // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„ÉóÂà•„ÅÆ„Éá„Éº„ÇøÂèéÈõÜ
        let templateData = {
            title: subject,
            mainContent: mainContent,
            templateType: templateType,
            layoutOrder: document.getElementById('layoutOrder')?.value || 'content-first',
            predictionNote: document.getElementById('predictionNote')?.value || '',
            additionalSection: document.getElementById('additionalSection')?.value || '',
            showCtaButton: document.getElementById('showCtaButton')?.checked || false,
            customCtaText: document.getElementById('customCtaText')?.value || '',
            customCtaUrl: document.getElementById('customCtaUrl')?.value || 'https://nankan-analytics.keiba.link/pricing/'
        };

        if (templateType === 'prediction') {
            // ‰∫àÊÉ≥„Éá„Éº„ÇøÂèéÈõÜ
            const predictionInputs = document.querySelectorAll('.prediction-input');
            templateData.predictions = Array.from(predictionInputs).map(input => {
                const raceName = input.querySelector('.race-name').value;
                const horses = input.querySelector('.race-horses').value
                    .split('\n')
                    .filter(h => h.trim())
                    .map(h => h.trim());
                return { raceName, horses };
            }).filter(p => p.raceName && p.horses.length > 0);
        } else if (templateType === 'result') {
            // ÁµêÊûú„Éá„Éº„ÇøÂèéÈõÜ
            const resultInputs = document.querySelectorAll('.result-input');
            templateData.results = Array.from(resultInputs).map(input => {
                const raceName = input.querySelector('.result-race-name').value;
                const winner = input.querySelector('.result-winner').value;
                const payout = input.querySelector('.result-payout').value;
                const status = input.querySelector('.result-status').value;
                return { raceName, winner, payout, status };
            }).filter(r => r.raceName);
            
            templateData.monthlyHitRate = document.getElementById('monthlyHitRate')?.value || '';
            templateData.monthlyProfit = document.getElementById('monthlyProfit')?.value || '';
        } else if (templateType === 'campaign') {
            // „Ç≠„É£„É≥„Éö„Éº„É≥„Éá„Éº„ÇøÂèéÈõÜ
            templateData.campaignTitle = document.getElementById('campaignTitle')?.value || '';
            templateData.campaignDetails = document.getElementById('campaignDetails')?.value || '';
            templateData.originalPrice = document.getElementById('originalPrice')?.value || '';
            templateData.campaignPrice = document.getElementById('campaignPrice')?.value || '';
            templateData.campaignDeadline = document.getElementById('campaignDeadline')?.value || '';
            templateData.ctaText = document.getElementById('ctaText')?.value || 'üéØ ÈôêÂÆö„Ç™„Éï„Ç°„Éº„ÇíÁ¢∫Ë™ç„Åô„Çã';
            templateData.ctaUrl = document.getElementById('ctaUrl')?.value || 'https://nankan-analytics.keiba.link/pricing/';
        } else if (templateType === 'custom') {
            // „Ç´„Çπ„Çø„É†„Éá„Éº„ÇøÂèéÈõÜ
            templateData.customTheme = document.getElementById('customTheme')?.value || 'default';
            templateData.customHeadline = document.getElementById('customHeadline')?.value || '';
            templateData.customAccent = document.getElementById('customAccent')?.value || '';
            templateData.customSectionCtaText = document.getElementById('customSectionCtaText')?.value || '';
            templateData.customSectionCtaUrl = document.getElementById('customSectionCtaUrl')?.value || '';
        }

        // HTML„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê
        const htmlContent = generateAdvancedNewsletterHTML(templateData);

        // „Éó„É¨„Éì„É•„ÉºË°®Á§∫
        const previewArea = document.getElementById('previewArea');
        previewArea.innerHTML = `
            <div class="email-frame">
                <div class="email-header">
                    <strong>‰ª∂Âêç:</strong> ${subject}
                </div>
                <iframe srcdoc="${htmlContent.replace(/"/g, '&quot;')}" style="width: 100%; height: 600px; border: 1px solid #ddd;"></iframe>
            </div>
        `;
    });

    // ÈÖç‰ø°ÂÆüË°å
    document.getElementById('sendBtn')?.addEventListener('click', async () => {
        const subject = document.getElementById('subject').value;
        const mainContent = document.getElementById('mainContent').value;
        const targetPlan = document.getElementById('targetPlan').value;
        const templateType = document.getElementById('templateType').value;
        const scheduledAt = document.getElementById('scheduledAt').value;
        
        if (!subject || !mainContent) {
            alert('‰ª∂Âêç„Å®Êú¨Êñá„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }

        // Êé®ÂÆöÂèó‰ø°ËÄÖÊï∞„ÇíË®àÁÆóÔºà„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÁî®Ôºâ
        const estimatedRecipients = calculateEstimatedRecipients(targetPlan);
        
        // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å
        const securityResult = performSecurityCheck(estimatedRecipients);
        if (!securityResult.allowed) {
            alert(`ÈÖç‰ø°„ÅåÂà∂Èôê„Åï„Çå„Åæ„Åó„Åü\n\nÁêÜÁî±: ${securityResult.reason}\n\n„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
            logSecurityEvent('SEND_BLOCKED', `ÈÖç‰ø°ÊãíÂê¶: ${securityResult.reason} (ÂØæË±°: ${estimatedRecipients}ÈÄö)`, 'warning');
            return;
        }

        if (!confirm(`${targetPlan === 'all' ? 'ÂÖ®‰ºöÂì°' : targetPlan + '‰ºöÂì°'}„Å´ÈÖç‰ø°„Åó„Å¶„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü`)) {
            return;
        }

        // „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºË°®Á§∫
        showProgressBar(estimatedRecipients);
        
        // „Éó„É≠„Ç∞„É¨„ÇπÊõ¥Êñ∞„ÅÆ„Åü„ÇÅ„ÅÆ„Çø„Ç§„Éû„Éº
        const progressInterval = setInterval(() => {
            if (!sendProgress.isActive || sendProgress.isCancelled) {
                clearInterval(progressInterval);
                return;
            }
            
            // „Çπ„ÉÜ„ÉÉ„ÉóÈÄ≤Ë°å„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÔºàÂÆüÈöõ„ÅÆAPI„É¨„Çπ„Éù„É≥„Çπ„Åß„Çà„ÇäÊ≠£Á¢∫„Å´Âà∂Âæ°ÂèØËÉΩÔºâ
            if (sendProgress.currentStep === 0) {
                setTimeout(() => setProgressStep(1), 500);
            }
        }, 100);

        // „Çπ„ÉÜ„ÉÉ„Éó1: „Éá„Éº„ÇøÊ§úË®º
        setTimeout(() => {
            if (sendProgress.isCancelled) return;
            setProgressStep(1);
        }, 800);

        // „Çπ„ÉÜ„ÉÉ„Éó2: Âèó‰ø°ËÄÖ„É™„Çπ„ÉàÊ∫ñÂÇô
        setTimeout(() => {
            if (sendProgress.isCancelled) return;
            setProgressStep(2);
        }, 1500);

        // ‰∫àÊÉ≥„Éá„Éº„ÇøÂèéÈõÜ
        let predictions = [];
        if (templateType === 'prediction') {
            const predictionInputs = document.querySelectorAll('.prediction-input');
            predictions = Array.from(predictionInputs).map(input => {
                const raceName = input.querySelector('.race-name').value;
                const horses = input.querySelector('.race-horses').value
                    .split('\n')
                    .filter(h => h.trim())
                    .map(h => h.trim());
                return { raceName, horses };
            }).filter(p => p.raceName && p.horses.length > 0);
        }

        // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Éá„Éº„ÇøÊ∫ñÂÇô
        let templateData = {
            title: subject,
            mainContent: mainContent,
            templateType: templateType,
            layoutOrder: document.getElementById('layoutOrder')?.value || 'content-first',
            predictionNote: document.getElementById('predictionNote')?.value || '',
            additionalSection: document.getElementById('additionalSection')?.value || '',
            showCtaButton: document.getElementById('showCtaButton')?.checked || false,
            customCtaText: document.getElementById('customCtaText')?.value || '',
            customCtaUrl: document.getElementById('customCtaUrl')?.value || 'https://nankan-analytics.keiba.link/pricing/',
            predictions: predictions
        };

        // HTML„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê
        let htmlContent = generateAdvancedNewsletterHTML(templateData);

        // Unsubscribe„É™„É≥„ÇØ„ÇíËá™ÂãïËøΩÂä†
        htmlContent = addUnsubscribeFooter(htmlContent);

        try {
            console.log('ÈÖç‰ø°„É™„ÇØ„Ç®„Çπ„ÉàÈÄÅ‰ø°‰∏≠...', {
                subject,
                targetPlan,
                hasHtmlContent: !!htmlContent,
                scheduledAt
            });

            const response = await fetch('/.netlify/functions/send-newsletter', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    subject,
                    htmlContent,
                    targetPlan,
                    scheduledAt: scheduledAt || null
                })
            });

            console.log('„É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°:', response.status, response.statusText);

            // „É¨„Çπ„Éù„É≥„Çπ„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖà„Å´ÂèñÂæó
            const responseText = await response.text();
            console.log('„É¨„Çπ„Éù„É≥„ÇπÂÜÖÂÆπ:', responseText);

            let result;
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.error('JSON„Éë„Éº„Çπ„Ç®„É©„Éº:', parseError);
                console.error('„Éë„Éº„ÇπÂ§±Êïó„Åó„Åü„ÉÜ„Ç≠„Çπ„Éà:', responseText);
                alert(`‚ùå ÈÖç‰ø°Â§±Êïó: „Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆÂøúÁ≠î„ÇíËß£Êûê„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü\n„Çπ„ÉÜ„Éº„Çø„Çπ: ${response.status}\nË©≥Á¥∞„ÅØ„Ç≥„É≥„ÇΩ„Éº„É´„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ`);
                return;
            }
            
            if (response.ok) {
                // „Çπ„ÉÜ„ÉÉ„Éó3: ÁµêÊûúÁ¢∫Ë™ç
                if (!sendProgress.isCancelled) {
                    setProgressStep(3);
                    
                    // ÊúÄÁµÇÁµ±Ë®àÊõ¥Êñ∞
                    updateSendProgress(result.recipientCount || 0, result.failedCount || 0);
                }
                
                let successMessage;
                if (result.isScheduled) {
                    // ‰∫àÁ¥ÑÈÖç‰ø°ÊàêÂäü
                    const scheduledDate = new Date(scheduledAt);
                    successMessage = `üöÄ ‰∫àÁ¥ÑÈÖç‰ø°ÁôªÈå≤ÂÆå‰∫ÜÔºÅ\n\n` +
                        `‰ª∂Âêç: ${result.data.subject}\n` +
                        `ÈÖç‰ø°‰∫àÂÆö: ${result.data.scheduledTime}\n` +
                        `ÂØæË±°: ${result.data.recipientCount}‰ª∂\n` +
                        `„Ç∏„Éß„ÉñID: ${result.jobId}\n\n` +
                        `‚úÖ Ëá™‰Ωú„Çπ„Ç±„Ç∏„É•„Éº„É©„Éº„ÅßÁ¢∫ÂÆüÈÖç‰ø°„Åï„Çå„Åæ„ÅôÔºÅ\n` +
                        `${result.data.note}`;
                } else if (result.failedCount > 0) {
                    successMessage = `‚ö†Ô∏è ÈÖç‰ø°ÂÆå‰∫ÜÔºÅÊàêÂäü: ${result.recipientCount}‰ª∂„ÄÅÂ§±Êïó: ${result.failedCount}‰ª∂`;
                } else {
                    successMessage = `‚úÖ ÈÖç‰ø°ÊàêÂäüÔºÅ${result.recipientCount}‰ª∂„Å´ÈÖç‰ø°„Åó„Åæ„Åó„Åü`;
                }
                
                // „Éó„É≠„Ç∞„É¨„ÇπÂÆå‰∫Ü
                if (sendProgress.isActive && !sendProgress.isCancelled) {
                    completeProgress(true, successMessage);
                    
                    setTimeout(() => {
                        alert(successMessage);
                    }, 800);
                } else {
                    alert(successMessage);
                }
                
                // Â§±Êïó„É°„Éº„É´„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØLocalStorage„Å´‰øùÂ≠ò
                if (result.failedEmails && result.failedEmails.length > 0) {
                    const failedKey = `newsletter-failed-${Date.now()}`;
                    localStorage.setItem(failedKey, JSON.stringify(result.failedEmails));
                    console.warn('ÈÄÅ‰ø°Â§±Êïó„É°„Éº„É´„Çí‰øùÂ≠ò:', result.failedEmails.length + '‰ª∂');
                }
                
                // Â±•Ê≠¥„Å´‰øùÂ≠ò
                saveHistoryToLocal({
                    subject: subject,
                    targetPlan: targetPlan,
                    recipientCount: result.recipientCount,
                    failedCount: result.failedCount || 0,
                    scheduledAt: scheduledAt || new Date().toISOString(),
                    status: result.isScheduled ? 'scheduled' : 'sent'
                });
                
                // „Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà
                document.getElementById('subject').value = '';
                document.getElementById('mainContent').value = '';
                document.getElementById('targetPlan').value = 'all';
                document.getElementById('templateType').value = 'prediction';
                document.getElementById('scheduledAt').value = '';
                document.getElementById('predictionNote').value = '';
                document.getElementById('additionalSection').value = '';
                document.getElementById('customCtaText').value = '';
                document.getElementById('showCtaButton').checked = true;
                // „Éó„É¨„Éì„É•„Éº„ÇÇ„ÇØ„É™„Ç¢
                clearPreview();
                
                // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çø„Ç§„Éó„Çí„É™„Çª„ÉÉ„ÉàÂæå„ÄÅ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÊõ¥Êñ∞
                setTimeout(() => {
                    updateTemplateSection();
                }, 100);
                
                // Â±•Ê≠¥„ÇíÊõ¥Êñ∞
                loadHistory();
            } else {
                console.error('ÈÖç‰ø°„Ç®„É©„ÉºË©≥Á¥∞:', result);
                alert(`‚ùå ÈÖç‰ø°Â§±Êïó: ${result.error || result.details || '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'}\nË©≥Á¥∞„ÅØ„Ç≥„É≥„ÇΩ„Éº„É´„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ`);
            }
        } catch (error) {
            console.error('ÈÖç‰ø°„Ç®„É©„Éº:', error);
            
            // „Éó„É≠„Ç∞„É¨„ÇπÂ§±ÊïóÂá¶ÁêÜ
            if (sendProgress.isActive) {
                completeProgress(false);
            }
            
            alert(`ÈÖç‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`);
        }
    });

    // Êñ∞„Åó„ÅÑÁµ±Âêà„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàêÈñ¢Êï∞
    function generateAdvancedNewsletterHTML(templateData) {
        const { 
            title, 
            mainContent, 
            templateType,
            predictions = [],
            results = [],
            monthlyHitRate = '',
            monthlyProfit = '',
            campaignTitle = '',
            campaignDetails = '',
            originalPrice = '',
            campaignPrice = '',
            campaignDeadline = '',
            ctaUrl = 'https://nankan-analytics.keiba.link/pricing/',
            customTheme = 'default',
            customHeadline = '',
            customAccent = '',
            customSectionCtaText = '',
            customSectionCtaUrl = '',
            layoutOrder = 'content-first',
            predictionNote = '',
            additionalSection = '',
            showCtaButton = true,
            customCtaText = '',
            customCtaUrl = ''
        } = templateData;

        // CTA„ÉÜ„Ç≠„Çπ„Éà„ÇíÈÅ©Âàá„Å´Ë®≠ÂÆö
        let ctaText;
        if (customCtaText && customCtaText.trim()) {
            ctaText = customCtaText;
        } else {
            switch(templateType) {
                case 'prediction':
                    ctaText = 'üèá ÊúâÊñô„Éó„É©„É≥„ÅßÂÖ®„É¨„Éº„Çπ‰∫àÊÉ≥„ÇíË¶ã„Çã';
                    break;
                case 'campaign':
                    ctaText = 'üéØ ÈôêÂÆö„Ç™„Éï„Ç°„Éº„ÇíÁ¢∫Ë™ç„Åô„Çã';
                    break;
                case 'result':
                    ctaText = 'üìà Ë©≥Á¥∞„Å™ÂàÜÊûêÁµêÊûú„ÇíË¶ã„Çã';
                    break;
                default:
                    ctaText = 'Ë©≥Á¥∞„ÅØ„Åì„Å°„Çâ';
            }
        }

        // „É¢„ÉÄ„É≥„ÉÜ„Éº„ÉûÂà•„Çπ„Çø„Ç§„É´
        const modernThemes = {
            gold: {
                gradient: 'linear-gradient(135deg, #fbbf24 0%, #f59e0b 50%, #d97706 100%)',
                cardBg: 'linear-gradient(135deg, #fefbf3 0%, #fef3c7 100%)',
                textColor: '#92400e',
                accentColor: '#f59e0b'
            },
            red: {
                gradient: 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 50%, #e17055 100%)',
                cardBg: 'linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%)',
                textColor: '#991b1b',
                accentColor: '#dc2626'
            },
            blue: {
                gradient: 'linear-gradient(135deg, #4299e1 0%, #3182ce 50%, #2b6cb0 100%)',
                cardBg: 'linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%)',
                textColor: '#1e40af',
                accentColor: '#3b82f6'
            }
        };
        
        const currentTheme = modernThemes[customTheme] || modernThemes.blue;
        
        let themeStyles = `
            .header { background: ${currentTheme.gradient}; }
            .prediction-card, .result-card, .campaign-card { 
                border-left-color: ${currentTheme.accentColor}; 
                background: ${currentTheme.cardBg};
                box-shadow: 0 10px 25px rgba(0,0,0,0.1);
                border-radius: 15px;
            }
            .cta-button { 
                background: ${currentTheme.gradient};
                box-shadow: 0 10px 25px rgba(0,0,0,0.2);
                border-radius: 12px;
                transition: all 0.3s ease;
            }
            .cta-button:hover {
                transform: translateY(-3px);
                box-shadow: 0 15px 35px rgba(0,0,0,0.3);
            }
            .modern-campaign-hero {
                background: ${currentTheme.gradient};
                position: relative;
                overflow: hidden;
            }
            .campaign-highlight {
                background: ${currentTheme.cardBg};
                border: 2px solid ${currentTheme.accentColor};
                box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            }
        `;

        // „Ç´„Çπ„Çø„É†„Éò„ÉÉ„Éâ„É©„Ç§„É≥
        const customHeadlineHTML = customHeadline ? `
            <div style="background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%); padding: 20px; margin: 20px 0; border-radius: 12px; border-left: 4px solid #ef4444; text-align: center;">
                <h2 style="color: #dc2626; font-size: 24px; font-weight: bold; margin: 0;">${customHeadline}</h2>
            </div>
        ` : '';

        // „Ç´„Çπ„Çø„É†„Ç¢„ÇØ„Çª„É≥„Éà
        const customAccentHTML = customAccent ? `
            <div style="background: #f0f9ff; border-radius: 12px; padding: 20px; margin: 20px 0; border-left: 4px solid #0ea5e9;">
                <div style="color: #0c4a6e; font-size: 18px; font-weight: 600; line-height: 1.6; white-space: pre-wrap;">${customAccent}</div>
            </div>
        ` : '';

        return `
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>${title}</title>
    <style type="text/css">
        /* Yahoo Mail compatibility fixes */
        body, table, td, p, a, li, blockquote {
            -webkit-text-size-adjust: 100%; 
            -ms-text-size-adjust: 100%;
        }
        table, td {
            mso-table-lspace: 0pt; 
            mso-table-rspace: 0pt;
        }
        img {
            -ms-interpolation-mode: bicubic;
            border: 0;
            height: auto;
            line-height: 100%;
            outline: none;
            text-decoration: none;
        }
        /* Remove default margins and spacing */
        body {
            margin: 0 !important;
            padding: 0 !important;
            height: 100% !important;
            width: 100% !important;
        }
        /* Email client reset */
        table {
            border-collapse: collapse !important;
        }
        a[x-apple-data-detectors] {
            color: inherit !important;
            text-decoration: none !important;
            font-size: inherit !important;
            font-family: inherit !important;
            font-weight: inherit !important;
            line-height: inherit !important;
        }
    </style>
</head>
<body style="margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #f8fafc;">
    <!-- Main Container Table -->
    <table border="0" cellpadding="0" cellspacing="0" width="100%" style="background-color: #f8fafc;">
        <tr>
            <td align="center" style="padding: 20px 0;">
                <!-- Email Content Table -->
                <table border="0" cellpadding="0" cellspacing="0" width="600" style="max-width: 600px; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                    
                    <!-- Header Section -->
                    <tr>
                        <td align="center" style="background-color: #1e293b; padding: 40px 20px; border-radius: 12px 12px 0 0;">
                            <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                <tr>
                                    <td align="center">
                                        <h1 style="margin: 0 0 10px 0; color: #ffffff; font-size: 28px; font-weight: bold; font-family: Arial, sans-serif;">
                                            üèá NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ
                                        </h1>
                                        <p style="margin: 0; color: #cbd5e1; font-size: 16px; font-family: Arial, sans-serif;">
                                            AI„ÉªÊ©üÊ¢∞Â≠¶Áøí„ÅßÂãù„Å§ÂçóÈñ¢Á´∂È¶¨
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    
                    <!-- Content Section -->
                    <tr>
                        <td style="padding: 40px 30px;">
                            
                            <!-- Custom Headline -->
                            ${customHeadline ? `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 25px;">
                                <tr>
                                    <td align="center" style="background-color: #fee2e2; padding: 20px; border-radius: 8px; border-left: 4px solid #ef4444;">
                                        <h2 style="margin: 0; color: #dc2626; font-size: 22px; font-weight: bold; font-family: Arial, sans-serif;">${customHeadline}</h2>
                                    </td>
                                </tr>
                            </table>
                            ` : ''}
                            
                            <!-- Prediction First Layout -->
                            ${layoutOrder === 'prediction-first' && templateType === 'prediction' && predictions.length > 0 ? `
                            <!-- Section Title -->
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 25px;">
                                <tr>
                                    <td align="center">
                                        <h3 style="margin: 0 0 15px 0; color: #0f172a; font-size: 24px; font-weight: bold; font-family: Arial, sans-serif;">üéØ Êú¨Êó•„ÅÆÊ≥®ÁõÆ‰∫àÊÉ≥</h3>
                                        <div style="width: 60px; height: 3px; background-color: #3b82f6; margin: 0 auto;"></div>
                                    </td>
                                </tr>
                            </table>
                            
                            <!-- Prediction Cards -->
                            ${predictions.map(p => `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #e2e8f0; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
                                <tr>
                                    <td style="padding: 25px; border-left: 4px solid #3b82f6;">
                                        <h4 style="margin: 0 0 15px 0; color: #0f172a; font-size: 18px; font-weight: bold; font-family: Arial, sans-serif;">
                                            üèÅ ${p.raceName}
                                        </h4>
                                        <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                            ${p.horses.map(h => `
                                            <tr>
                                                <td style="padding: 8px 15px; background-color: #f8fafc; margin-bottom: 5px; border-radius: 6px; border-left: 3px solid #cbd5e1;">
                                                    <p style="margin: 0; color: #475569; font-size: 14px; font-family: Arial, sans-serif;">${h}</p>
                                                </td>
                                            </tr>
                                            `).join('')}
                                        </table>
                                    </td>
                                </tr>
                            </table>
                            `).join('')}
                            
                            ${predictionNote ? `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin: 20px 0;">
                                <tr>
                                    <td style="background-color: #f3e8ff; padding: 20px; border-radius: 8px; border-left: 4px solid #a855f7;">
                                        <p style="margin: 0; color: #7c3aed; font-size: 14px; line-height: 1.6; font-family: Arial, sans-serif; white-space: pre-wrap;">${predictionNote}</p>
                                    </td>
                                </tr>
                            </table>
                            ` : ''}
                            ` : ''}
                            
                            <!-- Main Content -->
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin: 30px 0;">
                                <tr>
                                    <td align="center">
                                        <p style="margin: 0; color: #374151; font-size: 16px; line-height: 1.7; font-family: Arial, sans-serif;">${mainContent}</p>
                                    </td>
                                </tr>
                            </table>
                            
                            <!-- Custom Accent -->
                            ${customAccent ? `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin: 20px 0;">
                                <tr>
                                    <td style="background-color: #f0f9ff; padding: 20px; border-radius: 8px; border-left: 4px solid #0ea5e9;">
                                        <p style="margin: 0; color: #0c4a6e; font-size: 16px; font-weight: 600; line-height: 1.6; font-family: Arial, sans-serif; white-space: pre-wrap;">${customAccent}</p>
                                    </td>
                                </tr>
                            </table>
                            ` : ''}
                            
                            <!-- Content First Layout -->
                            ${layoutOrder === 'content-first' && templateType === 'prediction' && predictions.length > 0 ? `
                            <!-- Section Title -->
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 25px;">
                                <tr>
                                    <td align="center">
                                        <h3 style="margin: 0 0 15px 0; color: #0f172a; font-size: 24px; font-weight: bold; font-family: Arial, sans-serif;">üéØ Êú¨Êó•„ÅÆÊ≥®ÁõÆ‰∫àÊÉ≥</h3>
                                        <div style="width: 60px; height: 3px; background-color: #3b82f6; margin: 0 auto;"></div>
                                    </td>
                                </tr>
                            </table>
                            
                            <!-- Prediction Cards -->
                            ${predictions.map(p => `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #e2e8f0; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
                                <tr>
                                    <td style="padding: 25px; border-left: 4px solid #3b82f6;">
                                        <h4 style="margin: 0 0 15px 0; color: #0f172a; font-size: 18px; font-weight: bold; font-family: Arial, sans-serif;">
                                            üèÅ ${p.raceName}
                                        </h4>
                                        <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                            ${p.horses.map(h => `
                                            <tr>
                                                <td style="padding: 8px 15px; background-color: #f8fafc; border-radius: 6px; border-left: 3px solid #cbd5e1;">
                                                    <p style="margin: 0 0 5px 0; color: #475569; font-size: 14px; font-family: Arial, sans-serif;">${h}</p>
                                                </td>
                                            </tr>
                                            `).join('')}
                                        </table>
                                    </td>
                                </tr>
                            </table>
                            `).join('')}
                            
                            ${predictionNote ? `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin: 20px 0;">
                                <tr>
                                    <td style="background-color: #f3e8ff; padding: 20px; border-radius: 8px; border-left: 4px solid #a855f7;">
                                        <p style="margin: 0; color: #7c3aed; font-size: 14px; line-height: 1.6; font-family: Arial, sans-serif; white-space: pre-wrap;">${predictionNote}</p>
                                    </td>
                                </tr>
                            </table>
                            ` : ''}
                            
                            ${additionalSection ? `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin: 25px 0;">
                                <tr>
                                    <td align="center">
                                        <p style="margin: 0; color: #374151; font-size: 16px; line-height: 1.7; font-family: Arial, sans-serif; white-space: pre-wrap;">${additionalSection}</p>
                                    </td>
                                </tr>
                            </table>
                            ` : ''}
                            ` : ''}
                            
                            <!-- Results Section -->
                            ${templateType === 'result' && results.length > 0 ? `
                            <!-- Section Title -->
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 25px;">
                                <tr>
                                    <td align="center">
                                        <h3 style="margin: 0 0 15px 0; color: #0f172a; font-size: 24px; font-weight: bold; font-family: Arial, sans-serif;">üìä Êò®Êó•„ÅÆÁµêÊûú</h3>
                                        <div style="width: 60px; height: 3px; background-color: #3b82f6; margin: 0 auto;"></div>
                                    </td>
                                </tr>
                            </table>
                            
                            <!-- Result Cards -->
                            ${results.map(r => `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #e2e8f0; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
                                <tr>
                                    <td style="padding: 25px; border-left: 4px solid #3b82f6;">
                                        <h4 style="margin: 0 0 15px 0; color: #0f172a; font-size: 18px; font-weight: bold; font-family: Arial, sans-serif;">
                                            üèÅ ${r.raceName}
                                        </h4>
                                        <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                            <tr>
                                                <td style="padding: 8px 15px; background-color: #f8fafc; border-radius: 6px;">
                                                    <p style="margin: 0 0 5px 0; color: #475569; font-size: 14px; font-family: Arial, sans-serif;">ü•á 1ÁùÄ: <strong>${r.winner}</strong></p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="padding: 8px 15px; background-color: #f8fafc; border-radius: 6px;">
                                                    <p style="margin: 0 0 5px 0; color: #475569; font-size: 14px; font-family: Arial, sans-serif;">üí∞ ÈÖçÂΩì: <strong>${r.payout}</strong></p>
                                                </td>
                                            </tr>
                                        </table>
                                        <div style="margin-top: 10px;">
                                            <span style="
                                                font-weight: bold; 
                                                font-size: 14px; 
                                                padding: 6px 12px; 
                                                border-radius: 15px; 
                                                display: inline-block;
                                                color: ${r.status === 'hit' ? '#065f46' : r.status === 'near' ? '#92400e' : '#991b1b'};
                                                background-color: ${r.status === 'hit' ? '#d1fae5' : r.status === 'near' ? '#fef3c7' : '#fee2e2'};
                                            ">
                                                ${r.status === 'hit' ? 'üéØ ÁöÑ‰∏≠ÔºÅ' : r.status === 'near' ? 'üìà ÊÉú„Åó„ÅÑÔºÅ' : '‚ùå ‰∏çÁöÑ‰∏≠'}
                                            </span>
                                        </div>
                                    </td>
                                </tr>
                            </table>
                            `).join('')}
                            
                            ${(monthlyHitRate || monthlyProfit) ? `
                            <!-- Stats Section -->
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin: 25px 0; background-color: #eff6ff; border-radius: 12px; border: 1px solid rgba(59,130,246,0.1);">
                                <tr>
                                    <td style="padding: 25px;">
                                        <h4 style="margin: 0 0 15px 0; color: #0c4a6e; font-size: 18px; font-weight: bold; font-family: Arial, sans-serif;">üìà ‰ªäÊúà„ÅÆÂÆüÁ∏æ</h4>
                                        <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                            <tr>
                                                ${monthlyHitRate ? `
                                                <td align="center" style="background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
                                                    <div style="font-size: 28px; font-weight: bold; color: #1e40af; margin-bottom: 5px;">${monthlyHitRate}</div>
                                                    <div style="font-size: 12px; color: #64748b; font-weight: 600;">ÁöÑ‰∏≠Áéá</div>
                                                </td>
                                                ` : ''}
                                                ${monthlyProfit ? `
                                                <td align="center" style="background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
                                                    <div style="font-size: 28px; font-weight: bold; color: #1e40af; margin-bottom: 5px;">${monthlyProfit}</div>
                                                    <div style="font-size: 12px; color: #64748b; font-weight: 600;">ÂèéÊîØ</div>
                                                </td>
                                                ` : ''}
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            </table>
                            ` : ''}
                            ` : ''}
                            
                            <!-- Campaign Section -->
                            ${templateType === 'campaign' && campaignTitle ? `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin: 25px 0; background-color: #1e293b; border-radius: 12px;">
                                <tr>
                                    <td align="center" style="padding: 35px 25px; color: white;">
                                        <h2 style="margin: 0 0 15px 0; color: #ffffff; font-size: 24px; font-weight: bold; font-family: Arial, sans-serif;">
                                            üéÜ ${campaignTitle} üéÜ
                                        </h2>
                                        <p style="margin: 0 0 25px 0; color: #cbd5e1; font-size: 16px; font-family: Arial, sans-serif;">
                                            ‚ú® ${campaignDetails || 'ÊúüÈñìÈôêÂÆö„ÅÆÁâπÂà•„Ç™„Éï„Ç°„Éº„Çí„ÅäË¶ãÈÄÉ„Åó„Å™„ÅèÔºÅ'} ‚ú®
                                        </p>
                                        
                                        ${originalPrice && campaignPrice ? `
                                        <table border="0" cellpadding="0" cellspacing="0" style="margin: 15px auto; background-color: rgba(255,255,255,0.2); border-radius: 8px; padding: 15px;">
                                            <tr>
                                                <td align="center">
                                                    <span style="font-size: 18px; text-decoration: line-through; opacity: 0.7; color: white;">${originalPrice}</span>
                                                    <span style="font-size: 14px; font-weight: bold; margin: 0 15px; color: white;">‚Üí</span>
                                                    <span style="font-size: 24px; font-weight: bold; color: white;">${campaignPrice}</span>
                                                </td>
                                            </tr>
                                        </table>
                                        ` : ''}
                                        
                                        ${campaignDeadline ? `
                                        <div style="background-color: #dc2626; color: white; padding: 12px 25px; border-radius: 20px; font-weight: bold; margin-top: 15px; display: inline-block;">
                                            üö® ÊúüÈôê: ${campaignDeadline} üö®
                                        </div>
                                        ` : ''}
                                    </td>
                                </tr>
                            </table>
                            ` : ''}
                            
                            <!-- CTA Button -->
                            ${showCtaButton ? `
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="margin: 30px 0;">
                                <tr>
                                    <td align="center">
                                        <table border="0" cellpadding="0" cellspacing="0">
                                            <tr>
                                                <td align="center" style="background-color: #3b82f6; border-radius: 12px; box-shadow: 0 4px 15px rgba(59,130,246,0.3);">
                                                    <a href="${customCtaUrl && customCtaUrl.trim() ? customCtaUrl : ctaUrl}" style="
                                                        display: inline-block; 
                                                        padding: 16px 32px; 
                                                        color: #ffffff; 
                                                        text-decoration: none; 
                                                        font-weight: bold; 
                                                        font-size: 16px; 
                                                        font-family: Arial, sans-serif;
                                                        border-radius: 12px;
                                                    ">${ctaText}</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            </table>
                            ` : ''}
                            
                        </td>
                    </tr>
                    
                    <!-- Footer Section -->
                    <tr>
                        <td align="center" style="background-color: #f1f5f9; padding: 30px 20px; border-radius: 0 0 12px 12px; border-top: 1px solid #e2e8f0;">
                            <p style="margin: 0; color: #64748b; font-size: 12px; font-family: Arial, sans-serif;">
                                ¬© 2025 NANKAN„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ
                            </p>
                        </td>
                    </tr>
                    
                </table>
            </td>
        </tr>
    </table>
</body>
</html>
        `;
    }
</script>
