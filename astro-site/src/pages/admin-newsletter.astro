---
// 管理者用メルマガ配信ページ
export const prerender = true;
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="メルマガ配信管理 - NANKANアナリティクス">
    <div class="newsletter-admin">
        <div class="admin-header">
            <h1>📧 メルマガ配信管理</h1>
            <p class="subtitle">NANKANアナリティクスのメールマガジンを配信</p>
        </div>

        <div class="admin-container">
            <!-- 配信フォーム -->
            <div class="card">
                <h2>新規配信作成</h2>
                
                <div class="form-group">
                    <label for="subject">件名</label>
                    <input type="text" id="subject" placeholder="例: 【NANKANアナリティクス】本日の注目レース予想" />
                </div>

                <div class="form-group">
                    <label for="targetPlan">配信対象</label>
                    <select id="targetPlan">
                        <option value="all">全会員</option>
                        <option value="free">無料会員のみ</option>
                        <option value="paid">有料会員のみ（Standard + Premium）</option>
                        <option value="standard">Standard会員のみ</option>
                        <option value="premium">Premium会員のみ</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="templateType">テンプレートタイプ</label>
                    <select id="templateType">
                        <option value="prediction">予想配信</option>
                        <option value="result">結果報告</option>
                        <option value="campaign">キャンペーン</option>
                        <option value="custom">カスタム</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="mainContent">本文</label>
                    <textarea id="mainContent" rows="10" placeholder="メールの本文を入力してください"></textarea>
                </div>

                <!-- 予想セクション（予想配信タイプの場合） -->
                <div id="predictionSection">
                    <h3>🎯 予想情報</h3>
                    <div id="predictionsContainer">
                        <div class="prediction-input">
                            <input type="text" placeholder="レース名（例: 第11R メインレース）" class="race-name" />
                            <textarea placeholder="予想馬（改行区切り）" rows="3" class="race-horses"></textarea>
                        </div>
                    </div>
                    <button type="button" id="addPrediction" class="btn-secondary">+ 予想を追加</button>
                </div>

                <!-- 結果報告セクション（結果報告タイプの場合） -->
                <div id="resultSection" style="display: none;">
                    <h3>📊 昨日の結果</h3>
                    <div id="resultsContainer">
                        <div class="result-input">
                            <input type="text" placeholder="レース名（例: 第11R メインレース）" class="result-race-name" />
                            <div class="result-details">
                                <input type="text" placeholder="1着馬" class="result-winner" />
                                <input type="text" placeholder="配当（例: ¥1,200）" class="result-payout" />
                                <select class="result-status">
                                    <option value="hit">🎯 的中！</option>
                                    <option value="miss">❌ 不的中</option>
                                    <option value="near">📈 惜しい！</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <button type="button" id="addResult" class="btn-secondary">+ 結果を追加</button>
                    <div class="total-stats">
                        <input type="text" placeholder="今月の的中率（例: 78%）" id="monthlyHitRate" />
                        <input type="text" placeholder="今月の収支（例: +¥45,600）" id="monthlyProfit" />
                    </div>
                </div>

                <!-- キャンペーンセクション（キャンペーンタイプの場合） -->
                <div id="campaignSection" style="display: none;">
                    <h3>🎪 キャンペーン情報</h3>
                    <div class="campaign-inputs">
                        <input type="text" placeholder="キャンペーン名（例: 限定50名！特別予想プラン）" id="campaignTitle" />
                        <textarea placeholder="キャンペーン詳細・特典内容" rows="3" id="campaignDetails"></textarea>
                        <input type="text" placeholder="通常価格（例: ¥9,980）" id="originalPrice" />
                        <input type="text" placeholder="特別価格（例: ¥4,980）" id="campaignPrice" />
                        <input type="text" placeholder="期限（例: 12月31日まで）" id="campaignDeadline" />
                        <input type="text" placeholder="CTAボタンテキスト（例: 今すぐ申し込む）" id="ctaText" />
                        <input type="url" placeholder="CTAボタンリンク先URL" id="ctaUrl" />
                    </div>
                </div>

                <!-- カスタムセクション（カスタムタイプの場合） -->
                <div id="customSection" style="display: none;">
                    <h3>🎨 カスタムレイアウト</h3>
                    <div class="custom-inputs">
                        <label>背景色テーマ</label>
                        <select id="customTheme">
                            <option value="default">デフォルト</option>
                            <option value="gold">🏆 ゴールド（勝利感）</option>
                            <option value="red">🔥 レッド（緊急感）</option>
                            <option value="blue">💎 ブルー（信頼感）</option>
                        </select>
                        
                        <label>特別見出し</label>
                        <input type="text" placeholder="特別見出し（例: 🚨 緊急速報！）" id="customHeadline" />
                        
                        <label>アクセント情報</label>
                        <textarea placeholder="強調したい情報・数字・実績" rows="2" id="customAccent"></textarea>
                        
                        <label>追加CTA</label>
                        <input type="text" placeholder="追加ボタンテキスト" id="customCtaText" />
                        <input type="url" placeholder="追加ボタンURL" id="customCtaUrl" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="scheduledAt">配信予約（オプション）</label>
                    <input type="datetime-local" id="scheduledAt" />
                    <small>
                        空欄の場合は即時配信されます<br>
                        <strong>現在時刻: <span id="currentTime">--:--</span></strong> (日本時間)<br>
                        <span style="color: #f59e0b;">⚠️ 予約配信は5-10分程度の遅延が発生する場合があります</span>
                    </small>
                </div>

                <div class="button-group">
                    <button id="previewBtn" class="btn-secondary">プレビュー</button>
                    <button id="clearPreviewBtn" class="btn-secondary">プレビューをクリア</button>
                    <button id="sendBtn" class="btn-primary">配信実行</button>
                </div>
            </div>

            <!-- プレビューエリア -->
            <div class="card">
                <h2>メールプレビュー</h2>
                <div id="previewArea" class="preview-container">
                    <p class="preview-placeholder">配信内容をプレビューするには「プレビュー」ボタンをクリックしてください</p>
                </div>
            </div>

            <!-- 配信履歴 -->
            <div class="card">
                <h2>配信履歴・予約状況</h2>
                <div class="history-controls">
                    <button id="refreshHistoryBtn" class="btn-secondary">履歴を更新</button>
                </div>
                <div id="historyArea">
                    <p class="loading">読み込み中...</p>
                </div>
            </div>
        </div>
    </div>
</BaseLayout>

<script>
    // テンプレートタイプの表示制御関数
    function updateTemplateSection() {
        const templateType = document.getElementById('templateType');
        const predictionSection = document.getElementById('predictionSection');
        const resultSection = document.getElementById('resultSection');
        const campaignSection = document.getElementById('campaignSection');
        const customSection = document.getElementById('customSection');
        
        // 全セクションを非表示
        [predictionSection, resultSection, campaignSection, customSection].forEach(section => {
            if (section) section.style.display = 'none';
        });
        
        // 選択されたタイプに応じて表示
        if (templateType) {
            switch (templateType.value) {
                case 'prediction':
                    if (predictionSection) {
                        predictionSection.style.display = 'block';
                        console.log('🎯 予想セクションを表示');
                    }
                    break;
                case 'result':
                    if (resultSection) {
                        resultSection.style.display = 'block';
                        console.log('📊 結果報告セクションを表示');
                    }
                    break;
                case 'campaign':
                    if (campaignSection) {
                        campaignSection.style.display = 'block';
                        console.log('🎪 キャンペーンセクションを表示');
                    }
                    break;
                case 'custom':
                    if (customSection) {
                        customSection.style.display = 'block';
                        console.log('🎨 カスタムセクションを表示');
                    }
                    break;
            }
        }
    }

    // テンプレートタイプ変更時の処理
    const templateType = document.getElementById('templateType');
    templateType?.addEventListener('change', updateTemplateSection);

    // 予想追加ボタン
    document.getElementById('addPrediction')?.addEventListener('click', () => {
        const container = document.getElementById('predictionsContainer');
        const newPrediction = document.createElement('div');
        newPrediction.className = 'prediction-input';
        newPrediction.innerHTML = `
            <input type="text" placeholder="レース名" class="race-name" />
            <textarea placeholder="予想馬（改行区切り）" rows="3" class="race-horses"></textarea>
            <button type="button" class="remove-prediction">削除</button>
        `;
        container.appendChild(newPrediction);
        
        // 削除ボタンの処理
        newPrediction.querySelector('.remove-prediction')?.addEventListener('click', () => {
            newPrediction.remove();
        });
    });

    // 結果追加ボタン
    document.getElementById('addResult')?.addEventListener('click', () => {
        const container = document.getElementById('resultsContainer');
        const newResult = document.createElement('div');
        newResult.className = 'result-input';
        newResult.innerHTML = `
            <input type="text" placeholder="レース名" class="result-race-name" />
            <div class="result-details">
                <input type="text" placeholder="1着馬" class="result-winner" />
                <input type="text" placeholder="配当（例: ¥1,200）" class="result-payout" />
                <select class="result-status">
                    <option value="hit">🎯 的中！</option>
                    <option value="miss">❌ 不的中</option>
                    <option value="near">📈 惜しい！</option>
                </select>
                <button type="button" class="remove-result">削除</button>
            </div>
        `;
        container.appendChild(newResult);
        
        // 削除ボタンの処理
        newResult.querySelector('.remove-result')?.addEventListener('click', () => {
            newResult.remove();
        });
    });

    // プレビューをクリアする関数
    function clearPreview() {
        const previewArea = document.getElementById('previewArea');
        previewArea.innerHTML = '<p class="preview-placeholder">配信内容をプレビューするには「プレビュー」ボタンをクリックしてください</p>';
    }
    
    // プレビュー生成関数 - 全テンプレートタイプ対応
    function generatePreview() {
        try {
            const subject = document.getElementById('subject').value;
            const templateType = document.getElementById('templateType').value;
            const mainContent = document.getElementById('mainContent').value;
            
            if (!subject) {
                document.getElementById('previewArea').innerHTML = '<p class="error">件名を入力してください</p>';
                return;
            }

            // テンプレートタイプ別データ収集
            let templateData = {
                subject: subject,
                templateType: templateType,
                theme: document.getElementById('customTheme')?.value || 'blue'
            };

            if (templateType === 'prediction') {
                templateData.predictions = collectPredictionData();
            } else if (templateType === 'result') {
                templateData.results = collectResultData();
            } else if (templateType === 'campaign') {
                templateData.campaign = collectCampaignData();
            } else if (templateType === 'custom') {
                templateData.custom = collectCustomData();
            }

            // 高度なHTML生成
            const htmlContent = generateAdvancedNewsletterHTML(templateData);
            
            // プレビューエリアに表示
            const previewFrame = document.getElementById('previewFrame');
            if (previewFrame) {
                previewFrame.srcdoc = htmlContent;
                console.log('✅ プレビュー生成完了 - テンプレートタイプ:', templateType);
            }
            
            // HTMLコンテンツフィールドも更新
            const htmlContentField = document.getElementById('htmlContent');
            if (htmlContentField) {
                htmlContentField.value = htmlContent;
            }
            
        } catch (error) {
            console.error('プレビュー生成エラー:', error);
            document.getElementById('previewArea').innerHTML = '<p class="error">プレビュー生成エラー: ' + error.message + '</p>';
        }
    }
    
    // 予想データ収集
    function collectPredictionData() {
        const races = [];
        for (let i = 1; i <= 3; i++) {
            const raceName = document.getElementById(`race${i}Name`)?.value;
            const horses = [];
            for (let j = 1; j <= 3; j++) {
                const horse = document.getElementById(`race${i}Horse${j}`)?.value;
                if (horse) horses.push(horse);
            }
            if (raceName || horses.length > 0) {
                races.push({ name: raceName || `第${i}レース`, horses });
            }
        }
        return { races, highlight: document.getElementById('predictionHighlight')?.value || '' };
    }
    
    // 結果データ収集
    function collectResultData() {
        const results = [];
        for (let i = 1; i <= 3; i++) {
            const raceName = document.getElementById(`result${i}Race`)?.value;
            const prediction = document.getElementById(`result${i}Prediction`)?.value;
            const actual = document.getElementById(`result${i}Actual`)?.value;
            const status = document.getElementById(`result${i}Status`)?.value;
            if (raceName || prediction) {
                results.push({ raceName, prediction, actual, status });
            }
        }
        return {
            results,
            monthlyHitRate: document.getElementById('monthlyHitRate')?.value || '',
            monthlyROI: document.getElementById('monthlyROI')?.value || ''
        };
    }
    
    // キャンペーンデータ収集
    function collectCampaignData() {
        return {
            title: document.getElementById('campaignTitle')?.value || '',
            description: document.getElementById('campaignDescription')?.value || '',
            discount: document.getElementById('campaignDiscount')?.value || '',
            period: document.getElementById('campaignPeriod')?.value || '',
            beforePrice: document.getElementById('campaignBeforePrice')?.value || '',
            afterPrice: document.getElementById('campaignAfterPrice')?.value || ''
        };
    }
    
    // カスタムデータ収集
    function collectCustomData() {
        return {
            headline: document.getElementById('customHeadline')?.value || '',
            message: document.getElementById('customMessage')?.value || '',
            feature1: document.getElementById('customFeature1')?.value || '',
            feature2: document.getElementById('customFeature2')?.value || '',
            feature3: document.getElementById('customFeature3')?.value || ''
        };
    }

    // プレビュークリアボタン
    document.getElementById('clearPreviewBtn')?.addEventListener('click', clearPreview);

    // フォーム入力変更時にプレビューを自動クリア
    const formInputs = ['subject', 'mainContent', 'targetPlan', 'templateType', 'scheduledAt'];
    formInputs.forEach(inputId => {
        const element = document.getElementById(inputId);
        element?.addEventListener('input', clearPreview);
        element?.addEventListener('change', clearPreview);
    });

    // 予想入力フィールドの変更も監視
    document.getElementById('predictionsContainer')?.addEventListener('input', clearPreview);

    // 配信履歴を読み込む関数（LocalStorage使用）
    function loadHistory() {
        const historyArea = document.getElementById('historyArea');
        historyArea.innerHTML = '<p class="loading">読み込み中...</p>';
        
        try {
            // LocalStorageから履歴を取得
            const historyData = localStorage.getItem('newsletter-history');
            const history = historyData ? JSON.parse(historyData) : [];
            
            if (history.length > 0) {
                const now = new Date();
                
                // 最新10件のみ表示
                const recentHistory = history.slice(0, 10);
                
                const historyHTML = recentHistory.map(item => {
                    const scheduledDate = new Date(item.scheduledAt);
                    const isScheduled = item.status === 'scheduled' && scheduledDate > now;
                    const isCompleted = item.status === 'sent' || (item.status === 'scheduled' && scheduledDate <= now);
                    
                    let statusBadge = '';
                    let statusClass = '';
                    
                    if (isScheduled) {
                        statusBadge = `<span class="status-badge status-scheduled">予約中 📅</span>`;
                        statusClass = 'history-scheduled';
                    } else if (isCompleted) {
                        statusBadge = `<span class="status-badge status-sent">配信済み ✅</span>`;
                        statusClass = 'history-sent';
                    } else {
                        statusBadge = `<span class="status-badge status-unknown">不明</span>`;
                        statusClass = 'history-unknown';
                    }
                    
                    const formatDate = (dateStr) => {
                        const date = new Date(dateStr);
                        return date.toLocaleString('ja-JP', {
                            year: 'numeric',
                            month: '2-digit',
                            day: '2-digit',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                    };
                    
                    return `
                        <div class="history-item ${statusClass}">
                            <div class="history-header">
                                <h4 class="history-subject">${item.subject}</h4>
                                ${statusBadge}
                            </div>
                            <div class="history-details">
                                <span class="history-plan">対象: ${item.targetPlan}</span>
                                <span class="history-count">配信数: ${item.recipientCount}件</span>
                                <span class="history-date">
                                    ${isScheduled ? '予約日時' : '配信日時'}: ${formatDate(item.scheduledAt)}
                                </span>
                            </div>
                        </div>
                    `;
                }).join('');
                
                historyArea.innerHTML = `
                    <div class="history-list">
                        ${historyHTML}
                    </div>
                `;
            } else {
                historyArea.innerHTML = '<p class="no-history">配信履歴がありません</p>';
            }
        } catch (error) {
            console.error('履歴読み込みエラー:', error);
            historyArea.innerHTML = '<p class="error">履歴の読み込みに失敗しました</p>';
        }
    }

    // 履歴を保存する関数
    function saveHistoryToLocal(historyItem) {
        try {
            const existingHistory = localStorage.getItem('newsletter-history');
            const history = existingHistory ? JSON.parse(existingHistory) : [];
            
            // 新しい履歴を先頭に追加
            history.unshift({
                ...historyItem,
                id: Date.now().toString(), // 簡易ID
                createdAt: new Date().toISOString()
            });
            
            // 最大50件まで保持
            const limitedHistory = history.slice(0, 50);
            
            localStorage.setItem('newsletter-history', JSON.stringify(limitedHistory));
            console.log('履歴をLocalStorageに保存:', historyItem);
        } catch (error) {
            console.error('履歴保存エラー:', error);
        }
    }

    // 履歴更新ボタン
    document.getElementById('refreshHistoryBtn')?.addEventListener('click', loadHistory);
    
    // プレビューボタン
    document.getElementById('generatePreviewBtn')?.addEventListener('click', generatePreview);

    // 現在時刻を更新する関数
    function updateCurrentTime() {
        const now = new Date();
        const timeString = now.toLocaleString('ja-JP', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        const currentTimeElement = document.getElementById('currentTime');
        if (currentTimeElement) {
            currentTimeElement.textContent = timeString;
        }
    }

    // 現在時刻を1秒ごとに更新
    setInterval(updateCurrentTime, 1000);

    // 初期表示で履歴を読み込み
    document.addEventListener('DOMContentLoaded', () => {
        loadHistory();
        updateCurrentTime();
        // 初期状態でテンプレートセクションの表示を設定
        updateTemplateSection();
        
        // プレビューボタンが見つからない場合の代替処理
        const previewBtn = document.getElementById('generatePreviewBtn');
        if (!previewBtn) {
            console.warn('プレビューボタンが見つかりません');
            // プレビューボタンを動的に作成
            const previewArea = document.getElementById('previewArea');
            if (previewArea && !document.getElementById('generatePreviewBtn')) {
                const newPreviewBtn = document.createElement('button');
                newPreviewBtn.id = 'generatePreviewBtn';
                newPreviewBtn.type = 'button';
                newPreviewBtn.textContent = '🔍 プレビュー生成';
                newPreviewBtn.className = 'btn btn-secondary';
                newPreviewBtn.style.marginBottom = '20px';
                
                previewArea.parentNode.insertBefore(newPreviewBtn, previewArea);
                newPreviewBtn.addEventListener('click', generatePreview);
                
                console.log('✅ プレビューボタンを動的に作成しました');
            }
        } else {
            console.log('✅ プレビューボタンが見つかりました');
        }
        
        console.log('ページ初期化完了');
    });

    // プレビュー生成
    document.getElementById('previewBtn')?.addEventListener('click', async () => {
        const subject = document.getElementById('subject').value;
        const mainContent = document.getElementById('mainContent').value;
        const templateType = document.getElementById('templateType').value;
        
        if (!subject || !mainContent) {
            alert('件名と本文を入力してください');
            return;
        }

        // テンプレートタイプ別のデータ収集
        let templateData = {
            title: subject,
            mainContent: mainContent,
            templateType: templateType
        };

        if (templateType === 'prediction') {
            // 予想データ収集
            const predictionInputs = document.querySelectorAll('.prediction-input');
            templateData.predictions = Array.from(predictionInputs).map(input => {
                const raceName = input.querySelector('.race-name').value;
                const horses = input.querySelector('.race-horses').value
                    .split('\n')
                    .filter(h => h.trim())
                    .map(h => h.trim());
                return { raceName, horses };
            }).filter(p => p.raceName && p.horses.length > 0);
        } else if (templateType === 'result') {
            // 結果データ収集
            const resultInputs = document.querySelectorAll('.result-input');
            templateData.results = Array.from(resultInputs).map(input => {
                const raceName = input.querySelector('.result-race-name').value;
                const winner = input.querySelector('.result-winner').value;
                const payout = input.querySelector('.result-payout').value;
                const status = input.querySelector('.result-status').value;
                return { raceName, winner, payout, status };
            }).filter(r => r.raceName);
            
            templateData.monthlyHitRate = document.getElementById('monthlyHitRate')?.value || '';
            templateData.monthlyProfit = document.getElementById('monthlyProfit')?.value || '';
        } else if (templateType === 'campaign') {
            // キャンペーンデータ収集
            templateData.campaignTitle = document.getElementById('campaignTitle')?.value || '';
            templateData.campaignDetails = document.getElementById('campaignDetails')?.value || '';
            templateData.originalPrice = document.getElementById('originalPrice')?.value || '';
            templateData.campaignPrice = document.getElementById('campaignPrice')?.value || '';
            templateData.campaignDeadline = document.getElementById('campaignDeadline')?.value || '';
            templateData.ctaText = document.getElementById('ctaText')?.value || '今すぐ申し込む';
            templateData.ctaUrl = document.getElementById('ctaUrl')?.value || 'https://nankan-analytics.keiba.link/pricing/';
        } else if (templateType === 'custom') {
            // カスタムデータ収集
            templateData.customTheme = document.getElementById('customTheme')?.value || 'default';
            templateData.customHeadline = document.getElementById('customHeadline')?.value || '';
            templateData.customAccent = document.getElementById('customAccent')?.value || '';
            templateData.customCtaText = document.getElementById('customCtaText')?.value || '';
            templateData.customCtaUrl = document.getElementById('customCtaUrl')?.value || '';
        }

        // HTMLテンプレート生成
        const htmlContent = generateAdvancedNewsletterHTML(templateData);

        // プレビュー表示
        const previewArea = document.getElementById('previewArea');
        previewArea.innerHTML = `
            <div class="email-frame">
                <div class="email-header">
                    <strong>件名:</strong> ${subject}
                </div>
                <iframe srcdoc="${htmlContent.replace(/"/g, '&quot;')}" style="width: 100%; height: 600px; border: 1px solid #ddd;"></iframe>
            </div>
        `;
    });

    // 配信実行
    document.getElementById('sendBtn')?.addEventListener('click', async () => {
        const subject = document.getElementById('subject').value;
        const mainContent = document.getElementById('mainContent').value;
        const targetPlan = document.getElementById('targetPlan').value;
        const templateType = document.getElementById('templateType').value;
        const scheduledAt = document.getElementById('scheduledAt').value;
        
        if (!subject || !mainContent) {
            alert('件名と本文を入力してください');
            return;
        }

        if (!confirm(`${targetPlan === 'all' ? '全会員' : targetPlan + '会員'}に配信してよろしいですか？`)) {
            return;
        }

        // 予想データ収集
        let predictions = [];
        if (templateType === 'prediction') {
            const predictionInputs = document.querySelectorAll('.prediction-input');
            predictions = Array.from(predictionInputs).map(input => {
                const raceName = input.querySelector('.race-name').value;
                const horses = input.querySelector('.race-horses').value
                    .split('\n')
                    .filter(h => h.trim())
                    .map(h => h.trim());
                return { raceName, horses };
            }).filter(p => p.raceName && p.horses.length > 0);
        }

        // HTMLテンプレート生成
        const htmlContent = generateNewsletterHTML({
            title: subject,
            mainContent: mainContent,
            predictions: predictions
        });

        try {
            console.log('配信リクエスト送信中...', {
                subject,
                targetPlan,
                hasHtmlContent: !!htmlContent,
                scheduledAt
            });

            const response = await fetch('/.netlify/functions/send-newsletter', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    subject,
                    htmlContent,
                    targetPlan,
                    scheduledAt: scheduledAt || null
                })
            });

            console.log('レスポンス受信:', response.status, response.statusText);

            // レスポンスのテキストを先に取得
            const responseText = await response.text();
            console.log('レスポンス内容:', responseText);

            let result;
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.error('JSONパースエラー:', parseError);
                console.error('パース失敗したテキスト:', responseText);
                alert(`❌ 配信失敗: サーバーからの応答を解析できませんでした\nステータス: ${response.status}\n詳細はコンソールを確認してください`);
                return;
            }
            
            if (response.ok) {
                const successMessage = result.isScheduled 
                    ? `✅ 配信予約完了！${result.recipientCount}件の配信を予約しました`
                    : `✅ 配信成功！${result.recipientCount}件に配信しました`;
                    
                alert(successMessage);
                
                // 履歴に保存
                saveHistoryToLocal({
                    subject: subject,
                    targetPlan: targetPlan,
                    recipientCount: result.recipientCount,
                    scheduledAt: scheduledAt || new Date().toISOString(),
                    status: result.isScheduled ? 'scheduled' : 'sent'
                });
                
                // フォームをリセット
                document.getElementById('subject').value = '';
                document.getElementById('mainContent').value = '';
                document.getElementById('targetPlan').value = 'all';
                document.getElementById('templateType').value = 'prediction';
                document.getElementById('scheduledAt').value = '';
                // プレビューもクリア
                clearPreview();
                
                // テンプレートタイプをリセット後、テンプレートセクションを更新
                setTimeout(() => {
                    updateTemplateSection();
                }, 100);
                
                // 履歴を更新
                loadHistory();
            } else {
                console.error('配信エラー詳細:', result);
                alert(`❌ 配信失敗: ${result.error || result.details || 'エラーが発生しました'}\n詳細はコンソールを確認してください`);
            }
        } catch (error) {
            console.error('配信エラー:', error);
            alert(`配信中にエラーが発生しました: ${error.message}`);
        }
    });

    // 新しい統合テンプレート生成関数
    function generateAdvancedNewsletterHTML(templateData) {
        const { 
            title, 
            mainContent, 
            templateType,
            predictions = [],
            results = [],
            monthlyHitRate = '',
            monthlyProfit = '',
            campaignTitle = '',
            campaignDetails = '',
            originalPrice = '',
            campaignPrice = '',
            campaignDeadline = '',
            ctaText = '今すぐ申し込む',
            ctaUrl = 'https://nankan-analytics.keiba.link/pricing/',
            customTheme = 'default',
            customHeadline = '',
            customAccent = '',
            customCtaText = '',
            customCtaUrl = ''
        } = templateData;

        // テーマ別のスタイル
        let themeStyles = '';
        let headerClass = 'header';
        
        if (customTheme === 'gold') {
            themeStyles = `
                .header { background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); }
                .prediction-card, .result-card, .campaign-card { border-left-color: #f59e0b; background: #fefbf3; }
                .cta-button { background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); }
            `;
        } else if (customTheme === 'red') {
            themeStyles = `
                .header { background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); }
                .prediction-card, .result-card, .campaign-card { border-left-color: #ef4444; background: #fef2f2; }
                .cta-button { background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); }
            `;
        } else if (customTheme === 'blue') {
            themeStyles = `
                .header { background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); }
                .prediction-card, .result-card, .campaign-card { border-left-color: #3b82f6; background: #eff6ff; }
                .cta-button { background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); }
            `;
        }

        // カスタムヘッドライン
        const customHeadlineHTML = customHeadline ? `
            <div style="background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%); padding: 20px; margin: 20px 0; border-radius: 12px; border-left: 4px solid #ef4444; text-align: center;">
                <h2 style="color: #dc2626; font-size: 24px; font-weight: bold; margin: 0;">${customHeadline}</h2>
            </div>
        ` : '';

        // カスタムアクセント
        const customAccentHTML = customAccent ? `
            <div style="background: #f0f9ff; border-radius: 12px; padding: 20px; margin: 20px 0; border-left: 4px solid #0ea5e9;">
                <div style="color: #0c4a6e; font-size: 18px; font-weight: 600; line-height: 1.6; white-space: pre-wrap;">${customAccent}</div>
            </div>
        ` : '';

        return `
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body { margin: 0; padding: 0; font-family: 'Helvetica Neue', Arial, sans-serif; background-color: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; }
        .header { background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%); color: white; padding: 40px 30px; text-align: center; }
        .logo { font-size: 28px; font-weight: bold; margin-bottom: 10px; }
        .tagline { font-size: 14px; color: #94a3b8; }
        .content { padding: 40px 30px; }
        .prediction-card, .result-card, .campaign-card { background: #f8fafc; border-radius: 12px; padding: 20px; margin-bottom: 20px; border-left: 4px solid #3b82f6; }
        .race-title { font-size: 18px; font-weight: bold; color: #1e293b; margin-bottom: 10px; }
        .horses, .result-details { margin: 10px 0; }
        .horse-item, .result-item { padding: 5px 0; color: #475569; }
        .hit-status { font-weight: bold; }
        .hit-status.hit { color: #059669; }
        .hit-status.miss { color: #dc2626; }
        .hit-status.near { color: #d97706; }
        .campaign-highlight { background: #fef3c7; border-radius: 8px; padding: 15px; margin: 15px 0; border-left: 4px solid #f59e0b; }
        .price-comparison { display: flex; align-items: center; gap: 15px; margin: 15px 0; }
        .original-price { text-decoration: line-through; color: #6b7280; font-size: 18px; }
        .campaign-price { color: #dc2626; font-size: 24px; font-weight: bold; }
        .deadline { background: #fee2e2; color: #dc2626; padding: 8px 12px; border-radius: 6px; font-weight: bold; }
        .cta-button { display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); color: white; padding: 15px 40px; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 30px 0; }
        .stats-section { background: #f0f9ff; border-radius: 12px; padding: 20px; margin: 20px 0; border-left: 4px solid #0ea5e9; }
        .stats-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px; }
        .stat-item { text-align: center; background: white; padding: 15px; border-radius: 8px; }
        .stat-number { font-size: 24px; font-weight: bold; color: #0c4a6e; }
        .stat-label { font-size: 14px; color: #64748b; }
        .footer { background: #f1f5f9; padding: 30px; text-align: center; color: #64748b; font-size: 12px; }
        ${themeStyles}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">🏇 NANKANアナリティクス</div>
            <div class="tagline">AI・機械学習で勝つ南関競馬</div>
        </div>
        
        <div class="content">
            ${customHeadlineHTML}
            
            <div style="color: #475569; line-height: 1.8; white-space: pre-wrap;">
${mainContent}
            </div>
            
            ${customAccentHTML}
            
            ${templateType === 'prediction' && predictions.length > 0 ? `
            <h3 style="color: #1e293b; margin-top: 40px; margin-bottom: 20px;">🎯 本日の注目予想</h3>
            ${predictions.map(p => `
            <div class="prediction-card">
                <div class="race-title">🏁 ${p.raceName}</div>
                <div class="horses">
                    ${p.horses.map(h => `<div class="horse-item">◎ ${h}</div>`).join('')}
                </div>
            </div>
            `).join('')}
            ` : ''}
            
            ${templateType === 'result' && results.length > 0 ? `
            <h3 style="color: #1e293b; margin-top: 40px; margin-bottom: 20px;">📊 昨日の結果</h3>
            ${results.map(r => `
            <div class="result-card">
                <div class="race-title">🏁 ${r.raceName}</div>
                <div class="result-details">
                    <div class="result-item">1着: <strong>${r.winner}</strong></div>
                    <div class="result-item">配当: <strong>${r.payout}</strong></div>
                    <div class="result-item hit-status ${r.status}">${r.status === 'hit' ? '🎯 的中！' : r.status === 'near' ? '📈 惜しい！' : '❌ 不的中'}</div>
                </div>
            </div>
            `).join('')}
            ${(monthlyHitRate || monthlyProfit) ? `
            <div class="stats-section">
                <h4 style="color: #0c4a6e; margin-top: 0;">📈 今月の実績</h4>
                <div class="stats-grid">
                    ${monthlyHitRate ? `
                    <div class="stat-item">
                        <div class="stat-number">${monthlyHitRate}</div>
                        <div class="stat-label">的中率</div>
                    </div>` : ''}
                    ${monthlyProfit ? `
                    <div class="stat-item">
                        <div class="stat-number">${monthlyProfit}</div>
                        <div class="stat-label">収支</div>
                    </div>` : ''}
                </div>
            </div>
            ` : ''}
            ` : ''}
            
            ${templateType === 'campaign' && campaignTitle ? `
            <div class="campaign-highlight">
                <h3 style="color: #92400e; margin-top: 0;">🎪 ${campaignTitle}</h3>
                <p style="color: #78350f; line-height: 1.6;">${campaignDetails}</p>
                ${originalPrice && campaignPrice ? `
                <div class="price-comparison">
                    <span class="original-price">${originalPrice}</span>
                    <span style="color: #dc2626;">→</span>
                    <span class="campaign-price">${campaignPrice}</span>
                </div>
                ` : ''}
                ${campaignDeadline ? `<div class="deadline">期限: ${campaignDeadline}</div>` : ''}
            </div>
            ` : ''}
            
            <div style="text-align: center;">
                <a href="${ctaUrl}" class="cta-button">${ctaText}</a>
                ${customCtaText && customCtaUrl ? `
                <br><a href="${customCtaUrl}" class="cta-button" style="margin-top: 10px;">${customCtaText}</a>
                ` : ''}
            </div>
        </div>
        
        <div class="footer">
            <p>© 2025 NANKANアナリティクス</p>
        </div>
    </div>
</body>
</html>
        `;
    }
</script>
