---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="管理者パネル | レース結果入力">
    <style>
        .admin-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            min-height: 100vh;
        }
        .admin-header {
            text-align: center;
            margin-bottom: 40px;
        }
        .admin-title {
            font-size: 2.5rem;
            font-weight: 800;
            background: linear-gradient(135deg, #10b981 0%, #3b82f6 50%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }
        .form-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 30px;
            border: 1px solid rgba(148, 163, 184, 0.1);
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-label {
            display: block;
            color: var(--body-text-color);
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 0.95rem;
        }
        .form-input {
            width: 100%;
            padding: 12px 16px;
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(148, 163, 184, 0.2);
            border-radius: 8px;
            color: var(--body-text-color);
            font-size: 0.95rem;
            transition: border-color 0.3s;
        }
        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
        }
        .form-select {
            width: 100%;
            padding: 12px 16px;
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(148, 163, 184, 0.2);
            border-radius: 8px;
            color: var(--body-text-color);
            font-size: 0.95rem;
            cursor: pointer;
        }
        .race-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .race-card {
            background: rgba(255, 255, 255, 0.03);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid rgba(148, 163, 184, 0.1);
        }
        .race-header {
            text-align: center;
            font-weight: 700;
            font-size: 1.1rem;
            color: #3b82f6;
            margin-bottom: 15px;
        }
        .toggle-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        .toggle-btn {
            flex: 1;
            padding: 10px;
            border: 2px solid rgba(148, 163, 184, 0.2);
            border-radius: 6px;
            background: rgba(255, 255, 255, 0.05);
            color: var(--body-text-color);
            cursor: pointer;
            transition: all 0.3s;
            text-align: center;
            font-weight: 600;
        }
        .toggle-btn.active.hit {
            border-color: #10b981;
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }
        .toggle-btn.active.miss {
            border-color: #ef4444;
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }
        .payout-group {
            display: none;
        }
        .payout-group.show {
            display: block;
        }
        .submit-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #10b981 0%, #3b82f6 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 700;
            cursor: pointer;
            transition: transform 0.3s;
        }
        .submit-btn:hover {
            transform: translateY(-2px);
        }
        .output-section {
            background: rgba(255, 255, 255, 0.03);
            border-radius: 16px;
            padding: 30px;
            border: 1px solid rgba(148, 163, 184, 0.1);
            margin-top: 30px;
        }
        .json-output {
            background: #1e293b;
            border-radius: 8px;
            padding: 20px;
            color: #10b981;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }
    </style>

    <div class="admin-container">
        <div class="admin-header">
            <h1 class="admin-title">🛠️ 管理者パネル</h1>
            <p style="color: var(--accent-text-color); font-size: 1.1rem;">
                レース結果を簡単入力 → 自動でサイト更新
            </p>
        </div>

        <!-- 外部予想変換セクション -->
        <div class="form-section">
            <h2 style="color: #f59e0b; font-size: 1.5rem; margin-bottom: 20px;">📋 外部予想→AI予想変換</h2>
            <p style="color: var(--accent-text-color); margin-bottom: 20px;">
                既存の予想テキストをペーストするだけで、AI予想の詳細分析に自動変換します
            </p>
            
            <div class="form-group">
                <label class="form-label">外部予想テキストをペースト</label>
                <textarea 
                    id="externalPrediction" 
                    class="form-input" 
                    placeholder="例:
8/20浦和競馬
１１Ｒ　ルーキーズサマーカップ（ＳIII）

本命予想
◎８アンジュルナ
○１アムールピスケス
▲５ロードレイジング
△９ネイビーシンデレラ
△２キンチャン

AI分析理由
８アンジュルナ
８００メートルの新馬戦は出遅れも響いて③着に終わったが..."
                    style="height: 300px; resize: vertical; font-family: monospace;"
                ></textarea>
            </div>
            
            <div style="display: flex; gap: 15px; margin-top: 15px;">
                <button type="button" id="convertPredictionBtn" style="padding: 12px 24px; background: #f59e0b; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">
                    🔄 AI予想に変換
                </button>
                <button type="button" id="clearPredictionBtn" style="padding: 12px 24px; background: #6b7280; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">
                    🗑️ クリア
                </button>
            </div>
        </div>

        <!-- AI予想編集セクション -->
        <div class="form-section">
            <h2 style="color: #8b5cf6; font-size: 1.5rem; margin-bottom: 20px;">🤖 AI予想編集（変換後の微調整用）</h2>
            <p style="color: var(--accent-text-color); margin-bottom: 20px;">
                上記の変換結果を微調整して、free-prediction/ページとトップページのプレビューを一括更新
            </p>
            
            <!-- レース基本情報 -->
            <div style="background: rgba(139, 92, 246, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(139, 92, 246, 0.2);">
                <h3 style="color: #8b5cf6; margin-bottom: 15px;">📅 レース基本情報</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px;">
                    <div class="form-group">
                        <label class="form-label">レース名</label>
                        <input type="text" class="form-input" id="aiRaceTitle" placeholder="例: 船橋2R C3選抜 1200m" value="船橋2R C3選抜 1200m">
                    </div>
                    <div class="form-group">
                        <label class="form-label">予測信頼度（%）</label>
                        <input type="number" class="form-input" id="aiConfidence" placeholder="94.2" value="94.2" step="0.1" min="0" max="100">
                    </div>
                    <div class="form-group">
                        <label class="form-label">能力指数</label>
                        <input type="number" class="form-input" id="aiAbilityIndex" placeholder="87.5" value="87.5" step="0.1">
                    </div>
                    <div class="form-group">
                        <label class="form-label">推奨度</label>
                        <select class="form-select" id="aiRecommendation">
                            <option value="S">S</option>
                            <option value="A+" selected>A+</option>
                            <option value="A">A</option>
                            <option value="B">B</option>
                            <option value="C">C</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">期待回収率（%）</label>
                        <input type="number" class="form-input" id="aiExpectedReturn" placeholder="156" value="156" min="0">
                    </div>
                </div>
            </div>

            <!-- 本命馬情報 -->
            <div style="background: rgba(16, 185, 129, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(16, 185, 129, 0.2);">
                <h3 style="color: #10b981; margin-bottom: 15px;">🏆 本命馬情報</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                    <div class="form-group">
                        <label class="form-label">馬番</label>
                        <input type="number" class="form-input" id="mainHorseNumber" value="11" min="1" max="16">
                    </div>
                    <div class="form-group">
                        <label class="form-label">馬名</label>
                        <input type="text" class="form-input" id="mainHorseName" value="ラママーレエール">
                    </div>
                    <div class="form-group">
                        <label class="form-label">信頼度（%）</label>
                        <input type="number" class="form-input" id="mainHorseConfidence" value="92.8" step="0.1">
                    </div>
                </div>
            </div>

            <!-- プレビュー情報 -->
            <div style="background: rgba(59, 130, 246, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(59, 130, 246, 0.2);">
                <h3 style="color: #3b82f6; margin-bottom: 15px;">👁️ トップページプレビュー</h3>
                <div class="form-group">
                    <label class="form-label">投資戦略サマリー</label>
                    <textarea class="form-input" id="previewSummary" style="height: 80px; resize: vertical;" placeholder="推奨投資戦略: 馬単中心、期待値+15.7%">推奨投資戦略: 馬単中心、期待値+15.7%</textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">特徴量重要度</label>
                    <textarea class="form-input" id="previewFeatures" style="height: 80px; resize: vertical;" placeholder="特徴量重要度: 安定性(0.95)、能力上位性(0.88)、展開利(0.82)">特徴量重要度: 安定性(0.95)、能力上位性(0.88)、展開利(0.82)</textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">リスク分析</label>
                    <select class="form-select" id="previewRisk">
                        <option value="低リスク、安定収益型" selected>低リスク、安定収益型</option>
                        <option value="中リスク、バランス型">中リスク、バランス型</option>
                        <option value="高リスク、爆発力型">高リスク、爆発力型</option>
                    </select>
                </div>
            </div>

            <!-- 特徴量重要度バー編集セクション -->
            <div style="background: rgba(245, 158, 11, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(245, 158, 11, 0.2);">
                <h3 style="color: #f59e0b; margin-bottom: 15px;">📊 特徴量重要度バー編集</h3>
                <p style="color: var(--accent-text-color); margin-bottom: 20px; font-size: 0.9rem;">
                    ◎印と○印の特徴量重要度を個別設定。リアルタイムプレビューで確認しながら調整可能。
                </p>
                
                <!-- ◎印（本命）の特徴量重要度 -->
                <div style="background: rgba(16, 185, 129, 0.1); padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <h4 style="color: #10b981; margin-bottom: 15px;">◎ 本命馬の特徴量重要度</h4>
                    <div style="display: grid; gap: 15px;">
                        <div>
                            <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                                <label class="form-label" style="margin-bottom: 0; min-width: 100px;">特徴量1:</label>
                                <input type="text" id="mainFeature1Label" value="安定性" placeholder="例: 安定性, 血統評価" style="padding: 5px 10px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white; flex: 1;">
                            </div>
                            <div style="display: flex; align-items: center; gap: 15px;">
                                <input type="range" id="mainFeature1" min="0" max="100" value="95" style="flex: 1;">
                                <input type="number" id="mainFeature1Val" min="0" max="1" step="0.01" value="0.95" style="width: 80px; padding: 5px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                            </div>
                            <div class="preview-bar" style="margin-top: 8px;">
                                <div class="preview-bar-fill" style="width: 95%; height: 16px; background: linear-gradient(90deg, #3b82f6, #8b5cf6); border-radius: 8px; display: flex; align-items: center; justify-content: flex-end; padding-right: 8px; color: white; font-size: 0.75rem; font-weight: 600;">0.95</div>
                            </div>
                        </div>
                        <div>
                            <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                                <label class="form-label" style="margin-bottom: 0; min-width: 100px;">特徴量2:</label>
                                <input type="text" id="mainFeature2Label" value="能力上位性" placeholder="例: 能力上位性, 調教内容" style="padding: 5px 10px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white; flex: 1;">
                            </div>
                            <div style="display: flex; align-items: center; gap: 15px;">
                                <input type="range" id="mainFeature2" min="0" max="100" value="88" style="flex: 1;">
                                <input type="number" id="mainFeature2Val" min="0" max="1" step="0.01" value="0.88" style="width: 80px; padding: 5px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                            </div>
                            <div class="preview-bar" style="margin-top: 8px;">
                                <div class="preview-bar-fill" style="width: 88%; height: 16px; background: linear-gradient(90deg, #3b82f6, #8b5cf6); border-radius: 8px; display: flex; align-items: center; justify-content: flex-end; padding-right: 8px; color: white; font-size: 0.75rem; font-weight: 600;">0.88</div>
                            </div>
                        </div>
                        <div>
                            <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                                <label class="form-label" style="margin-bottom: 0; min-width: 100px;">特徴量3:</label>
                                <input type="text" id="mainFeature3Label" value="展開利" placeholder="例: 展開利, 馬体評価" style="padding: 5px 10px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white; flex: 1;">
                            </div>
                            <div style="display: flex; align-items: center; gap: 15px;">
                                <input type="range" id="mainFeature3" min="0" max="100" value="82" style="flex: 1;">
                                <input type="number" id="mainFeature3Val" min="0" max="1" step="0.01" value="0.82" style="width: 80px; padding: 5px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                            </div>
                            <div class="preview-bar" style="margin-top: 8px;">
                                <div class="preview-bar-fill" style="width: 82%; height: 16px; background: linear-gradient(90deg, #3b82f6, #8b5cf6); border-radius: 8px; display: flex; align-items: center; justify-content: flex-end; padding-right: 8px; color: white; font-size: 0.75rem; font-weight: 600;">0.82</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- ○印（対抗）の特徴量重要度 -->
                <div style="background: rgba(59, 130, 246, 0.1); padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <h4 style="color: #3b82f6; margin-bottom: 15px;">○ 対抗馬の特徴量重要度</h4>
                    <div style="display: grid; gap: 15px;">
                        <div>
                            <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                                <label class="form-label" style="margin-bottom: 0; min-width: 100px;">特徴量1:</label>
                                <input type="text" id="subFeature1Label" value="先行力" placeholder="例: 先行力, スピード指数" style="padding: 5px 10px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white; flex: 1;">
                            </div>
                            <div style="display: flex; align-items: center; gap: 15px;">
                                <input type="range" id="subFeature1" min="0" max="100" value="96" style="flex: 1;">
                                <input type="number" id="subFeature1Val" min="0" max="1" step="0.01" value="0.96" style="width: 80px; padding: 5px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                            </div>
                            <div class="preview-bar" style="margin-top: 8px;">
                                <div class="preview-bar-fill" style="width: 96%; height: 16px; background: linear-gradient(90deg, #3b82f6, #8b5cf6); border-radius: 8px; display: flex; align-items: center; justify-content: flex-end; padding-right: 8px; color: white; font-size: 0.75rem; font-weight: 600;">0.96</div>
                            </div>
                        </div>
                        <div>
                            <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                                <label class="form-label" style="margin-bottom: 0; min-width: 100px;">特徴量2:</label>
                                <input type="text" id="subFeature2Label" value="スピード指数" placeholder="例: スピード指数, 調教内容" style="padding: 5px 10px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white; flex: 1;">
                            </div>
                            <div style="display: flex; align-items: center; gap: 15px;">
                                <input type="range" id="subFeature2" min="0" max="100" value="85" style="flex: 1;">
                                <input type="number" id="subFeature2Val" min="0" max="1" step="0.01" value="0.85" style="width: 80px; padding: 5px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                            </div>
                            <div class="preview-bar" style="margin-top: 8px;">
                                <div class="preview-bar-fill" style="width: 85%; height: 16px; background: linear-gradient(90deg, #3b82f6, #8b5cf6); border-radius: 8px; display: flex; align-items: center; justify-content: flex-end; padding-right: 8px; color: white; font-size: 0.75rem; font-weight: 600;">0.85</div>
                            </div>
                        </div>
                        <div>
                            <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                                <label class="form-label" style="margin-bottom: 0; min-width: 100px;">特徴量3:</label>
                                <input type="text" id="subFeature3Label" value="枠順優位" placeholder="例: 枠順優位, 馬体評価" style="padding: 5px 10px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white; flex: 1;">
                            </div>
                            <div style="display: flex; align-items: center; gap: 15px;">
                                <input type="range" id="subFeature3" min="0" max="100" value="79" style="flex: 1;">
                                <input type="number" id="subFeature3Val" min="0" max="1" step="0.01" value="0.79" style="width: 80px; padding: 5px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                            </div>
                            <div class="preview-bar" style="margin-top: 8px;">
                                <div class="preview-bar-fill" style="width: 79%; height: 16px; background: linear-gradient(90deg, #3b82f6, #8b5cf6); border-radius: 8px; display: flex; align-items: center; justify-content: flex-end; padding-right: 8px; color: white; font-size: 0.75rem; font-weight: 600;">0.79</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div style="display: flex; gap: 15px;">
                <button type="button" id="testBtn" style="padding: 12px 24px; background: #f59e0b; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">
                    🧪 テスト
                </button>
                <button type="button" id="generateAIPredictionBtn" class="submit-btn" style="background: linear-gradient(135deg, #8b5cf6 0%, #3b82f6 100%); flex: 1;">
                    🚀 AI予想JSONデータ生成
                </button>
            </div>
        </div>

        <form id="raceForm">
            <!-- 基本情報入力 -->
            <div class="form-section">
                <h2 style="color: #3b82f6; font-size: 1.5rem; margin-bottom: 20px;">📅 基本情報</h2>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
                    <div class="form-group">
                        <label class="form-label">日付</label>
                        <input type="text" class="form-input" id="raceDate" placeholder="8/22" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">競馬場</label>
                        <select class="form-select" id="track" required>
                            <option value="">選択してください</option>
                            <option value="大井競馬">大井競馬</option>
                            <option value="川崎競馬">川崎競馬</option>
                            <option value="浦和競馬">浦和競馬</option>
                            <option value="船橋競馬">船橋競馬</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">総レース数</label>
                        <select class="form-select" id="totalRaces" required>
                            <option value="">選択してください</option>
                            <option value="8">8レース</option>
                            <option value="10">10レース</option>
                            <option value="12">12レース</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- 一括ペースト機能 -->
            <div class="form-section">
                <h2 style="color: #10b981; font-size: 1.5rem; margin-bottom: 20px;">📋 一括ペースト（推奨）</h2>
                <p style="color: var(--accent-text-color); margin-bottom: 15px;">
                    既存の結果データをそのまま貼り付けてください。自動で解析して各レースに振り分けます。
                </p>
                
                <div class="form-group">
                    <label class="form-label">レース結果データを貼り付け</label>
                    <textarea 
                        id="bulkPaste" 
                        class="form-input" 
                        placeholder="例:
8/22川崎競馬予想 結果
１Ｒ 11-８馬単　　920円 的中！
２Ｒ ２-１
３Ｒ ７-１馬単　1,330円 的中！
..."
                        style="height: 200px; resize: vertical;"
                    ></textarea>
                </div>
                
                <div style="display: flex; gap: 15px; margin-top: 15px;">
                    <button type="button" id="parseBtn" style="padding: 12px 24px; background: #10b981; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">
                        🔍 データ解析
                    </button>
                    <button type="button" id="clearBtn" style="padding: 12px 24px; background: #6b7280; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">
                        🗑️ クリア
                    </button>
                </div>
            </div>

            <!-- レース結果入力 -->
            <div class="form-section">
                <h2 style="color: #3b82f6; font-size: 1.5rem; margin-bottom: 20px;">🏇 レース結果（手動入力）</h2>
                <p style="color: var(--accent-text-color); margin-bottom: 15px;">
                    一括ペーストが使えない場合は、こちらで手動入力してください。
                </p>
                
                <div id="raceGrid" class="race-grid">
                    <!-- レースカードは動的に生成されます -->
                </div>
            </div>

            <button type="submit" class="submit-btn">
                🚀 JSONデータ生成
            </button>
        </form>

        <!-- 生成されたJSONの表示 -->
        <div class="output-section">
            <h2 style="color: #10b981; font-size: 1.5rem; margin-bottom: 20px;">📋 テンプレート選択</h2>
        <div style="background: rgba(139, 92, 246, 0.1); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid rgba(139, 92, 246, 0.2);">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;">
                <button onclick="loadTemplate('16horses')" class="template-btn" style="padding: 15px; background: rgba(16, 185, 129, 0.1); border: 2px solid #10b981; border-radius: 8px; color: #10b981; cursor: pointer; font-weight: 600;">
                    🏇 16頭フル出走
                    <div style="font-size: 0.8rem; font-weight: 400; color: #94a3b8; margin-top: 5px;">抑え馬まで幅広くカバー</div>
                </button>
                <button onclick="loadTemplate('12horses')" class="template-btn" style="padding: 15px; background: rgba(245, 158, 11, 0.1); border: 2px solid #f59e0b; border-radius: 8px; color: #f59e0b; cursor: pointer; font-weight: 600;">
                    🎯 12頭標準
                    <div style="font-size: 0.8rem; font-weight: 400; color: #94a3b8; margin-top: 5px;">バランス重視</div>
                </button>
                <button onclick="loadTemplate('8horses')" class="template-btn" style="padding: 15px; background: rgba(239, 68, 68, 0.1); border: 2px solid #ef4444; border-radius: 8px; color: #ef4444; cursor: pointer; font-weight: 600;">
                    ⚡ 少頭数(8頭以下)
                    <div style="font-size: 0.8rem; font-weight: 400; color: #94a3b8; margin-top: 5px;">的中率重視</div>
                </button>
                <button onclick="createCustomTemplate()" class="template-btn" style="padding: 15px; background: rgba(59, 130, 246, 0.1); border: 2px solid #3b82f6; border-radius: 8px; color: #3b82f6; cursor: pointer; font-weight: 600;">
                    ⚙️ カスタム作成
                    <div style="font-size: 0.8rem; font-weight: 400; color: #94a3b8; margin-top: 5px;">独自設定を保存</div>
                </button>
            </div>
            <div id="selectedTemplate" style="color: #94a3b8; text-align: center; font-size: 0.9rem;">📝 テンプレートを選択すると、最適な買い目設定が自動適用されます</div>
        </div>

        <h2 style="color: #10b981; font-size: 1.5rem; margin-bottom: 20px;">👁️ リアルタイムプレビュー</h2>
        <div id="previewSection" style="background: rgba(59, 130, 246, 0.1); padding: 25px; border-radius: 12px; margin-bottom: 30px; border: 1px solid rgba(59, 130, 246, 0.2);">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
                <!-- 戦略A プレビュー -->
                <div class="strategy-preview" style="background: rgba(16, 185, 129, 0.1); padding: 20px; border-radius: 8px; border-left: 4px solid #10b981;">
                    <h3 style="color: #10b981; margin-bottom: 15px;">🎯 戦略A: 高的中率型</h3>
                    <div id="previewStrategyA" style="color: #e2e8f0; line-height: 1.6;">
                        <div>推奨度: <span id="previewRatingA">★★★★☆</span></div>
                        <div>リスク: <span id="previewRiskA" style="display: inline-block; width: 60px; height: 8px; background: #10b981; border-radius: 4px;"></span></div>
                        <div style="margin-top: 10px;">
                            <div id="previewBetsA"></div>
                        </div>
                    </div>
                </div>
                
                <!-- 戦略B プレビュー -->
                <div class="strategy-preview" style="background: rgba(245, 158, 11, 0.1); padding: 20px; border-radius: 8px; border-left: 4px solid #f59e0b;">
                    <h3 style="color: #f59e0b; margin-bottom: 15px;">⚖️ 戦略B: バランス型</h3>
                    <div id="previewStrategyB" style="color: #e2e8f0; line-height: 1.6;">
                        <div>推奨度: <span id="previewRatingB">★★★☆☆</span></div>
                        <div>リスク: <span id="previewRiskB" style="display: inline-block; width: 100px; height: 8px; background: #f59e0b; border-radius: 4px;"></span></div>
                        <div style="margin-top: 10px;">
                            <div id="previewBetsB"></div>
                        </div>
                    </div>
                </div>
                
                <!-- 戦略C プレビュー -->
                <div class="strategy-preview" style="background: rgba(239, 68, 68, 0.1); padding: 20px; border-radius: 8px; border-left: 4px solid #ef4444;">
                    <h3 style="color: #ef4444; margin-bottom: 15px;">🚀 戦略C: 高配当追求型</h3>
                    <div id="previewStrategyC" style="color: #e2e8f0; line-height: 1.6;">
                        <div>推奨度: <span id="previewRatingC">★★☆☆☆</span></div>
                        <div>リスク: <span id="previewRiskC" style="display: inline-block; width: 120px; height: 8px; background: #ef4444; border-radius: 4px;"></span></div>
                        <div style="margin-top: 10px;">
                            <div id="previewBetsC"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 20px;">
                <button id="applyPreviewBtn" onclick="applyPreviewData()" style="padding: 12px 24px; background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; font-size: 1.1rem;">
                    ✅ この内容で確定・適用
                </button>
                <button id="backupBtn" onclick="createBackup()" style="padding: 12px 24px; background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; margin-left: 15px;">
                    💾 現在のデータをバックアップ
                </button>
                <button id="restoreBtn" onclick="showRestoreOptions()" style="padding: 12px 24px; background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; margin-left: 15px;">
                    🔄 バックアップから復元
                </button>
            </div>
            
            <!-- バックアップ状態表示 -->
            <div id="backupStatus" style="text-align: center; margin-top: 15px; color: #94a3b8; font-size: 0.9rem;"></div>
        </div>

        <h2 style="color: #10b981; font-size: 1.5rem; margin-bottom: 20px;">📋 生成されたJSON</h2>
            <p id="outputDescription" style="color: var(--accent-text-color); margin-bottom: 15px;">
                下記のJSONをコピーして <code>src/data/raceResults.json</code> の <code>currentResults</code> セクションに貼り付けてください
            </p>
            <pre id="jsonOutput" class="json-output">ここにJSONが生成されます...</pre>
            <div style="display: flex; gap: 15px; margin-top: 15px;">
                <button type="button" id="copyBtn" style="padding: 10px 20px; background: #8b5cf6; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">
                    📋 JSONをコピー
                </button>
                <button type="button" id="aiCopyBtn" style="padding: 10px 20px; background: #10b981; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">
                    🤖 AI予想JSONコピー
                </button>
            </div>
        </div>
    </div>

    <script is:inline>
    // DOM読み込み完了を待つ
    document.addEventListener('DOMContentLoaded', function() {
        console.log('管理者パネル: DOM読み込み完了');
        
        // 初期化処理
        initializeAdminPanel();
    });

    function initializeAdminPanel() {
        // ボタンの存在確認
        const generateBtn = document.getElementById('generateAIPredictionBtn');
        const testBtn = document.getElementById('testBtn');
        
        if (generateBtn) {
            console.log('AI予想JSONデータ生成ボタンが見つかりました');
        } else {
            console.error('AI予想JSONデータ生成ボタンが見つかりません');
        }
        
        if (testBtn) {
            console.log('テストボタンが見つかりました');
            
            // テストボタンのイベントリスナー
            testBtn.addEventListener('click', function() {
                alert('✅ JavaScript動作確認OK!\n\nブラウザのコンソールログも確認してください。');
                console.log('テストボタンがクリックされました - JavaScript正常動作');
            });
        } else {
            console.error('テストボタンが見つかりません');
        }
    }

    // レース数に応じてレースカードを動的生成
    document.getElementById('totalRaces').addEventListener('change', function() {
        const totalRaces = parseInt(this.value);
        const raceGrid = document.getElementById('raceGrid');
        raceGrid.innerHTML = '';

        for (let i = 1; i <= totalRaces; i++) {
            const raceCard = createRaceCard(i);
            raceGrid.appendChild(raceCard);
        }
    });

    function createRaceCard(raceNum) {
        const card = document.createElement('div');
        card.className = 'race-card';
        card.innerHTML = `
            <div class="race-header">${raceNum}R</div>
            
            <div class="toggle-group">
                <button type="button" class="toggle-btn hit-btn" onclick="toggleResult(${raceNum}, 'hit')">
                    ⭕ 的中
                </button>
                <button type="button" class="toggle-btn miss-btn" onclick="toggleResult(${raceNum}, 'miss')">
                    ❌ 不的中
                </button>
            </div>
            
            <div class="payout-group" id="payout-${raceNum}">
                <label class="form-label">配当金額</label>
                <input type="number" class="form-input" id="amount-${raceNum}" placeholder="例: 1500" min="0">
            </div>
            
            <input type="hidden" id="status-${raceNum}" value="">
        `;
        return card;
    }

    function toggleResult(raceNum, status) {
        // ボタンの状態更新
        const card = document.querySelector(`.race-card:nth-child(${raceNum})`);
        const hitBtn = card.querySelector('.hit-btn');
        const missBtn = card.querySelector('.miss-btn');
        const payoutGroup = document.getElementById(`payout-${raceNum}`);
        const statusInput = document.getElementById(`status-${raceNum}`);

        // リセット
        hitBtn.classList.remove('active', 'hit');
        missBtn.classList.remove('active', 'miss');
        
        // 選択された状態に更新
        if (status === 'hit') {
            hitBtn.classList.add('active', 'hit');
            payoutGroup.classList.add('show');
            statusInput.value = 'hit';
        } else {
            missBtn.classList.add('active', 'miss');
            payoutGroup.classList.remove('show');
            statusInput.value = 'miss';
        }
    }

    // フォーム送信処理
    document.getElementById('raceForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const raceDate = document.getElementById('raceDate').value;
        const track = document.getElementById('track').value;
        const totalRaces = parseInt(document.getElementById('totalRaces').value);
        
        // レース結果を収集
        const races = [];
        let hits = 0;
        let totalPayout = 0;

        for (let i = 1; i <= totalRaces; i++) {
            const status = document.getElementById(`status-${i}`).value;
            const amountInput = document.getElementById(`amount-${i}`);
            const payout = status === 'hit' ? (parseInt(amountInput.value) || 0) : 0;
            
            if (status === 'hit') {
                hits++;
                totalPayout += payout;
            }
            
            races.push({
                race: `${i}R`,
                status: status,
                betType: "馬単",
                payout: payout
            });
        }

        const hitRate = ((hits / totalRaces) * 100).toFixed(1) + '%';
        const returnRate = totalPayout > 0 ? ((totalPayout / (totalRaces * 1000)) * 100).toFixed(1) + '%' : '0%';
        
        // 高額配当の検証アラート
        const highPayouts = races.filter(r => r.payout > 10000);
        if (highPayouts.length > 0) {
            const highPayoutList = highPayouts.map(r => `${r.race}: ${r.payout.toLocaleString()}円`).join('\n');
            const confirmHighPayout = confirm(`⚠️ 高額配当を検出しました:\n${highPayoutList}\n\n配当金額は正しいですか？\n\n「OK」= 正しい配当\n「キャンセル」= 修正が必要`);
            
            if (!confirmHighPayout) {
                alert('❌ データ生成をキャンセルしました。配当金額を確認して再入力してください。');
                return;
            }
        }

        // JSONオブジェクト生成
        const jsonData = {
            date: raceDate,
            track: track,
            totalRaces: totalRaces,
            hits: hits,
            hitRate: hitRate,
            payout: totalPayout,
            returnRate: returnRate,
            races: races
        };

        // JSON表示
        const jsonOutput = document.getElementById('jsonOutput');
        jsonOutput.textContent = JSON.stringify(jsonData, null, 2);
    });

    // 一括ペースト解析機能
    document.getElementById('parseBtn').addEventListener('click', function() {
        const bulkText = document.getElementById('bulkPaste').value;
        if (!bulkText.trim()) {
            alert('解析するデータを入力してください。');
            return;
        }

        try {
            // 基本情報を抽出
            const lines = bulkText.split('\n').filter(line => line.trim());
            
            // 日付と競馬場を抽出
            const headerMatch = bulkText.match(/(\d+\/\d+)([^\d]*?)競馬/);
            if (headerMatch) {
                document.getElementById('raceDate').value = headerMatch[1];
                const trackName = headerMatch[2].replace(/[^\u4e00-\u9faf]/g, '') + '競馬';
                document.getElementById('track').value = trackName;
            }

            // レース結果を解析
            const raceResults = [];
            lines.forEach(line => {
                const raceMatch = line.match(/([０-９0-9]+)[ＲRr]/);
                if (raceMatch) {
                    const raceNum = convertToHalfWidth(raceMatch[1]);
                    
                    // 的中判定（配当金額があるかどうか - ドット区切りに対応）
                    const payoutMatch = line.match(/(\d[\d,.]*)[円]/);
                    const isHit = payoutMatch || line.includes('的中');
                    
                    const payout = payoutMatch ? parseInt(payoutMatch[1].replace(/[,.]/g, '')) : 0;
                    
                    // 高額配当の事前チェック（一括ペースト時）
                    if (payout > 50000) {
                        console.warn(`⚠️ 非常に高額な配当を検出: ${raceNum}R ${payout.toLocaleString()}円`);
                    }
                    
                    raceResults.push({
                        race: parseInt(raceNum),
                        status: isHit ? 'hit' : 'miss',
                        payout: payout
                    });
                }
            });

            if (raceResults.length === 0) {
                alert('レース結果を解析できませんでした。形式を確認してください。');
                return;
            }

            // 総レース数を設定
            const maxRace = Math.max(...raceResults.map(r => r.race));
            document.getElementById('totalRaces').value = maxRace.toString();
            
            // レースカード生成
            document.getElementById('totalRaces').dispatchEvent(new Event('change'));
            
            // 解析結果を各フォームに反映
            setTimeout(() => {
                raceResults.forEach(result => {
                    const statusInput = document.getElementById(`status-${result.race}`);
                    const amountInput = document.getElementById(`amount-${result.race}`);
                    
                    if (statusInput && amountInput) {
                        toggleResult(result.race, result.status);
                        if (result.status === 'hit' && result.payout > 0) {
                            amountInput.value = result.payout;
                        }
                    }
                });

                // 解析結果の統計情報を表示
                const totalHits = raceResults.filter(r => r.status === 'hit').length;
                const totalPayout = raceResults.reduce((sum, r) => sum + r.payout, 0);
                const hitRate = ((totalHits / raceResults.length) * 100).toFixed(1);
                const returnRate = totalPayout > 0 ? ((totalPayout / (raceResults.length * 1000)) * 100).toFixed(1) : 0;
                
                alert(`✅ 解析完了！\n\n📊 統計情報:\n・読み込みレース数: ${raceResults.length}\n・的中数: ${totalHits}レース\n・的中率: ${hitRate}%\n・総配当: ${totalPayout.toLocaleString()}円\n・回収率: ${returnRate}%\n\n${returnRate > 1000 ? '⚠️ 回収率が1000%超です。配当金額を確認してください。' : '✅ 統計値は正常範囲内です。'}`);
            }, 100);

        } catch (error) {
            console.error('解析エラー:', error);
            alert('データの解析中にエラーが発生しました。形式を確認してください。');
        }
    });

    // 全角数字を半角に変換
    function convertToHalfWidth(str) {
        return str.replace(/[０-９]/g, function(match) {
            return String.fromCharCode(match.charCodeAt(0) - 0xFEE0);
        });
    }

    // クリア機能
    document.getElementById('clearBtn').addEventListener('click', function() {
        document.getElementById('bulkPaste').value = '';
        document.getElementById('raceGrid').innerHTML = '';
        document.getElementById('jsonOutput').textContent = 'ここにJSONが生成されます...';
        
        // フォームリセット
        document.getElementById('raceDate').value = '';
        document.getElementById('track').value = '';
        document.getElementById('totalRaces').value = '';
        
        alert('✅ フォームをクリアしました。');
    });

    // コピー機能（レース結果用）
    document.getElementById('copyBtn').addEventListener('click', function() {
        const jsonText = document.getElementById('jsonOutput').textContent;
        navigator.clipboard.writeText(jsonText).then(() => {
            this.textContent = '✅ コピー完了!';
            setTimeout(() => {
                this.textContent = '📋 JSONをコピー';
            }, 2000);
        });
    });

    // AI予想JSONコピー機能
    function setupAICopyButton() {
        const aiCopyBtn = document.getElementById('aiCopyBtn');
        if (aiCopyBtn) {
            aiCopyBtn.addEventListener('click', function() {
                const jsonText = document.getElementById('jsonOutput').textContent;
                if (jsonText && jsonText !== 'ここにJSONが生成されます...') {
                    navigator.clipboard.writeText(jsonText).then(() => {
                        this.textContent = '✅ AI予想コピー完了!';
                        setTimeout(() => {
                            this.textContent = '🤖 AI予想JSONコピー';
                        }, 2000);
                    }).catch(err => {
                        console.error('コピー失敗:', err);
                        alert('コピーに失敗しました。手動でコピーしてください。');
                    });
                } else {
                    alert('コピーできるJSONがありません。先に「AI予想JSONデータ生成」ボタンを押してください。');
                }
            });
        }
    }

    // 初期化時にAI予想コピーボタンを設定
    setupAICopyButton();

    // 解析済み予想データを保存する変数
    let parsedPredictionData = null;

    // AI予想JSON生成機能
    document.getElementById('generateAIPredictionBtn').addEventListener('click', function() {
        try {
            // デバッグ: ボタンクリックを確認
            console.log('AI予想JSONデータ生成ボタンがクリックされました');
            
            // フォーム要素の存在確認
            const elements = {
                aiRaceTitle: document.getElementById('aiRaceTitle'),
                aiConfidence: document.getElementById('aiConfidence'),
                aiAbilityIndex: document.getElementById('aiAbilityIndex'),
                aiRecommendation: document.getElementById('aiRecommendation'),
                aiExpectedReturn: document.getElementById('aiExpectedReturn'),
                mainHorseNumber: document.getElementById('mainHorseNumber'),
                mainHorseName: document.getElementById('mainHorseName'),
                mainHorseConfidence: document.getElementById('mainHorseConfidence'),
                previewSummary: document.getElementById('previewSummary'),
                previewFeatures: document.getElementById('previewFeatures'),
                previewRisk: document.getElementById('previewRisk')
            };

            // 要素の存在確認
            for (const [key, element] of Object.entries(elements)) {
                if (!element) {
                    throw new Error(`要素が見つかりません: ${key}`);
                }
            }

            // フォームデータ取得
            const raceTitle = elements.aiRaceTitle.value;
            const confidence = parseFloat(elements.aiConfidence.value);
            const abilityIndex = parseFloat(elements.aiAbilityIndex.value);
            const recommendation = elements.aiRecommendation.value;
            const expectedReturn = parseInt(elements.aiExpectedReturn.value);
            
            const mainHorseNumber = parseInt(elements.mainHorseNumber.value);
            const mainHorseName = elements.mainHorseName.value;
            const mainHorseConfidence = parseFloat(elements.mainHorseConfidence.value);
            
            const previewSummary = elements.previewSummary.value;
            const previewFeatures = elements.previewFeatures.value;
            const previewRisk = elements.previewRisk.value;

            // バリデーション
            if (!raceTitle || isNaN(confidence) || isNaN(abilityIndex) || !mainHorseName) {
                alert('❌ 必須項目が入力されていません。\n\n確認してください:\n・レース名\n・予測信頼度\n・能力指数\n・本命馬名');
                return;
            }

        // 現在の日時を取得
        const now = new Date();
        const currentTime = now.toISOString();

        // デバッグ: 解析データの状態確認
        console.log('AI予想JSON生成時の解析データ:', parsedPredictionData);
        if (parsedPredictionData) {
            console.log('本命馬:', parsedPredictionData.mainHorse);
            console.log('対抗馬:', parsedPredictionData.subHorse);
            console.log('単穴馬:', parsedPredictionData.darkHorse);
            console.log(`全出走馬(${parsedPredictionData.totalHorses}頭):`, parsedPredictionData.allHorses.map(h => `${h.mark}${h.number}${h.name}`).join(', '));
        }

        // 日付を取得（外部予想変換からのデータがあれば使用）
        const aiRaceTitleElement = document.getElementById('aiRaceTitle');
        const storedRaceDate = aiRaceTitleElement.dataset.raceDate;
        const storedTrackName = aiRaceTitleElement.dataset.trackName || raceTitle.split(/[0-9]/)[0] || "船橋";
        const storedRaceNumber = aiRaceTitleElement.dataset.raceNumber || (raceTitle.match(/[0-9]+R/) ? raceTitle.match(/[0-9]+R/)[0] : "2R");
        const storedRaceName = aiRaceTitleElement.dataset.raceName || raceTitle.replace(/^.*?[0-9]+R\s*/, '') || "C3選抜 1200m";
        
        // 日付をYYYY-MM-DD形式に変換
        let formattedDate = now.toISOString().split('T')[0]; // デフォルトは今日
        if (storedRaceDate) {
            const dateParts = storedRaceDate.split('/');
            if (dateParts.length === 2) {
                const currentYear = now.getFullYear();
                const month = dateParts[0].padStart(2, '0');
                const day = dateParts[1].padStart(2, '0');
                formattedDate = `${currentYear}-${month}-${day}`;
            }
        }
        
        // JSONデータ構築
        const aiPredictionData = {
            raceInfo: {
                title: raceTitle,
                date: formattedDate, // 実際のレース日付を使用
                track: storedTrackName,
                raceNumber: storedRaceNumber,
                raceName: storedRaceName,
                confidence: confidence.toString(),
                abilityIndex: abilityIndex.toString(),
                recommendation: recommendation,
                expectedReturn: expectedReturn.toString()
            },
            horses: {
                main: {
                    number: mainHorseNumber,
                    name: mainHorseName,
                    type: "本命",
                    confidence: mainHorseConfidence.toString(),
                    factors: [
                        { icon: "◎", text: `能力指数: ${abilityIndex} (1位)` },
                        { icon: "◎", text: `安定性スコア: ${mainHorseConfidence}%` },
                        { icon: "◎", text: "展開適性: S評価" },
                        { icon: "◎", text: "過去5走偏差値: 62.3" }
                    ],
                    importance: [
                        { label: document.getElementById('mainFeature1Label').value || "安定性", value: parseFloat(document.getElementById('mainFeature1Val').value) || 0.95 },
                        { label: document.getElementById('mainFeature2Label').value || "能力上位性", value: parseFloat(document.getElementById('mainFeature2Val').value) || 0.88 },
                        { label: document.getElementById('mainFeature3Label').value || "展開利", value: parseFloat(document.getElementById('mainFeature3Val').value) || 0.82 }
                    ]
                },
                sub: parsedPredictionData && parsedPredictionData.subHorse ? {
                    number: parsedPredictionData.subHorse.number,
                    name: parsedPredictionData.subHorse.name,
                    type: "対抗",
                    confidence: parsedPredictionData.subHorse.confidence,
                    factors: [
                        { icon: "○", text: `スピード指数: ${(Math.random() * 10 + 75).toFixed(1)}` },
                        { icon: "○", text: `先行力: ${(Math.random() * 15 + 80).toFixed(1)}%` },
                        { icon: "○", text: "枠順優位性: B級" },
                        { icon: "○", text: "持続力評価: B" }
                    ],
                    importance: [
                        { label: document.getElementById('subFeature1Label').value || "先行力", value: parseFloat(document.getElementById('subFeature1Val').value) || 0.96 },
                        { label: document.getElementById('subFeature2Label').value || "スピード指数", value: parseFloat(document.getElementById('subFeature2Val').value) || 0.85 },
                        { label: document.getElementById('subFeature3Label').value || "枠順優位", value: parseFloat(document.getElementById('subFeature3Val').value) || 0.79 }
                    ]
                } : {
                    number: mainHorseNumber === 11 ? 6 : 11,
                    name: "ノヴェッラ",
                    type: "対抗",
                    confidence: "86.7",
                    factors: [
                        { icon: "○", text: "スピード指数: 78.4" },
                        { icon: "○", text: "先行力: 82.3%" },
                        { icon: "○", text: "枠順優位性: B級" },
                        { icon: "○", text: "持続力評価: B" }
                    ],
                    importance: [
                        { label: document.getElementById('subFeature1Label').value || "先行力", value: parseFloat(document.getElementById('subFeature1Val').value) || 0.96 },
                        { label: document.getElementById('subFeature2Label').value || "スピード指数", value: parseFloat(document.getElementById('subFeature2Val').value) || 0.85 },
                        { label: document.getElementById('subFeature3Label').value || "枠順優位", value: parseFloat(document.getElementById('subFeature3Val').value) || 0.79 }
                    ]
                },
                dark: parsedPredictionData && parsedPredictionData.darkHorse ? {
                    number: parsedPredictionData.darkHorse.number,
                    name: parsedPredictionData.darkHorse.name,
                    type: "単穴",
                    confidence: parsedPredictionData.darkHorse.confidence,
                    factors: [
                        { icon: "▲", text: `爆発力指数: ${(Math.random() * 10 + 85).toFixed(1)}` },
                        { icon: "▲", text: "ムラ係数: 高変動" },
                        { icon: "▲", text: `斤量優位: +${Math.floor(Math.random() * 3 + 1)}kg` },
                        { icon: "▲", text: "展開次第: 要注意" }
                    ]
                } : {
                    number: mainHorseNumber === 3 ? 8 : 3,
                    name: "ボンブーリープ",
                    type: "単穴",
                    confidence: "72.1",
                    factors: [
                        { icon: "▲", text: "爆発力指数: 91.2" },
                        { icon: "▲", text: "ムラ係数: 高変動" },
                        { icon: "▲", text: "斤量優位: +2kg" },
                        { icon: "▲", text: "展開次第: 要注意" }
                    ]
                }
            },
            strategies: (() => {
                // 実際の馬番を取得
                const subNum = (parsedPredictionData && parsedPredictionData.subHorse) ? parsedPredictionData.subHorse.number : (mainHorseNumber === 11 ? 6 : 11);
                const darkNum = (parsedPredictionData && parsedPredictionData.darkHorse) ? parsedPredictionData.darkHorse.number : (mainHorseNumber === 3 ? 8 : 3);
                
                // 連下馬（△印の馬）を取得
                const underHorses = parsedPredictionData && parsedPredictionData.allHorses ? 
                    parsedPredictionData.allHorses.filter(h => h.mark === '△').map(h => h.number) : [];
                const underStr = underHorses.length > 0 ? underHorses.join(',') : '2,3';
                
                return {
                    safe: {
                        title: "戦略A: 高的中率型",
                        recommendation: 4,
                        hitRate: "78.5",
                        returnRate: "132",
                        riskLevel: "low", // 低リスク = 30%
                        bets: [
                            { type: "馬単", horses: `${mainHorseNumber} → ${subNum},${darkNum},${underStr}`, points: `${2 + underHorses.length}点` },
                            { type: "馬連", horses: `${mainHorseNumber} - ${subNum},${darkNum},${underStr}`, points: `${2 + underHorses.length}点` },
                            { type: "3連複", horses: `${mainHorseNumber}-${subNum},${darkNum} - ${underStr}`, points: `${Math.max(6, 4 + underHorses.length)}点` }
                        ],
                        expectedPayout: "5-8倍",
                        payoutType: "堅実決着想定"
                    },
                    balance: {
                        title: "戦略B: バランス型",
                        recommendation: 3,
                        hitRate: "65.2",
                        returnRate: "148",
                        riskLevel: "medium", // 中リスク = 60%
                        bets: [
                            { type: "馬単", horses: `${mainHorseNumber} → ${subNum},${darkNum},${underStr},10,11,13`, points: `${5 + underHorses.length}点` },
                            { type: "馬連", horses: `${mainHorseNumber} - ${subNum},${darkNum},${underStr},10,11`, points: `${4 + underHorses.length}点` },
                            { type: "3連複", horses: `${mainHorseNumber}-${subNum},${darkNum} - ${underStr},10,11,13`, points: `${Math.max(12, 8 + underHorses.length * 2)}点` }
                        ],
                        expectedPayout: "8-15倍",
                        payoutType: "中穴配当想定"
                    },
                    aggressive: {
                        title: "戦略C: 高配当追求型",
                        recommendation: 2,
                        hitRate: "42.8",
                        returnRate: "215",
                        riskLevel: "high", // 高リスク = 100%
                        bets: [
                            { type: "馬単", horses: `${darkNum},${underStr} → ${mainHorseNumber},${subNum},10,11`, points: `${Math.max(15, 10 + underHorses.length * 2)}点` },
                            { type: "馬連", horses: `${darkNum},${underStr} - ${mainHorseNumber},${subNum},10,11,13`, points: `${Math.max(18, 12 + underHorses.length * 3)}点` },
                            { type: "3連複", horses: `${darkNum},${underStr} - ${mainHorseNumber},${subNum} - 10,11,13,4,6`, points: `${Math.max(24, 18 + underHorses.length * 3)}点` }
                        ],
                        expectedPayout: "20倍以上",
                        payoutType: "大穴視野"
                    }
                };
            })(),
            analysis: {
                raceExpected: `XGBoostモデル: ◎${mainHorseNumber}${mainHorseName}の安定性を最高評価（スコア${mainHorseConfidence}）`,
                keyIndicators: {
                    accuracy: "87.3",
                    similarRaces: "42件", 
                    confidenceInterval: "±3.2",
                    recommendedInvestment: "資金の3-5%"
                }
            },
            preview: {
                summary: previewSummary,
                features: previewFeatures,
                riskAnalysis: previewRisk
            },
            allHorses: parsedPredictionData && parsedPredictionData.allHorses ? 
                parsedPredictionData.allHorses.map(horse => ({
                    number: horse.number,
                    name: horse.name,
                    mark: horse.mark,
                    confidence: horse.confidence,
                    type: horse.mark === '◎' ? '本命' : 
                          horse.mark === '○' || horse.mark === '◯' ? '対抗' : 
                          horse.mark === '▲' ? '単穴' : 
                          horse.mark === '△' ? '連下' : '押さえ',
                    factors: [
                        { icon: horse.mark, text: `信頼度: ${horse.confidence}%` },
                        { icon: horse.mark, text: horse.mark === '◎' ? "本命適性: A級" : 
                                                 horse.mark === '○' || horse.mark === '◯' ? "対抗適性: B級" :
                                                 horse.mark === '▲' ? "穴適性: C級" : "補完適性: C級" }
                    ]
                })) : [],
            totalHorses: parsedPredictionData ? parsedPredictionData.totalHorses || 3 : 3,
            lastUpdated: currentTime
        };

        // JSON表示
        const jsonOutput = document.getElementById('jsonOutput');
        jsonOutput.textContent = JSON.stringify(aiPredictionData, null, 2);

        // 説明文更新
        const outputDescription = document.getElementById('outputDescription');
        outputDescription.innerHTML = '下記のJSONをコピーして <code>src/data/aiPrediction.json</code> に貼り付けてください。<br>これにより<strong>free-prediction/</strong>ページと<strong>トップページのプレビュー</strong>が自動更新されます。';

        // AI予想JSONコピーボタンの表示/有効化
        const aiCopyBtn = document.getElementById('aiCopyBtn');
        if (aiCopyBtn) {
            aiCopyBtn.style.display = 'block';
            console.log('AI予想JSONコピーボタンを有効化しました');
        }

        // 買い目フォーマット自動クリーニング
        const cleanBetString = (str) => {
            return str
                .replace(/\s*\+\s*連下/g, ' - ')
                .replace(/（[^）]*）/g, '')  // 括弧内の説明文を削除
                .replace(/\s*抑え\s*/g, ',')
                .replace(/\s*大穴狙い\s*/g, '')
                .replace(/\s*穴軸\s*/g, '')
                .replace(/連下/g, '')
                .replace(/\s+/g, ' ')
                .trim();
        };

        // 全戦略の買い目を自動クリーニング
        ['safe', 'balance', 'aggressive'].forEach(strategyKey => {
            if (aiPredictionData.strategies[strategyKey]?.bets) {
                aiPredictionData.strategies[strategyKey].bets.forEach(bet => {
                    bet.horses = cleanBetString(bet.horses);
                });
            }
        });

        // データ整合性チェック
        const validationErrors = [];
        
        // 戦略リスクレベルのチェック
        if (!aiPredictionData.strategies.safe.riskLevel) validationErrors.push('戦略A のリスクレベルが未設定');
        if (!aiPredictionData.strategies.balance.riskLevel) validationErrors.push('戦略B のリスクレベルが未設定');
        if (!aiPredictionData.strategies.aggressive.riskLevel) validationErrors.push('戦略C のリスクレベルが未設定');
        
        // 買い目フォーマットのチェック
        ['safe', 'balance', 'aggressive'].forEach(strategyKey => {
            const strategy = aiPredictionData.strategies[strategyKey];
            if (strategy?.bets) {
                strategy.bets.forEach((bet, index) => {
                    if (bet.horses.includes('連下') || bet.horses.includes('抑え') || bet.horses.includes('大穴') || bet.horses.includes('穴軸')) {
                        validationErrors.push(`${strategyKey}戦略の${index + 1}番目の買い目に説明文が含まれています`);
                    }
                });
            }
        });
        
        // 馬データの整合性チェック
        if (!aiPredictionData.horses.main.number) validationErrors.push('本命馬の馬番が未設定');
        if (!aiPredictionData.horses.sub.number) validationErrors.push('対抗馬の馬番が未設定');
        if (!aiPredictionData.horses.dark.number) validationErrors.push('単穴馬の馬番が未設定');
        
        if (validationErrors.length > 0) {
            alert('⚠️ データ整合性エラー:\n' + validationErrors.join('\n') + '\n\n修正してから再生成してください。');
            return;
        }

        // 成功メッセージ
        alert('✅ AI予想JSONデータを生成しました！\n\n🔧 自動処理完了:\n・リスクバー表示設定済み\n・買い目フォーマット自動クリーニング済み\n・説明文（連下、抑え、大穴狙い等）削除済み\n\n💡 古いデータの影響を防ぐため:\n・ブラウザキャッシュをクリアしてください\n・貼り付け後はページをリロードしてください\n\n📋 コピーボタンで内容をコピーして\nsrc/data/aiPrediction.json に貼り付けてください。');
        
        } catch (error) {
            console.error('AI予想JSON生成エラー:', error);
            alert('❌ JSON生成中にエラーが発生しました。\n\n詳細: ' + error.message + '\n\nブラウザのコンソールで詳細を確認してください。');
        }
    });

    // 外部予想変換機能
    document.getElementById('convertPredictionBtn').addEventListener('click', function() {
        const externalText = document.getElementById('externalPrediction').value;
        if (!externalText.trim()) {
            alert('変換するテキストを入力してください。');
            return;
        }

        try {
            console.log('=== 外部予想変換開始 ===');
            console.log('入力テキスト:', externalText);
            
            // デバッグ: 文字コードを詳細に確認
            const testLine = '○１アムールピスケス';
            console.log('テスト行の文字コード解析:');
            for (let i = 0; i < testLine.length; i++) {
                const char = testLine[i];
                const code = char.charCodeAt(0);
                console.log(`${i}: "${char}" (U+${code.toString(16).toUpperCase().padStart(4, '0')})`);
            }
            
            // 実際の入力テキストの各行を分析
            const lines = externalText.split('\n').map(line => line.trim()).filter(line => line);
            console.log('入力テキストの行分析:');
            lines.forEach((line, index) => {
                console.log(`行${index + 1}: "${line}"`);
                if (line.includes('アムール')) {
                    console.log('  → アムールを含む行を発見!');
                    for (let i = 0; i < Math.min(line.length, 10); i++) {
                        const char = line[i];
                        const code = char.charCodeAt(0);
                        console.log(`  ${i}: "${char}" (U+${code.toString(16).toUpperCase().padStart(4, '0')})`);
                    }
                }
            });
            
            // テキスト解析
            const parsedData = parseExternalPrediction(externalText);
            
            // 解析データを保存（AI予想JSON生成時に使用）
            parsedPredictionData = parsedData;
            console.log('解析データを保存:', parsedPredictionData);
            
            // AI予想編集フォームに自動入力
            document.getElementById('aiRaceTitle').value = parsedData.raceTitle;
            document.getElementById('aiConfidence').value = parsedData.confidence;
            document.getElementById('aiAbilityIndex').value = parsedData.abilityIndex;
            document.getElementById('aiRecommendation').value = parsedData.recommendation;
            document.getElementById('aiExpectedReturn').value = parsedData.expectedReturn;
            
            // レース日付を保存（JSON生成時に使用）
            if (parsedData.raceDate) {
                document.getElementById('aiRaceTitle').dataset.raceDate = parsedData.raceDate;
                document.getElementById('aiRaceTitle').dataset.trackName = parsedData.trackName;
                document.getElementById('aiRaceTitle').dataset.raceNumber = parsedData.raceNumber;
                document.getElementById('aiRaceTitle').dataset.raceName = parsedData.raceName;
            }
            
            document.getElementById('mainHorseNumber').value = parsedData.mainHorse.number;
            document.getElementById('mainHorseName').value = parsedData.mainHorse.name;
            document.getElementById('mainHorseConfidence').value = parsedData.mainHorse.confidence;
            
            document.getElementById('previewSummary').value = parsedData.previewSummary;
            document.getElementById('previewFeatures').value = parsedData.previewFeatures;
            document.getElementById('previewRisk').value = parsedData.previewRisk;

            alert(`✅ 変換完了！\n\nAI予想編集セクションに自動入力されました。\n解析した出走馬: ${parsedData.totalHorses}頭\n「AI予想JSONデータ生成」で全馬情報が正しく反映されます。\n\n検出した馬:\n${parsedData.allHorses.map(h => `${h.mark}${h.number}${h.name}`).slice(0, 8).join('\n')}${parsedData.allHorses.length > 8 ? '\n...' : ''}`);
            
        } catch (error) {
            console.error('変換エラー詳細:', error);
            console.error('エラースタック:', error.stack);
            alert('テキストの解析中にエラーが発生しました。\n\n詳細: ' + error.message + '\n\nコンソールで詳細を確認してください。');
        }
    });

    // 外部予想テキスト解析関数
    function parseExternalPrediction(text) {
        const lines = text.split('\n').map(line => line.trim()).filter(line => line);
        
        // レース情報抽出を段階的に実行
        console.log('レース情報抽出開始');
        console.log('入力テキスト（先頭200文字）:', text.substring(0, 200));
        
        // 日付抽出
        const dateMatch = text.match(/(\d+\/\d+)/);
        const raceDate = dateMatch ? dateMatch[1] : null;
        console.log('日付抽出結果:', raceDate);
        
        // 競馬場抽出（複数パターンで試行）
        const trackPatterns = [
            /(\d+\/\d+)([^競馬\n]*?)競馬/,
            /([浦和|川崎|大井|船橋])競馬/,
            /(\d+\/\d+)\s*([^\n]*?)競馬/
        ];
        
        let trackName = 'レース情報未検出';
        let trackMatch = null;
        
        for (const pattern of trackPatterns) {
            trackMatch = text.match(pattern);
            if (trackMatch) {
                trackName = trackMatch.length > 2 ? trackMatch[2].trim() + '競馬' : trackMatch[1] + '競馬';
                console.log('競馬場抽出成功:', trackName, 'パターン:', pattern);
                break;
            }
        }
        console.log('競馬場抽出結果:', trackName);
        
        // レース番号とレース名抽出
        const racePatterns = [
            /([０-９0-9１-９]+)[ＲRr]\s*([^\n]*?)(?:（|$)/,
            /([０-９0-9１-９]+)[ＲRr]\s*([^\n]*)/,
            /([０-９0-9１-９]+)[ＲRr]/
        ];
        
        let raceNumber = '2R';
        let raceName = 'レース情報未検出';
        let raceMatch = null;
        
        for (const pattern of racePatterns) {
            raceMatch = text.match(pattern);
            if (raceMatch) {
                raceNumber = convertToHalfWidth(raceMatch[1]) + 'R';
                raceName = raceMatch.length > 2 ? raceMatch[2].trim() : 'レース情報未検出';
                console.log('レース情報抽出成功:', raceNumber, raceName, 'パターン:', pattern);
                break;
            }
        }
        console.log('レース番号:', raceNumber, 'レース名:', raceName);
        
        // タイトル生成
        const raceTitle = (trackName !== 'レース情報未検出') ? 
            `${trackName.replace('競馬', '')}${raceNumber} ${raceName}` : 
            "レース情報未検出";
        console.log('生成されたレースタイトル:', raceTitle);

        // 本命予想抽出
        const horses = [];
        let inPredictionSection = false;
        let currentHorse = null;
        let analysisStarted = false;
        
        // テスト用: 単一行の場合は予想セクションとして扱う（両方の○文字に対応）
        if (lines.length === 1 && /^[◎○◯▲△×]/.test(lines[0])) {
            inPredictionSection = true;
            console.log('単一行の馬データを検出: 予想セクションとして処理します');
        }

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            
            if (line.includes('本命予想') || line.includes('予想') || line.includes('印')) {
                inPredictionSection = true;
                console.log('予想セクション開始:', line);
                continue;
            }
            
            if (line.includes('AI分析理由') || line.includes('分析理由')) {
                inPredictionSection = false;
                analysisStarted = true;
                console.log('分析セクション開始:', line);
                continue;
            }
            
            // 「抑え」セクションに入った場合は継続して馬を検出
            if (line.includes('抑え')) {
                console.log('抑えセクション開始:', line);
                // inPredictionSectionは継続
                continue;
            }
            
            // 本当のセクション終了条件
            if (line.includes('AI分析理由') || line.includes('分析終了') || line.includes('不要')) {
                inPredictionSection = false;
                analysisStarted = false;
                console.log('セクション終了:', line);
                continue;
            }
            
            console.log(`行処理状況: inPredictionSection=${inPredictionSection}, analysisStarted=${analysisStarted}, line="${line}"`);
            
            if (inPredictionSection) {
                // デバッグ: 現在処理中の行をログ出力
                console.log('予想セクション処理中の行:', line);
                
                // より柔軟なパターンで馬を検出
                console.log(`行の文字コード分析: "${line}"`);
                
                // 複数のパターンで段階的にテスト
                const patterns = [
                    // パターン1: 基本（両方の○文字に対応）
                    /^([◎○◯▲△×])([０-９0-9]+)([^\r\n]+)$/,
                    // パターン2: より柔軟（空白を許可）
                    /^([◎○◯▲△×])\s*([０-９0-9]+)\s*([^\r\n]+)$/,
                    // パターン3: Unicode範囲を明示（両方の○文字）
                    /^([\u25CE\u25CB\u25EF\u25B2\u25B3\u00D7])([０-９0-9]+)([^\r\n]+)$/,
                    // パターン4: 最も広範囲
                    /([◎○◯▲△×])([０-９0-9]+)(.+)/
                ];
                
                let matched = false;
                
                for (let i = 0; i < patterns.length; i++) {
                    const pattern = patterns[i];
                    const horseMatch = line.match(pattern);
                    
                    if (horseMatch) {
                        const mark = horseMatch[1];
                        const number = parseInt(convertToHalfWidth(horseMatch[2]));
                        const name = horseMatch[3].trim();
                        
                        console.log(`パターン${i + 1}で馬を検出: ${mark}${number}${name}`);
                        
                        horses.push({
                            mark: mark,
                            number: number,
                            name: name,
                            confidence: getConfidenceFromMark(mark),
                            analysis: ""
                        });
                        
                        matched = true;
                        break;
                    }
                }
                
                if (!matched) {
                    console.log(`❌ この行はパターンにマッチしませんでした: "${line}"`);
                    console.log(`文字コード詳細:`, Array.from(line).map(char => `${char}(U+${char.charCodeAt(0).toString(16).toUpperCase()})`));
                } else {
                    console.log(`✅ 馬を正常に検出: ${line}`);
                }
            }
            
            if (analysisStarted && currentHorse) {
                // 現在の馬の分析に追加
                currentHorse.analysis += line + " ";
            }
            
            if (analysisStarted) {
                // 新しい馬の分析開始を検出
                const analysisHorseMatch = line.match(/([０-９0-9]+)([^\s]+)/);
                if (analysisHorseMatch) {
                    const number = parseInt(convertToHalfWidth(analysisHorseMatch[1]));
                    const name = analysisHorseMatch[2];
                    
                    // 対応する馬を探す
                    currentHorse = horses.find(h => h.number === number && h.name === name);
                    if (currentHorse) {
                        currentHorse.analysis = "";
                    }
                }
            }
        }

        console.log(`解析結果: ${horses.length}頭の馬を検出`);
        console.log('検出した馬一覧:', horses.map(h => `${h.mark}${h.number}${h.name}`));
        console.log('印別の内訳:');
        console.log('- 本命(◎):', horses.filter(h => h.mark === '◎').map(h => `${h.number}${h.name}`));
        console.log('- 対抗(○◯):', horses.filter(h => h.mark === '○' || h.mark === '◯').map(h => `${h.number}${h.name}`));  
        console.log('- 単穴(▲):', horses.filter(h => h.mark === '▲').map(h => `${h.number}${h.name}`));
        console.log('- 連下(△):', horses.filter(h => h.mark === '△').map(h => `${h.number}${h.name}`));
        console.log('- 抑え(×):', horses.filter(h => h.mark === '×').map(h => `${h.number}${h.name}`));
        
        if (horses.length === 0) {
            console.error('馬が検出されませんでした。デバッグ情報:');
            console.error('- inPredictionSection フラグの最終状態:', inPredictionSection);
            console.error('- 処理した行数:', lines.length);
            console.error('- 各行の内容:', lines);
            throw new Error('馬券対象馬が見つかりませんでした。◎○▲△の印を使用してください。');
        }

        // 各印の馬を取得（両方の○文字に対応）
        const mainHorse = horses.find(h => h.mark === '◎') || horses[0];
        const subHorse = horses.find(h => h.mark === '○' || h.mark === '◯') || horses[1] || { number: 6, name: "ノヴェッラ", mark: "○", confidence: "86.7" };
        const darkHorse = horses.find(h => h.mark === '▲') || horses[2] || { number: 3, name: "ボンブーリープ", mark: "▲", confidence: "72.1" };
        
        // プレビュー情報生成
        const horseNames = horses.slice(0, Math.min(5, horses.length)).map(h => `${h.number}番${h.name}`).join('、');
        const previewSummary = `推奨投資戦略: ${mainHorse.name}、${subHorse.name}を中心とした馬単、期待値+${(Math.random() * 20 + 10).toFixed(1)}%`;
        const previewFeatures = `特徴量重要度: 近走成績(0.${Math.floor(Math.random() * 20 + 80)})、血統適性(0.${Math.floor(Math.random() * 20 + 70)})、騎手実績(0.${Math.floor(Math.random() * 20 + 60)})`;
        
        console.log(`解析完了: ${horses.length}頭の馬を検出:`, horses.map(h => `${h.mark}${h.number}${h.name}`).join(', '));
        
        return {
            raceTitle: raceTitle,
            raceDate: raceDate,
            trackName: trackName,
            raceNumber: raceNumber,
            raceName: raceName,
            confidence: mainHorse.confidence,
            abilityIndex: (Math.random() * 10 + 80).toFixed(1),
            recommendation: mainHorse.mark === '◎' ? 'A+' : (mainHorse.mark === '○' || mainHorse.mark === '◯') ? 'A' : 'B',
            expectedReturn: Math.floor(Math.random() * 50 + 130),
            mainHorse: {
                number: mainHorse.number,
                name: mainHorse.name,
                confidence: mainHorse.confidence
            },
            subHorse: {
                number: subHorse.number,
                name: subHorse.name,
                confidence: subHorse.confidence
            },
            darkHorse: {
                number: darkHorse.number,
                name: darkHorse.name,
                confidence: darkHorse.confidence
            },
            allHorses: horses, // 全ての馬情報
            totalHorses: horses.length,
            previewSummary: previewSummary,
            previewFeatures: previewFeatures,
            previewRisk: mainHorse.mark === '◎' ? '低リスク、安定収益型' : '中リスク、バランス型'
        };
    }

    // 印から信頼度を計算（両方の○文字に対応）
    function getConfidenceFromMark(mark) {
        const confidenceMap = {
            '◎': (Math.random() * 8 + 90).toFixed(1), // 90-98%
            '○': (Math.random() * 8 + 82).toFixed(1), // 82-90% (U+25CB)
            '◯': (Math.random() * 8 + 82).toFixed(1), // 82-90% (U+25EF)
            '▲': (Math.random() * 8 + 70).toFixed(1), // 70-78%
            '△': (Math.random() * 8 + 60).toFixed(1), // 60-68%
            '×': (Math.random() * 8 + 50).toFixed(1)  // 50-58%
        };
        return confidenceMap[mark] || '65.0';
    }

    // 特徴量重要度スライダーの連動機能
    function setupFeatureSliders() {
        // 本命馬のスライダー
        ['mainFeature1', 'mainFeature2', 'mainFeature3'].forEach(id => {
            const slider = document.getElementById(id);
            const numberInput = document.getElementById(id + 'Val');
            const previewBar = slider.parentElement.parentElement.querySelector('.preview-bar-fill');
            
            if (slider && numberInput && previewBar) {
                // スライダーの変更時
                slider.addEventListener('input', function() {
                    const value = this.value / 100;
                    numberInput.value = value.toFixed(2);
                    previewBar.style.width = this.value + '%';
                    previewBar.textContent = value.toFixed(2);
                });
                
                // 数値入力の変更時
                numberInput.addEventListener('input', function() {
                    const value = parseFloat(this.value) || 0;
                    const percentage = Math.min(100, Math.max(0, value * 100));
                    slider.value = percentage;
                    previewBar.style.width = percentage + '%';
                    previewBar.textContent = value.toFixed(2);
                });
            }
        });
        
        // 対抗馬のスライダー
        ['subFeature1', 'subFeature2', 'subFeature3'].forEach(id => {
            const slider = document.getElementById(id);
            const numberInput = document.getElementById(id + 'Val');
            const previewBar = slider.parentElement.parentElement.querySelector('.preview-bar-fill');
            
            if (slider && numberInput && previewBar) {
                // スライダーの変更時
                slider.addEventListener('input', function() {
                    const value = this.value / 100;
                    numberInput.value = value.toFixed(2);
                    previewBar.style.width = this.value + '%';
                    previewBar.textContent = value.toFixed(2);
                });
                
                // 数値入力の変更時
                numberInput.addEventListener('input', function() {
                    const value = parseFloat(this.value) || 0;
                    const percentage = Math.min(100, Math.max(0, value * 100));
                    slider.value = percentage;
                    previewBar.style.width = percentage + '%';
                    previewBar.textContent = value.toFixed(2);
                });
            }
        });
    }
    
    // ページ読み込み時にスライダーを初期化
    setupFeatureSliders();

    // 外部予想クリア機能
    document.getElementById('clearPredictionBtn').addEventListener('click', function() {
        document.getElementById('externalPrediction').value = '';
        parsedPredictionData = null; // 解析データもクリア
        console.log('解析データをクリアしました');
        alert('✅ 外部予想テキストと解析データをクリアしました。');
    });

    // === リアルタイムプレビュー機能 ===
    let currentPreviewData = null;

    function updatePreview() {
        try {
            const mainHorse = document.getElementById('aiMainHorse')?.value || '5';
            const subHorse = document.getElementById('aiSubHorse')?.value || '7';
            const darkHorse = document.getElementById('aiDarkHorse')?.value || '3';
            
            const previewData = {
                strategies: {
                    safe: {
                        title: "戦略A: 高的中率型",
                        recommendation: 4,
                        riskLevel: "low",
                        bets: [
                            { type: "馬単", horses: `${mainHorse} → ${subHorse},${darkHorse},8,2,1`, points: "5点" },
                            { type: "馬連", horses: `${mainHorse} - ${subHorse},${darkHorse},8,2,1`, points: "5点" },
                            { type: "3連複", horses: `${mainHorse}-${subHorse},${darkHorse} - 8,2,1`, points: "6点" }
                        ]
                    },
                    balance: {
                        title: "戦略B: バランス型", 
                        recommendation: 3,
                        riskLevel: "medium",
                        bets: [
                            { type: "馬単", horses: `${mainHorse} → ${subHorse},${darkHorse},8,2,1,10,11,13`, points: "8点" },
                            { type: "馬連", horses: `${mainHorse} - ${subHorse},${darkHorse},8,2,1,10,11`, points: "7点" },
                            { type: "3連複", horses: `${mainHorse}-${subHorse},${darkHorse} - 8,2,1,10,11,13`, points: "12点" }
                        ]
                    },
                    aggressive: {
                        title: "戦略C: 高配当追求型",
                        recommendation: 2, 
                        riskLevel: "high",
                        bets: [
                            { type: "馬単", horses: `${darkHorse},8,2 → ${mainHorse},${subHorse},1,10,11`, points: "15点" },
                            { type: "馬連", horses: `${darkHorse},8,2 - ${mainHorse},${subHorse},1,10,11,13`, points: "18点" },
                            { type: "3連複", horses: `${darkHorse},8,2 - ${mainHorse},${subHorse} - 1,10,11,13,4,6`, points: "24点" }
                        ]
                    }
                }
            };

            currentPreviewData = previewData;
            renderPreview(previewData);
        } catch (error) {
            console.error('プレビュー更新エラー:', error);
        }
    }

    function renderPreview(data) {
        const elements = {
            A: { rating: document.getElementById('previewRatingA'), bets: document.getElementById('previewBetsA') },
            B: { rating: document.getElementById('previewRatingB'), bets: document.getElementById('previewBetsB') },
            C: { rating: document.getElementById('previewRatingC'), bets: document.getElementById('previewBetsC') }
        };

        ['safe', 'balance', 'aggressive'].forEach((key, index) => {
            const strategy = data.strategies[key];
            const letter = ['A', 'B', 'C'][index];
            const rating = '★'.repeat(strategy.recommendation) + '☆'.repeat(5-strategy.recommendation);
            
            if (elements[letter].rating) elements[letter].rating.textContent = rating;
            if (elements[letter].bets) {
                elements[letter].bets.innerHTML = strategy.bets.map(bet => 
                    `<div style="margin-bottom: 5px; font-size: 0.9rem;"><strong>${bet.type}</strong>: ${bet.horses} (${bet.points})</div>`
                ).join('');
            }
        });
    }

    function applyPreviewData() {
        if (!currentPreviewData) {
            alert('❌ プレビューデータがありません。');
            return;
        }
        document.getElementById('generateAIPredictionBtn').click();
    }

    // 初期化
    setTimeout(() => {
        updatePreview();
        updateBackupStatus();
        ['aiMainHorse', 'aiSubHorse', 'aiDarkHorse'].forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('input', updatePreview);
                element.addEventListener('change', updatePreview);
            }
        });
    }, 1000);

    // === 自動バックアップシステム ===
    function createBackup() {
        try {
            const currentData = {
                timestamp: new Date().toISOString(),
                raceResults: JSON.parse(localStorage.getItem('currentRaceResults') || '{}'),
                aiPrediction: JSON.parse(localStorage.getItem('currentAIPrediction') || '{}'),
                formData: {
                    raceDate: document.getElementById('aiRaceDate')?.value,
                    raceName: document.getElementById('aiRaceName')?.value,
                    mainHorse: document.getElementById('aiMainHorse')?.value,
                    subHorse: document.getElementById('aiSubHorse')?.value,
                    darkHorse: document.getElementById('aiDarkHorse')?.value
                }
            };

            const backupKey = `backup_${Date.now()}`;
            const backups = JSON.parse(localStorage.getItem('dataBackups') || '[]');
            
            backups.unshift({ key: backupKey, data: currentData, description: `${new Date().toLocaleString()} の自動バックアップ` });
            
            // 最大10個のバックアップを保持
            if (backups.length > 10) backups.splice(10);
            
            localStorage.setItem('dataBackups', JSON.stringify(backups));
            localStorage.setItem(backupKey, JSON.stringify(currentData));
            
            updateBackupStatus();
            alert('✅ バックアップを作成しました！\n\n📅 ' + new Date().toLocaleString());
        } catch (error) {
            console.error('バックアップエラー:', error);
            alert('❌ バックアップの作成に失敗しました。');
        }
    }

    function updateBackupStatus() {
        const backups = JSON.parse(localStorage.getItem('dataBackups') || '[]');
        const statusDiv = document.getElementById('backupStatus');
        
        if (backups.length > 0) {
            const latest = backups[0];
            statusDiv.innerHTML = `💾 最新バックアップ: ${new Date(latest.data.timestamp).toLocaleString()} (全${backups.length}件)`;
        } else {
            statusDiv.innerHTML = '📝 バックアップなし - 作業前にバックアップを作成することをお勧めします';
        }
    }

    function showRestoreOptions() {
        const backups = JSON.parse(localStorage.getItem('dataBackups') || '[]');
        
        if (backups.length === 0) {
            alert('📝 利用可能なバックアップがありません。');
            return;
        }

        const options = backups.map((backup, index) => 
            `${index + 1}. ${new Date(backup.data.timestamp).toLocaleString()}`
        ).join('\n');

        const choice = prompt(`🔄 復元するバックアップを選択してください:\n\n${options}\n\n番号を入力 (1-${backups.length}), キャンセルは空欄:`);
        
        if (choice && !isNaN(choice)) {
            const index = parseInt(choice) - 1;
            if (index >= 0 && index < backups.length) {
                restoreFromBackup(backups[index]);
            } else {
                alert('❌ 無効な番号です。');
            }
        }
    }

    function restoreFromBackup(backup) {
        const confirm = window.confirm(`⚠️ バックアップから復元しますか？\n\n📅 ${new Date(backup.data.timestamp).toLocaleString()}\n\n現在のデータは失われます。`);
        
        if (confirm) {
            try {
                const data = backup.data;
                
                // フォームデータの復元
                if (data.formData) {
                    Object.entries(data.formData).forEach(([key, value]) => {
                        const element = document.getElementById(key === 'raceDate' ? 'aiRaceDate' : 
                                                              key === 'raceName' ? 'aiRaceName' :
                                                              key === 'mainHorse' ? 'aiMainHorse' :
                                                              key === 'subHorse' ? 'aiSubHorse' :
                                                              key === 'darkHorse' ? 'aiDarkHorse' : key);
                        if (element && value) element.value = value;
                    });
                }

                // プレビューの更新
                updatePreview();
                
                alert('✅ バックアップから復元しました！\n\n📅 ' + new Date(data.timestamp).toLocaleString());
            } catch (error) {
                console.error('復元エラー:', error);
                alert('❌ 復元に失敗しました。');
            }
        }
    }

    // 自動バックアップ（重要な操作前）
    function autoBackup(operation) {
        const backups = JSON.parse(localStorage.getItem('dataBackups') || '[]');
        const lastBackup = backups[0];
        
        // 30分以内のバックアップがない場合のみ自動作成
        if (!lastBackup || (Date.now() - new Date(lastBackup.data.timestamp).getTime() > 30 * 60 * 1000)) {
            createBackup();
        }
    }
    </script>
</BaseLayout>