---
export const prerender = true;
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title="買い目直接入力システム" description="マコちゃん専用 - 完成データ直接反映システム">
    <div class="container">
        <div class="header-section">
            <div class="ai-badge">
                <span class="pulse"></span>
                <span class="ai-status">100%確実システム</span>
            </div>
            <h1>🎯 買い目直接入力システム</h1>
            <p class="subtitle">マコちゃんの完成データ → 即座に本番反映</p>
            <div class="guarantee-box">
                <h3>💖 マコちゃん保証事項</h3>
                <ul>
                    <li>✅ premium-predictions/ のデザイン <strong>100%保持</strong></li>
                    <li>✅ 馬情報・スコア・特徴量 <strong>完全更新</strong></li>
                    <li>✅ 買い目・候補馬 <strong>確実更新</strong></li>
                    <li>✅ 全データ一括反映 <strong>完全対応</strong></li>
                    <li>✅ 半角全角・スペース <strong>柔軟対応</strong></li>
                </ul>
            </div>
        </div>

        <div class="form-section">
            <div class="input-section">
                <h2>📝 完成データ入力</h2>
                <div class="format-guide">
                    <p><strong>マコちゃん形式完全対応:</strong> 複数行形式・候補馬リスト・全データ反映</p>
                </div>
                <textarea
                    id="complete-data"
                    placeholder="マコちゃんの完成データをそのまま貼り付けてください...

例：
大井競馬9/17
1R
◎ 11 オールスターズ 本命 総合評価:★★★ 累積スコア: 88pt 特徴量重要度 安定性91% 能力上位性90% 展開利81%
○ 5 シャークウォーニン 対抗 総合評価:★★★ 累積スコア: 87pt 特徴量重要度 安定性97% 能力上位性79% 展開利82%
▲ 9 フェアクラウド 単穴 総合評価:★★★ 累積スコア: 82pt
▲ 6 パンオショコラ 単穴 総合評価:★★★ 累積スコア: 76pt
△ 連下候補馬 4 ベッティーナ (75pt) 13 ブッコワース (75pt)...
× 抑え候補馬 2 レディヴィクトリア (66pt) 7 オニクダイスキマン (66pt)...

買い目
少点数的中型モデル 馬単 11 → 5,6,9　3点 AI予測58%
バランス型モデル 馬単 5,6,9 → 11　3点 馬単 11 ⇔ 4,10,13,14　8点...
高配当追求型モデル 馬単 11 → 2,7,12　3点 馬単 5 ⇔ 2,4,7,10,12,13,14　14点...

2R
◎ 8 フロリダフォンテン 本命
総合評価:★★★
累積スコア: 85pt
特徴量重要度
安定性92%
能力上位性90%
展開利73%
..."
                    rows="30"></textarea>
            </div>

            <div class="action-buttons">
                <button type="button" id="parse-btn" class="btn-primary">📋 解析・プレビュー</button>
                <button type="button" id="update-json-btn" class="btn-success" style="display: none;">🚀 JSON更新実行</button>
                <a href="/premium-predictions" id="check-result-btn" class="btn-check" style="display: none;">👀 結果確認</a>
            </div>
        </div>

        <div id="preview-section" class="preview-section" style="display: none;">
            <h2>📋 解析結果プレビュー</h2>
            <div id="preview-content"></div>
        </div>

        <div id="success-section" class="success-section" style="display: none;">
            <h2>✅ 更新完了</h2>
            <p>全データが正常に更新されました！</p>
            <p><strong>premium-predictions/</strong> で結果をご確認ください。</p>
        </div>
    </div>

    <script>
        let parsedData = null;

        // 解析処理
        document.getElementById('parse-btn').addEventListener('click', function() {
            const inputData = document.getElementById('complete-data').value;

            if (!inputData.trim()) {
                alert('データを入力してください');
                return;
            }

            try {
                parsedData = parseCompleteData(inputData);
                displayPreview(parsedData);

                document.getElementById('preview-section').style.display = 'block';
                document.getElementById('update-json-btn').style.display = 'inline-block';
            } catch (error) {
                alert('データの解析に失敗しました: ' + error.message);
                console.error('Parse error:', error);
            }
        });

        // JSON更新処理
        document.getElementById('update-json-btn').addEventListener('click', function() {
            if (!parsedData) {
                alert('先に解析を実行してください');
                return;
            }

            try {
                updateJsonData(parsedData);
                document.getElementById('success-section').style.display = 'block';
                document.getElementById('check-result-btn').style.display = 'inline-block';

                // 少し下にスクロール
                document.getElementById('success-section').scrollIntoView({ behavior: 'smooth' });
            } catch (error) {
                alert('JSON更新に失敗しました: ' + error.message);
                console.error('Update error:', error);
            }
        });

        // 馬データ保存ヘルパー関数
        function saveHorseData(raceInfo, horseData) {
            if (!horseData || !horseData.type) return;

            console.log(`🐎 馬データ保存: ${horseData.mark}${horseData.number}${horseData.name} (${horseData.type})`);

            if (horseData.type === '本命') {
                raceInfo.horses.main = horseData;
            } else if (horseData.type === '対抗') {
                raceInfo.horses.sub = horseData;
            } else if (horseData.type === '単穴') {
                if (!raceInfo.horses.sub1) {
                    raceInfo.horses.sub1 = horseData;
                } else {
                    horseData.type = '単穴2';
                    raceInfo.horses.sub2 = horseData;
                }
            }
        }

        // マコちゃん形式完全対応パース関数
        function parseCompleteData(data) {
            const lines = data.split('\n').map(line => line.trim()).filter(line => line);
            const raceData = {};

            let currentRace = null;
            let currentSection = null;
            let currentHorseData = null;
            let horseDataBuffer = [];

            console.log('🔍 マコちゃんデータ解析開始');

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                console.log(`📝 処理中: "${line}"`);

                // レース番号検出
                const raceMatch = line.match(/^([0-9１２３４５６７８９０123456789]{1,2})\s*[rRレース]$/);
                if (raceMatch) {
                    // 前のレースの馬データを保存
                    if (currentRace && currentHorseData) {
                        saveHorseData(raceData[currentRace], currentHorseData);
                        currentHorseData = null;
                    }

                    const raceNum = raceMatch[1]
                        .replace(/[０１２３４５６７８９]/g, (match) =>
                            String.fromCharCode(match.charCodeAt(0) - 0xFF10 + 0x30));

                    currentRace = parseInt(raceNum);
                    raceData[currentRace] = {
                        horses: {},
                        candidates: { renka: [], osae: [] },
                        strategies: {}
                    };
                    currentSection = null;
                    currentHorseData = null;
                    console.log(`🎯 ${currentRace}R 開始`);
                    continue;
                }

                if (!currentRace) continue;

                // 馬情報の開始行を検出
                const horseStartMatch = line.match(/^([◎○▲△×])\s*([0-9]+)\s+([^\s]+)\s+(本命|対抗|単穴)/);
                if (horseStartMatch) {
                    // 前の馬データを保存
                    if (currentHorseData) {
                        saveHorseData(raceData[currentRace], currentHorseData);
                    }

                    const [, mark, number, name, type] = horseStartMatch;
                    currentHorseData = {
                        number: parseInt(number),
                        name: name,
                        mark: mark,
                        type: type,
                        factors: [],
                        importance: []
                    };

                    // 同じ行内の追加情報をチェック
                    const starMatch = line.match(/総合評価:(★+)/);
                    if (starMatch) {
                        currentHorseData.factors.push({
                            icon: "★",
                            text: `総合評価:${starMatch[1]}`
                        });
                    }

                    const scoreMatch = line.match(/累積スコア:?\s*([0-9]+)pt/);
                    if (scoreMatch) {
                        currentHorseData.factors.push({
                            icon: "★",
                            text: `累積スコア: ${scoreMatch[1]}pt`
                        });
                    }

                    // 特徴量重要度（1行形式）
                    const stabilityMatch = line.match(/安定性([0-9]+)%/);
                    const abilityMatch = line.match(/能力上位性([0-9]+)%/);
                    const developmentMatch = line.match(/展開利([0-9]+)%/);

                    if (stabilityMatch && abilityMatch && developmentMatch) {
                        currentHorseData.importance = [
                            { label: "安定性", value: parseInt(stabilityMatch[1]) / 100 },
                            { label: "能力上位性", value: parseInt(abilityMatch[1]) / 100 },
                            { label: "展開利", value: parseInt(developmentMatch[1]) / 100 }
                        ];
                    }

                    console.log(`🐎 馬情報開始: ${mark}${number}${name} (${type})`);
                    continue;
                }

                // 複数行形式の情報を処理
                if (currentHorseData) {
                    // 総合評価
                    if (line.match(/^総合評価:(★+)$/)) {
                        const stars = line.match(/総合評価:(★+)$/)[1];
                        currentHorseData.factors.push({
                            icon: "★",
                            text: `総合評価:${stars}`
                        });
                        console.log(`   ⭐ 星評価: ${stars}`);
                        continue;
                    }

                    // 累積スコア
                    if (line.match(/^累積スコア:?\s*([0-9]+)pt$/)) {
                        const score = line.match(/^累積スコア:?\s*([0-9]+)pt$/)[1];
                        currentHorseData.factors.push({
                            icon: "★",
                            text: `累積スコア: ${score}pt`
                        });
                        console.log(`   📊 スコア: ${score}pt`);
                        continue;
                    }

                    // 特徴量重要度ヘッダー
                    if (line === '特徴量重要度') {
                        console.log(`   🎯 特徴量重要度開始`);
                        continue;
                    }

                    // 安定性・能力上位性・展開利の個別行
                    const stabilityOnlyMatch = line.match(/^安定性([0-9]+)%$/);
                    const abilityOnlyMatch = line.match(/^能力上位性([0-9]+)%$/);
                    const developmentOnlyMatch = line.match(/^展開利([0-9]+)%$/);

                    if (stabilityOnlyMatch || abilityOnlyMatch || developmentOnlyMatch) {
                        if (stabilityOnlyMatch) {
                            currentHorseData.stability = parseInt(stabilityOnlyMatch[1]);
                            console.log(`   📈 安定性: ${stabilityOnlyMatch[1]}%`);
                        }
                        if (abilityOnlyMatch) {
                            currentHorseData.ability = parseInt(abilityOnlyMatch[1]);
                            console.log(`   💪 能力上位性: ${abilityOnlyMatch[1]}%`);
                        }
                        if (developmentOnlyMatch) {
                            currentHorseData.development = parseInt(developmentOnlyMatch[1]);
                            console.log(`   🎲 展開利: ${developmentOnlyMatch[1]}%`);

                            // 展開利が最後なので特徴量重要度を設定
                            if (currentHorseData.stability && currentHorseData.ability) {
                                currentHorseData.importance = [
                                    { label: "安定性", value: currentHorseData.stability / 100 },
                                    { label: "能力上位性", value: currentHorseData.ability / 100 },
                                    { label: "展開利", value: currentHorseData.development / 100 }
                                ];
                            }
                        }
                        continue;
                    }
                }

                // 連下候補馬パース
                if (line.startsWith('△ 連下候補馬')) {
                    const numbers = [];
                    // 馬番のみを抽出（ptが付いた数値は除外）
                    const parts = line.split(/\s+/);
                    for (const part of parts) {
                        // 1桁または2桁の数字のみを抽出（pt付きは除外）
                        const match = part.match(/^([0-9]{1,2})$/);
                        if (match && !part.includes('pt')) {
                            const num = parseInt(match[1]);
                            if (num >= 1 && num <= 18) { // 通常の馬番範囲
                                numbers.push(num);
                            }
                        }
                    }
                    raceData[currentRace].candidates.renka = numbers;
                    console.log(`🎯 連下候補馬: ${numbers.join(',')}`);
                    continue;
                }

                // 抑え候補馬パース
                if (line.startsWith('× 抑え候補馬')) {
                    const numbers = [];
                    // 馬番のみを抽出（ptが付いた数値は除外）
                    const parts = line.split(/\s+/);
                    for (const part of parts) {
                        // 1桁または2桁の数字のみを抽出（pt付きは除外）
                        const match = part.match(/^([0-9]{1,2})$/);
                        if (match && !part.includes('pt')) {
                            const num = parseInt(match[1]);
                            if (num >= 1 && num <= 18) { // 通常の馬番範囲
                                numbers.push(num);
                            }
                        }
                    }
                    raceData[currentRace].candidates.osae = numbers;
                    console.log(`🎯 抑え候補馬: ${numbers.join(',')}`);
                    continue;
                }

                // 買い目セクション
                if (line === '買い目') {
                    // 前の馬データを保存
                    if (currentHorseData) {
                        saveHorseData(raceData[currentRace], currentHorseData);
                        currentHorseData = null;
                    }
                    currentSection = 'betting';
                    console.log(`💰 買い目セクション開始`);
                    continue;
                }

                // 戦略別買い目パース
                if (currentSection === 'betting' || line.includes('少点数的中型モデル') || line.includes('バランス型モデル') || line.includes('高配当追求型モデル')) {
                    if (line.includes('少点数的中型モデル')) {
                        const bets = extractBetsFromLine(line, i, lines);
                        if (bets.length > 0) {
                            raceData[currentRace].strategies.safe = bets;
                            console.log(`🎯 戦略A: ${bets.join(', ')}`);
                        }
                    } else if (line.includes('バランス型モデル')) {
                        const bets = extractBetsFromLine(line, i, lines);
                        if (bets.length > 0) {
                            raceData[currentRace].strategies.balance = bets;
                            console.log(`⚖️ 戦略B: ${bets.join(', ')}`);
                        }
                    } else if (line.includes('高配当追求型モデル')) {
                        const bets = extractBetsFromLine(line, i, lines);
                        if (bets.length > 0) {
                            raceData[currentRace].strategies.aggressive = bets;
                            console.log(`🚀 戦略C: ${bets.join(', ')}`);
                        }
                    }
                }
            }

            // 最後の馬データを保存
            if (currentRace && currentHorseData) {
                saveHorseData(raceData[currentRace], currentHorseData);
            }

            console.log('📊 解析完了:', raceData);
            return raceData;
        }

        // 買い目抽出関数（複数行対応）
        function extractBetsFromLine(line, startIndex, lines) {
            let fullText = line;

            // 次の戦略や次のレースまでの行を結合
            for (let j = startIndex + 1; j < lines.length; j++) {
                const nextLine = lines[j];

                // より厳密な終了条件チェック
                if (nextLine.includes('少点数的中型') || nextLine.includes('バランス型') ||
                    nextLine.includes('高配当追求型') ||
                    nextLine.match(/^[0-9０１２３４５６７８９]{1,2}\s*[rRレース]$/) ||
                    nextLine.startsWith('◎') || nextLine.startsWith('○') ||
                    nextLine.startsWith('▲') || nextLine.startsWith('△') ||
                    nextLine.startsWith('×') || nextLine === '買い目') {
                    break;
                }

                // 空行や無関係な行はスキップ
                if (nextLine.trim().length === 0 ||
                    nextLine.includes('特徴量重要度') ||
                    nextLine.includes('総合評価') ||
                    nextLine.includes('累積スコア')) {
                    continue;
                }

                fullText += ' ' + nextLine;
            }

            console.log(`🔍 戦略抽出用テキスト: "${fullText}"`);
            return extractBets(fullText);
        }

        // 買い目抽出関数（改良版）
        function extractBets(line) {
            const bets = [];

            // 全角を半角に正規化
            const normalized = line
                .replace(/[０１２３４５６７８９]/g, (char) =>
                    String.fromCharCode(char.charCodeAt(0) - 0xFF10 + 0x30))
                .replace(/，/g, ',')
                .replace(/[↔←]/g, '⇔')
                .replace(/\s+/g, ' ')  // 複数の空白を1つに統一
                .trim();

            console.log(`🔍 買い目抽出: "${normalized}"`);

            // 馬単パターン抽出（重複回避版）
            const betPattern = /(馬単)\s+([0-9,]+)\s*([→⇔])\s*([0-9,]+)/g;
            let match;
            const processedBets = new Set(); // 重複防止

            while ((match = betPattern.exec(normalized)) !== null) {
                const [, type, from, arrow, to] = match;

                const cleanFrom = from.replace(/\s/g, '');
                const cleanTo = to.replace(/\s/g, '');

                // 有効な馬番かチェック
                const fromNums = cleanFrom.split(',');
                const toNums = cleanTo.split(',');

                let validBet = true;
                for (const num of [...fromNums, ...toNums]) {
                    const n = parseInt(num);
                    if (isNaN(n) || n < 1 || n > 18) {
                        validBet = false;
                        break;
                    }
                }

                if (validBet) {
                    const cleanBet = `馬単 ${cleanFrom} ${arrow} ${cleanTo}`;
                    if (!processedBets.has(cleanBet)) {
                        bets.push(cleanBet);
                        processedBets.add(cleanBet);
                        console.log(`🎯 抽出した買い目: "${cleanBet}"`);
                    }
                }
            }

            return bets;
        }

        // プレビュー表示（マコちゃん対応版）
        function displayPreview(data) {
            const previewContent = document.getElementById('preview-content');
            let html = '<div class="race-grid">';

            console.log('🔍 プレビュー表示開始:', data);

            for (let raceNum = 1; raceNum <= 12; raceNum++) {
                const raceInfo = data[raceNum];
                if (!raceInfo) continue;

                console.log(`📋 ${raceNum}R プレビュー作成:`, raceInfo);

                html += `
                    <div class="race-preview">
                        <h3>${raceNum}R</h3>

                        <!-- 馬情報セクション -->
                        <div class="horse-section">
                            <h4>🐎 馬情報</h4>
                            <div class="horse-list">`;

                // 各馬の情報表示
                if (raceInfo.horses && Object.keys(raceInfo.horses).length > 0) {
                    console.log(`   馬情報あり: ${Object.keys(raceInfo.horses).length}頭`);
                    Object.values(raceInfo.horses).forEach(horse => {
                        if (horse) {
                            console.log(`     - ${horse.mark}${horse.number}${horse.name} (${horse.type})`);
                            const featuresText = horse.factors ? horse.factors.map(f => f.text).join(' ') : '';
                            const importanceText = horse.importance ?
                                horse.importance.map(imp => `${imp.label}${Math.round(imp.value * 100)}%`).join(' ') : '';

                            html += `
                                <div class="horse-item">
                                    <span class="horse-mark">${horse.mark}</span>
                                    <span class="horse-info">${horse.number}${horse.name} (${horse.type})</span>
                                    <div class="horse-details">
                                        <span class="factor">${featuresText}</span>
                                        ${importanceText ? `<span class="importance">${importanceText}</span>` : ''}
                                    </div>
                                </div>`;
                        }
                    });
                } else {
                    console.log(`   馬情報なし (${raceNum}R)`);
                    html += `<div class="horse-item">馬情報が解析されませんでした</div>`;
                }

                // 候補馬情報
                if (raceInfo.candidates?.renka?.length > 0) {
                    html += `<div class="candidate-item">△ 連下候補馬: ${raceInfo.candidates.renka.join(',')}</div>`;
                    console.log(`   連下候補馬: ${raceInfo.candidates.renka.join(',')}`);
                }
                if (raceInfo.candidates?.osae?.length > 0) {
                    html += `<div class="candidate-item">× 抑え候補馬: ${raceInfo.candidates.osae.join(',')}</div>`;
                    console.log(`   抑え候補馬: ${raceInfo.candidates.osae.join(',')}`);
                }

                html += `
                            </div>
                        </div>

                        <!-- 戦略セクション -->
                        <div class="strategy-preview">
                            <div class="strategy-item">
                                <h4>🎯 少点数的中型</h4>
                                <div>${raceInfo?.strategies?.safe?.join('<br>') || '未設定'}</div>
                            </div>
                            <div class="strategy-item">
                                <h4>⚖️ バランス型</h4>
                                <div>${raceInfo?.strategies?.balance?.join('<br>') || '未設定'}</div>
                            </div>
                            <div class="strategy-item">
                                <h4>🚀 高配当追求型</h4>
                                <div>${raceInfo?.strategies?.aggressive?.join('<br>') || '未設定'}</div>
                            </div>
                        </div>
                    </div>
                `;
            }

            html += '</div>';
            previewContent.innerHTML = html;
        }

        // JSON更新実行（全データ対応版）
        async function updateJsonData(data) {
            try {
                const response = await fetch('/.netlify/functions/update-complete-data', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        completeData: data
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log('✅ 更新成功:', result);

                if (result.success) {
                    console.log(`🎯 ${result.updatedRaces}レースの全データを更新しました`);
                    return result;
                } else {
                    throw new Error(result.error || '更新に失敗しました');
                }

            } catch (error) {
                console.error('❌ 更新エラー:', error);
                throw error;
            }
        }
    </script>

    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header-section {
            text-align: center;
            margin-bottom: 40px;
        }

        .ai-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            margin-bottom: 20px;
            font-size: 0.9rem;
        }

        .pulse {
            width: 8px;
            height: 8px;
            background: white;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        h1 {
            color: #3b82f6;
            margin-bottom: 10px;
        }

        .subtitle {
            color: #64748b;
            font-size: 1.1rem;
        }

        .guarantee-box {
            background: linear-gradient(135deg, #fef3c7 0%, #fbbf24 10%, #fef3c7 100%);
            border: 2px solid #f59e0b;
            border-radius: 15px;
            padding: 20px;
            margin: 30px auto;
            max-width: 600px;
            text-align: left;
        }

        .guarantee-box h3 {
            color: #92400e;
            margin-bottom: 15px;
            text-align: center;
        }

        .guarantee-box ul {
            list-style: none;
            padding: 0;
        }

        .guarantee-box li {
            margin: 8px 0;
            font-weight: 500;
        }

        .form-section {
            background: #1e293b;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
        }

        .input-section h2 {
            color: #3b82f6;
            margin-bottom: 15px;
        }

        .format-guide {
            background: #0f172a;
            border: 1px solid #334155;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .format-guide p {
            margin: 0;
            color: #94a3b8;
        }

        #complete-data {
            width: 100%;
            background: #0f172a;
            border: 1px solid #334155;
            border-radius: 8px;
            padding: 15px;
            color: #e2e8f0;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9rem;
            line-height: 1.5;
            resize: vertical;
        }

        #complete-data::placeholder {
            color: #64748b;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 30px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
        }

        .btn-success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .btn-success:hover {
            transform: translateY(-2px);
        }

        .btn-check {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            color: white;
            text-decoration: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            transition: transform 0.2s;
            display: inline-block;
        }

        .btn-check:hover {
            transform: translateY(-2px);
        }

        .preview-section, .success-section {
            background: #1e293b;
            border-radius: 15px;
            padding: 30px;
            margin-top: 30px;
        }

        .preview-section h2, .success-section h2 {
            color: #3b82f6;
            margin-bottom: 20px;
        }

        .race-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
        }

        .race-preview {
            background: #0f172a;
            border: 1px solid #334155;
            border-radius: 10px;
            padding: 20px;
        }

        .race-preview h3 {
            color: #f59e0b;
            margin-bottom: 15px;
            text-align: center;
        }

        /* 馬情報表示スタイル */
        .horse-section {
            margin-bottom: 20px;
            padding: 15px;
            background: #1e293b;
            border-radius: 8px;
        }

        .horse-section h4 {
            color: #3b82f6;
            margin-bottom: 10px;
        }

        .horse-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .horse-item {
            padding: 12px;
            background: #0f172a;
            border-radius: 6px;
            border-left: 3px solid #3b82f6;
        }

        .horse-mark {
            font-weight: bold;
            font-size: 1.2rem;
            margin-right: 8px;
            color: #fbbf24;
        }

        .horse-info {
            font-weight: 600;
            color: #e2e8f0;
            margin-right: 12px;
        }

        .horse-details {
            margin-top: 6px;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .factor {
            font-size: 0.85rem;
            color: #94a3b8;
        }

        .importance {
            font-size: 0.8rem;
            color: #6b7280;
            font-style: italic;
        }

        .candidate-item {
            padding: 8px 12px;
            background: #374151;
            border-radius: 4px;
            font-size: 0.9rem;
            color: #d1d5db;
            margin-top: 8px;
        }

        .strategy-item {
            margin-bottom: 15px;
            padding: 10px;
            background: #1e293b;
            border-radius: 8px;
        }

        .strategy-item h4 {
            margin: 0 0 8px 0;
            font-size: 0.9rem;
        }

        .strategy-item div {
            color: #e2e8f0;
            font-size: 0.8rem;
            line-height: 1.4;
        }

        .success-section {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            text-align: center;
        }

        .success-section h2 {
            color: white;
        }
    </style>
</BaseLayout>