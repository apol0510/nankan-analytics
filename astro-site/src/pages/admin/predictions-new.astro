---
export const prerender = true;
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title="新予想システム - 完成形データ入力" description="マコちゃんの完成形データ入力システム">
    <div class="container">
        <div class="header-section">
            <div class="ai-badge">
                <span class="pulse"></span>
                <span class="ai-status">新システム開発中</span>
            </div>
            <h1>🚀 新予想システム - 完成形データ入力</h1>
            <p>マコちゃんが完成形データを直接入力 → クロが単純反映するシステム</p>
        </div>

        <div class="form-section">
            <form id="prediction-form">
                <div class="race-info-section">
                    <h2>📅 レース基本情報</h2>
                    <div class="form-group">
                        <label>開催日</label>
                        <input type="date" id="race-date" name="race-date" required>
                    </div>
                    <div class="form-group">
                        <label>競馬場</label>
                        <select id="track" name="track" required>
                            <option value="大井競馬">大井競馬</option>
                            <option value="川崎競馬">川崎競馬</option>
                            <option value="船橋競馬">船橋競馬</option>
                            <option value="浦和競馬">浦和競馬</option>
                        </select>
                    </div>
                </div>

                <div class="prediction-input-section">
                    <h2>🎯 完成形予想データ入力</h2>
                    <div class="input-format-guide">
                        <h3>📝 入力形式（例）</h3>
                        <pre class="format-example">
川崎1R 1400m（11頭）発走時刻14:45 2歳新馬

【戦略A：少点数的中型】
馬単 9 → 11,5,6 (3点)
AIモデル予測: 的中率65%

【戦略B：バランス型】
馬単 9 ⇔ 1,2,3,4 (8点)
馬単 11 → 9,5,6 (3点)
AIモデル予測: 的中率58%

【戦略C：高配当追求型】
馬単 9 → 7,8 (2点)
馬単 11 ⇔ 1,2,3,4,7,8 (12点)
AIモデル予測: 的中率38%

◎9番 本命 累積スコア85pt 安定性88% 能力上位性88% 展開利79%
○11番 対抗 累積スコア81pt 安定性82% 能力上位性85% 展開利76%
▲5番 単穴 累積スコア78pt 安定性79% 能力上位性80% 展開利73%
▲6番 単穴 累積スコア75pt 安定性76% 能力上位性78% 展開利70%

連下候補馬: 1,2,3,4番
押さえ候補馬: 7,8番</pre>
                    </div>

                    <div class="form-group">
                        <label>全レース予想データ（完成形）</label>
                        <textarea id="prediction-data" name="prediction-data" rows="30" placeholder="上記の形式でレースデータを貼り付けてください..."></textarea>
                    </div>
                </div>

                <div class="action-buttons">
                    <button type="button" id="preview-btn" class="btn-primary">📋 プレビュー</button>
                    <button type="button" id="generate-json-btn" class="btn-success">🚀 JSON生成</button>
                    <button type="button" id="download-json-btn" class="btn-download" style="display: none;">📥 JSONダウンロード</button>
                </div>
            </form>
        </div>

        <div id="preview-section" class="preview-section" style="display: none;">
            <h2>👀 プレビュー</h2>
            <div id="preview-content"></div>
        </div>

        <div id="json-output-section" class="json-section" style="display: none;">
            <h2>📄 生成されたJSON</h2>
            <pre id="json-output"></pre>
        </div>
    </div>

    <script>
        let generatedJsonData = null;

        // プレビュー機能
        document.getElementById('preview-btn').addEventListener('click', function() {
            const predictionData = document.getElementById('prediction-data').value;
            const previewSection = document.getElementById('preview-section');
            const previewContent = document.getElementById('preview-content');

            if (!predictionData.trim()) {
                alert('予想データを入力してください');
                return;
            }

            // シンプルなプレビュー表示
            const races = parsePredictionData(predictionData);
            let previewHtml = '';

            races.forEach((race, index) => {
                previewHtml += `
                    <div class="race-preview">
                        <h3>${race.title}</h3>
                        <div class="race-details">
                            ${race.raceName ? `<div><strong>レース名:</strong> ${race.raceName}</div>` : ''}
                            ${race.startTime ? `<div><strong>発走時刻:</strong> ${race.startTime}</div>` : ''}
                            ${race.distance ? `<div><strong>距離:</strong> ${race.distance}</div>` : ''}
                            ${race.horseCount ? `<div><strong>頭数:</strong> ${race.horseCount}</div>` : ''}
                        </div>
                        <div class="strategies">
                            <div class="strategy">
                                <h4>🎯 少点数的中型</h4>
                                <div class="bets">${race.strategyA.join('<br>')}</div>
                                ${race.aiPredictions.strategyA ? `<div class="ai-prediction">AI予測: ${race.aiPredictions.strategyA}%</div>` : ''}
                            </div>
                            <div class="strategy">
                                <h4>⚖️ バランス型</h4>
                                <div class="bets">${race.strategyB.join('<br>')}</div>
                                ${race.aiPredictions.strategyB ? `<div class="ai-prediction">AI予測: ${race.aiPredictions.strategyB}%</div>` : ''}
                            </div>
                            <div class="strategy">
                                <h4>🚀 高配当追求型</h4>
                                <div class="bets">${race.strategyC.join('<br>')}</div>
                                ${race.aiPredictions.strategyC ? `<div class="ai-prediction">AI予測: ${race.aiPredictions.strategyC}%</div>` : ''}
                            </div>
                        </div>
                        <div class="horses">
                            <h4>馬情報</h4>
                            <div class="horse-list">
                                ${race.horses.map(horse => {
                                    return `
                                        <div class="horse-item">
                                            <div class="horse-basic">${horse.mark}${horse.number} ${horse.name || ''} 累積スコア: ${horse.score}pt</div>
                                            ${horse.features.stability ? `<div class="horse-features">特徴量重要度 安定性${horse.features.stability}% 能力上位性${horse.features.ability}% 展開利${horse.features.positioning}%</div>` : ''}
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                        ${race.renzuCandidates.length > 0 ? `
                            <div class="candidates">
                                <h4>連下候補馬</h4>
                                <div>${race.renzuCandidates.join(', ')}</div>
                            </div>
                        ` : ''}
                        ${race.osaeCandidates.length > 0 ? `
                            <div class="candidates">
                                <h4>押さえ候補馬</h4>
                                <div>${race.osaeCandidates.join(', ')}</div>
                            </div>
                        ` : ''}
                    </div>
                `;
            });

            previewContent.innerHTML = previewHtml;
            previewSection.style.display = 'block';
        });

        // JSON生成機能
        document.getElementById('generate-json-btn').addEventListener('click', function() {
            const raceDate = document.getElementById('race-date').value;
            const track = document.getElementById('track').value;
            const predictionData = document.getElementById('prediction-data').value;

            if (!raceDate || !track || !predictionData.trim()) {
                alert('すべての必須項目を入力してください');
                return;
            }

            const races = parsePredictionData(predictionData);
            const jsonData = generateJsonData(raceDate, track, races);

            generatedJsonData = jsonData;
            document.getElementById('json-output').textContent = JSON.stringify(jsonData, null, 2);
            document.getElementById('json-output-section').style.display = 'block';
            document.getElementById('download-json-btn').style.display = 'inline-block';
        });

        // JSONダウンロード機能
        document.getElementById('download-json-btn').addEventListener('click', function() {
            if (!generatedJsonData) return;

            const blob = new Blob([JSON.stringify(generatedJsonData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `allRacesPrediction-${generatedJsonData.raceDate}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });

        // マコちゃんの実際のデータ形式対応パース処理（完全新設計）
        function parsePredictionData(data) {
            const races = [];

            // まずは全データを行に分解して分析
            const allLines = data.split('\n').map(line => line.trim()).filter(line => line);
            console.log(`📄 全行数: ${allLines.length}`);

            // レースの開始位置を特定（レース番号を含む行）
            const raceStartIndices = [];
            allLines.forEach((line, index) => {
                // より柔軟なパターン: 全角・半角レース番号を含む行を全て検出
                if (line.match(/^(１R|２R|３R|４R|５R|６R|７R|８R|９R|１０R|１１R|１２R|1R|2R|3R|4R|5R|6R|7R|8R|9R|10R|11R|12R|大井\d{1,2}R)/i)) {
                    raceStartIndices.push(index);
                    console.log(`🎯 レース開始検出: 行${index}: "${line}"`);
                }
            });

            console.log(`🐎 検出されたレース開始位置: [${raceStartIndices.join(', ')}]`);

            // 各レースのデータを抽出
            for (let i = 0; i < raceStartIndices.length; i++) {
                const startIndex = raceStartIndices[i];
                const endIndex = i < raceStartIndices.length - 1 ? raceStartIndices[i + 1] : allLines.length;

                const raceLines = allLines.slice(startIndex, endIndex);
                console.log(`🏇 レース${i + 1}: 行${startIndex}-${endIndex - 1} (${raceLines.length}行)`);

                const race = parseRaceData(raceLines, i + 1);
                if (race) {
                    races.push(race);
                }
            }

            console.log(`🏁 最終結果: ${races.length}レースを検出しました`);
            return races;
        }

        // 個別レースデータのパース処理
        function parseRaceData(raceLines, raceIndex) {
            const race = {
                title: '',
                raceName: '',
                startTime: '',
                distance: '',
                raceType: '',
                horseCount: '',
                strategyA: [],
                strategyB: [],
                strategyC: [],
                horses: [],
                aiPredictions: {
                    strategyA: null,
                    strategyB: null,
                    strategyC: null
                },
                renzuCandidates: [],
                osaeCandidates: []
            };

            console.log(`📄 レース${raceIndex}ライン数: ${raceLines.length}`);

            // レース番号を検出
            let raceNumber = null;
            let raceNumberLine = raceLines.find(line => line.match(/^\d{1,2}R$/));

            if (raceNumberLine) {
                raceNumber = raceNumberLine;
            } else {
                // 「大井02R」形式もチェック
                const trackRaceLine = raceLines.find(line => line.match(/大井(\d{1,2})R/));
                if (trackRaceLine) {
                    const match = trackRaceLine.match(/大井(\d{1,2})R/);
                    raceNumber = match[1] + 'R';
                } else {
                    // 最初の行に数字+Rが含まれているかチェック
                    const firstLine = raceLines[0];
                    if (firstLine && firstLine.match(/(\d{1,2})R/)) {
                        const match = firstLine.match(/(\d{1,2})R/);
                        raceNumber = match[1] + 'R';
                    } else if (firstLine && firstLine.match(/(１|２|３|４|５|６|７|８|９|１０|１１|１２)R/)) {
                        // 全角数字を半角数字に変換
                        const fullWidthMap = {'１': '1', '２': '2', '３': '3', '４': '4', '５': '5', '６': '6', '７': '7', '８': '8', '９': '9', '１０': '10', '１１': '11', '１２': '12'};
                        const match = firstLine.match(/(１|２|３|４|５|６|７|８|９|１０|１１|１２)R/);
                        raceNumber = fullWidthMap[match[1]] + 'R';
                        console.log(`🔄 全角数字変換: ${match[1]}R → ${raceNumber}`);
                    }
                }
            }

            if (raceNumber) {
                race.title = raceNumber;
                console.log(`🏇 レース検出: "${raceNumber}" - 全ライン数: ${raceLines.length}`);
            } else {
                console.log(`❌ レース番号未検出 - 最初の行: "${raceLines[0]}", 全行: [${raceLines.slice(0, 5).join(', ')}]`);
                return null;
            }

            // 馬情報を検索
            let horseStartIndex = -1;
            let horseEndIndex = -1;

            for (let i = 0; i < raceLines.length; i++) {
                const line = raceLines[i];
                if (line.match(/^[◎○▲△×]\s+\d+\s+/)) {
                    if (horseStartIndex === -1) {
                        horseStartIndex = i;
                    }
                    horseEndIndex = i;
                }
            }

            console.log(`🐎 馬情報セクション: ${horseStartIndex} - ${horseEndIndex}`);

            // 馬情報をパース（複数行形式対応）
            if (horseStartIndex !== -1) {
                let currentHorse = null;

                for (let i = horseStartIndex; i <= horseEndIndex; i++) {
                    const line = raceLines[i];
                    console.log(`🔍 馬情報行チェック: "${line}"`);

                    // 1行形式の馬情報（◎ 11 オールスターズ 本命 総合評価:★★★ 累積スコア: 88pt 特徴量重要度 安定性91% 能力上位性90% 展開利81%）
                    const singleLineMatch = line.match(/^([◎○▲△×])\s+(\d+)\s+(\S+)\s+.*?累積スコア[:\s]*(\d+)pt.*?安定性(\d+(?:\.\d+)?)%.*?能力上位性(\d+(?:\.\d+)?)%.*?展開利(\d+(?:\.\d+)?)%/);
                    if (singleLineMatch) {
                        // 前の馬がある場合は保存
                        if (currentHorse) {
                            race.horses.push(currentHorse);
                            console.log(`🐴 馬追加: ${currentHorse.mark}${currentHorse.number} ${currentHorse.name} (${currentHorse.score}pt)`);
                        }

                        // 1行形式の馬情報を完全に処理して即座に保存
                        const horseData = {
                            mark: singleLineMatch[1],
                            number: parseInt(singleLineMatch[2]),
                            name: singleLineMatch[3],
                            score: parseInt(singleLineMatch[4]),
                            features: {
                                stability: parseFloat(singleLineMatch[5]),
                                ability: parseFloat(singleLineMatch[6]),
                                positioning: parseFloat(singleLineMatch[7])
                            }
                        };
                        race.horses.push(horseData);
                        console.log(`🐴 1行形式馬追加: ${horseData.mark}${horseData.number} ${horseData.name} (${horseData.score}pt) 安定性${horseData.features.stability}%`);
                        currentHorse = null; // リセット
                        continue;
                    }

                    // 複数行形式の馬の基本情報行（◎ 11 オールスターズ 本命）
                    const horseBasicMatch = line.match(/^([◎○▲△×])\s+(\d+)\s+(\S+)\s+(.*)/);
                    if (horseBasicMatch) {
                        // 前の馬がある場合は保存
                        if (currentHorse) {
                            race.horses.push(currentHorse);
                            console.log(`🐴 馬追加: ${currentHorse.mark}${currentHorse.number} ${currentHorse.name} (${currentHorse.score}pt)`);
                        }

                        // 新しい馬の情報を開始
                        currentHorse = {
                            mark: horseBasicMatch[1],
                            number: parseInt(horseBasicMatch[2]),
                            name: horseBasicMatch[3],
                            score: 0,
                            features: {}
                        };
                        console.log(`🆕 新しい馬開始: ${currentHorse.mark}${currentHorse.number} ${currentHorse.name}`);
                        continue;
                    }

                    // 累積スコア行
                    const scoreMatch = line.match(/累積スコア[:\s]*(\d+)pt/);
                    if (scoreMatch && currentHorse) {
                        currentHorse.score = parseInt(scoreMatch[1]);
                        console.log(`📊 スコア設定: ${currentHorse.name} = ${currentHorse.score}pt`);
                        continue;
                    }

                    // 特徴量行（個別行形式）
                    const stabilityMatch = line.match(/安定性(\d+(?:\.\d+)?)%/);
                    if (stabilityMatch && currentHorse) {
                        currentHorse.features.stability = parseFloat(stabilityMatch[1]);
                        continue;
                    }

                    const abilityMatch = line.match(/能力上位性(\d+(?:\.\d+)?)%/);
                    if (abilityMatch && currentHorse) {
                        currentHorse.features.ability = parseFloat(abilityMatch[1]);
                        continue;
                    }

                    const positioningMatch = line.match(/展開利(\d+(?:\.\d+)?)%/);
                    if (positioningMatch && currentHorse) {
                        currentHorse.features.positioning = parseFloat(positioningMatch[1]);
                        continue;
                    }
                }

                // 最後の馬を保存
                if (currentHorse) {
                    race.horses.push(currentHorse);
                    console.log(`🐴 馬追加: ${currentHorse.mark}${currentHorse.number} ${currentHorse.name} (${currentHorse.score}pt)`);
                }
            }

            // 戦略情報をパース（簡略版）
            const strategyText = raceLines.join(' ');

            // Strategy A
            const strategyAMatch = strategyText.match(/少点数的中型[^バ高]*?AI予測(\d+)%/);
            if (strategyAMatch) {
                race.aiPredictions.strategyA = parseInt(strategyAMatch[1]);
                race.strategyA = [`馬単 (3点)`];
            }

            // Strategy B
            const strategyBMatch = strategyText.match(/バランス型[^高]*?AI予測(\d+)%/);
            if (strategyBMatch) {
                race.aiPredictions.strategyB = parseInt(strategyBMatch[1]);
                race.strategyB = [`馬単組み合わせ (11点)`];
            }

            // Strategy C
            const strategyCMatch = strategyText.match(/高配当追求型[^A-Z]*?AI予測(\d+)%/);
            if (strategyCMatch) {
                race.aiPredictions.strategyC = parseInt(strategyCMatch[1]);
                race.strategyC = [`馬単高配当組み合わせ (14点)`];
            }

            // 連下候補馬・押さえ候補馬をパース
            const fullText = raceLines.join(' ');
            console.log(`🔍 候補馬検索対象テキスト: ${fullText}`);

            // 連下候補馬を抽出（「連下候補馬: 1,2,3,4番」形式）
            const renzuMatch = fullText.match(/連下候補馬[:\s]*([0-9,]+)番?/);
            if (renzuMatch) {
                race.renzuCandidates = renzuMatch[1].split(',').map(n => parseInt(n.trim())).filter(n => !isNaN(n));
                console.log(`🎯 連下候補馬抽出成功: [${race.renzuCandidates.join(',')}]`);
            } else {
                console.warn(`⚠️ 連下候補馬が見つかりません`);
            }

            // 押さえ候補馬を抽出（「押さえ候補馬: 7,8番」形式）
            const osaeMatch = fullText.match(/押さえ候補馬[:\s]*([0-9,]+)番?/);
            if (osaeMatch) {
                race.osaeCandidates = osaeMatch[1].split(',').map(n => parseInt(n.trim())).filter(n => !isNaN(n));
                console.log(`🎯 押さえ候補馬抽出成功: [${race.osaeCandidates.join(',')}]`);
            } else {
                console.warn(`⚠️ 押さえ候補馬が見つかりません`);
            }

            console.log(`✅ レース完成: ${race.title} (馬${race.horses.length}頭, 連下${race.renzuCandidates.length}頭, 押さえ${race.osaeCandidates.length}頭)`);
            return race;
        }

        // JSON生成処理（詳細データ対応）
        function generateJsonData(raceDate, track, races) {
            return {
                raceDate: raceDate,
                track: track,
                totalRaces: races.length,
                races: races.map((race, index) => ({
                    raceNumber: `${index + 1}R`,
                    raceName: race.raceName || race.title,
                    tier: index < Math.floor(races.length * 0.75) ? "premium" : (index === races.length - 2 ? "free" : "standard"),
                    isMainRace: index === races.length - 2,
                    displayOrder: index + 1,
                    raceInfo: {
                        title: race.title,
                        raceName: race.raceName,
                        startTime: race.startTime,
                        distance: race.distance,
                        horseCount: race.horseCount,
                        date: raceDate,
                        track: track
                    },
                    horses: {
                        main: race.horses.find(h => h.mark === '◎') || race.horses[0],
                        sub: race.horses.find(h => h.mark === '○') || race.horses[1],
                        sub1: race.horses.find(h => h.mark === '▲') || race.horses[2],
                        sub2: race.horses[3],
                        allHorses: [
                            // 主要馬
                            ...race.horses.map(horse => ({
                                ...horse,
                                type: horse.mark === '◎' ? '本命' :
                                      horse.mark === '○' ? '対抗' :
                                      horse.mark === '▲' ? '単穴' :
                                      horse.mark === '△' ? '連下' : 'other'
                            })),
                            // 連下候補馬を追加
                            ...race.renzuCandidates.filter(num => !race.horses.some(h => h.number === num))
                                .map(num => ({
                                    mark: '△',
                                    number: num,
                                    name: `連下候補${num}`,
                                    score: 0,
                                    features: {},
                                    type: '連下'
                                })),
                            // 押さえ候補馬を追加
                            ...race.osaeCandidates.filter(num => !race.horses.some(h => h.number === num) && !race.renzuCandidates.includes(num))
                                .map(num => ({
                                    mark: '×',
                                    number: num,
                                    name: `押さえ候補${num}`,
                                    score: 0,
                                    features: {},
                                    type: '押さえ'
                                }))
                        ]
                    },
                    candidates: {
                        renzu: race.renzuCandidates,
                        osae: race.osaeCandidates
                    },
                    strategies: {
                        safe: {
                            title: '🎯 少点数的中型モデル',
                            bets: race.strategyA,
                            aiPrediction: race.aiPredictions.strategyA
                        },
                        balance: {
                            title: '⚖️ バランス型モデル',
                            bets: race.strategyB,
                            aiPrediction: race.aiPredictions.strategyB
                        },
                        aggressive: {
                            title: '🚀 高配当追求型モデル',
                            bets: race.strategyC,
                            aiPrediction: race.aiPredictions.strategyC
                        }
                    }
                }))
            };
        }
    </script>

    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #0f172a;
            color: #e2e8f0;
            min-height: 100vh;
        }

        .header-section {
            text-align: center;
            margin-bottom: 40px;
        }

        .ai-badge {
            display: inline-flex;
            align-items: center;
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 20px;
            padding: 8px 16px;
            margin-bottom: 20px;
        }

        .pulse {
            width: 8px;
            height: 8px;
            background: #10b981;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .form-section {
            background: rgba(30, 41, 59, 0.5);
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            color: #94a3b8;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px;
            background: rgba(15, 23, 42, 0.8);
            border: 1px solid #334155;
            border-radius: 6px;
            color: #e2e8f0;
            font-size: 14px;
        }

        .form-group textarea {
            font-family: monospace;
            resize: vertical;
        }

        .format-example {
            background: rgba(15, 23, 42, 0.9);
            border: 1px solid #334155;
            border-radius: 6px;
            padding: 15px;
            font-size: 12px;
            color: #94a3b8;
            overflow-x: auto;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            margin-top: 30px;
        }

        .btn-primary, .btn-success, .btn-download {
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
        }

        .btn-success {
            background: #10b981;
            color: white;
        }

        .btn-download {
            background: #8b5cf6;
            color: white;
        }

        .btn-primary:hover, .btn-success:hover, .btn-download:hover {
            transform: translateY(-1px);
            opacity: 0.9;
        }

        .preview-section, .json-section {
            background: rgba(30, 41, 59, 0.5);
            border-radius: 12px;
            padding: 30px;
            margin-top: 30px;
        }

        .race-preview {
            border: 1px solid #334155;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            background: rgba(15, 23, 42, 0.3);
        }

        .race-details {
            background: rgba(30, 41, 59, 0.5);
            border-radius: 6px;
            padding: 15px;
            margin: 15px 0;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
        }

        .race-details div {
            font-size: 14px;
            color: #cbd5e1;
        }

        .ai-prediction {
            margin-top: 8px;
            padding: 4px 8px;
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 4px;
            font-size: 12px;
            color: #10b981;
            font-weight: 600;
        }

        .candidates {
            margin-top: 15px;
            padding: 10px;
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 6px;
        }

        .candidates h4 {
            margin: 0 0 8px 0;
            color: #3b82f6;
            font-size: 14px;
        }

        .candidates div {
            font-size: 13px;
            color: #cbd5e1;
        }

        .strategies {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .strategy {
            background: rgba(15, 23, 42, 0.5);
            border-radius: 6px;
            padding: 15px;
        }

        .strategy h4 {
            margin: 0 0 10px 0;
            color: #10b981;
        }

        .bets {
            font-family: monospace;
            font-size: 12px;
            line-height: 1.6;
        }

        .horses {
            margin-top: 20px;
            font-size: 14px;
        }

        .horse-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .horse-item {
            padding: 8px 12px;
            background: rgba(30, 41, 59, 0.3);
            border: 1px solid #334155;
            border-radius: 6px;
            margin-bottom: 5px;
        }

        .horse-basic {
            font-weight: 600;
            color: #e2e8f0;
            margin-bottom: 4px;
        }

        .horse-features {
            font-size: 12px;
            color: #94a3b8;
            line-height: 1.4;
        }

        #json-output {
            background: rgba(15, 23, 42, 0.9);
            border: 1px solid #334155;
            border-radius: 6px;
            padding: 15px;
            font-size: 11px;
            overflow-x: auto;
            max-height: 400px;
            overflow-y: auto;
        }
    </style>
</BaseLayout>