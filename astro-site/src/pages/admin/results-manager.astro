---
export const prerender = true;
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title="的中結果管理システム" description="毎日の的中結果を入力してトップページ用データを自動生成">
    <div class="admin-container">
        <div class="admin-header">
            <h1>🎯 的中結果管理システム</h1>
            <p style="font-size: 1.1rem; margin-bottom: 25px;">昨日の的中結果をアーカイブシステムに自動登録するツールです</p>

            <!-- 使い方手順 -->
            <div style="background: rgba(59, 130, 246, 0.1); border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 12px; padding: 25px; margin-bottom: 30px; text-align: left;">
                <h2 style="color: #3b82f6; margin-bottom: 15px; font-size: 1.3rem;">📖 使い方手順</h2>

                <div style="display: grid; gap: 15px;">
                    <div style="display: flex; gap: 15px; align-items: flex-start;">
                        <div style="background: linear-gradient(135deg, #3b82f6, #1d4ed8); color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; flex-shrink: 0;">1</div>
                        <div>
                            <strong style="color: #60a5fa; font-size: 1rem;">昨日の結果データを貼り付け</strong>
                            <p style="color: var(--accent-text-color); margin-top: 5px; font-size: 0.9rem;">
                                競馬結果データ（例：９/８川崎競馬予想 有料版　結果 １Ｒ ４-６馬単　1.900円 的中！...）を下の「昨日の的中結果入力」欄に貼り付け
                            </p>
                        </div>
                    </div>

                    <div style="display: flex; gap: 15px; align-items: flex-start;">
                        <div style="background: linear-gradient(135deg, #3b82f6, #1d4ed8); color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; flex-shrink: 0;">2</div>
                        <div>
                            <strong style="color: #60a5fa; font-size: 1rem;">「📈 解析実行」ボタンをクリック</strong>
                            <p style="color: var(--accent-text-color); margin-top: 5px; font-size: 0.9rem;">
                                データが自動解析され、プレビューが表示されます
                            </p>
                        </div>
                    </div>

                    <div style="display: flex; gap: 15px; align-items: flex-start;">
                        <div style="background: linear-gradient(135deg, #3b82f6, #1d4ed8); color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; flex-shrink: 0;">3</div>
                        <div>
                            <strong style="color: #60a5fa; font-size: 1rem;">レース名を一括入力</strong>
                            <p style="color: var(--accent-text-color); margin-top: 5px; font-size: 0.9rem;">
                                premium-predictionsページから全レース名をコピーして、「⚡ 一括入力」欄に貼り付け →「⚡ 一括適用」ボタンをクリック
                            </p>
                        </div>
                    </div>

                    <div style="display: flex; gap: 15px; align-items: flex-start;">
                        <div style="background: linear-gradient(135deg, #3b82f6, #1d4ed8); color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; flex-shrink: 0;">4</div>
                        <div>
                            <strong style="color: #60a5fa; font-size: 1rem;">戦略・点数を選択</strong>
                            <p style="color: var(--accent-text-color); margin-top: 5px; font-size: 0.9rem;">
                                各レースの戦略（少点数/バランス/高配当）と点数を選択
                            </p>
                        </div>
                    </div>

                    <div style="display: flex; gap: 15px; align-items: flex-start;">
                        <div style="background: linear-gradient(135deg, #3b82f6, #1d4ed8); color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; flex-shrink: 0;">5</div>
                        <div>
                            <strong style="color: #60a5fa; font-size: 1rem;">アーカイブJSON生成 → コピー</strong>
                            <p style="color: var(--accent-text-color); margin-top: 5px; font-size: 0.9rem;">
                                「🏆 アーカイブJSON生成」ボタンをクリック → 生成されたJSONコードを「📋 コピー」
                            </p>
                        </div>
                    </div>

                    <div style="display: flex; gap: 15px; align-items: flex-start;">
                        <div style="background: linear-gradient(135deg, #10b981, #059669); color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; flex-shrink: 0;">6</div>
                        <div style="flex: 1;">
                            <strong style="color: #10b981; font-size: 1rem;">GitHubで編集して本番反映</strong>
                            <p style="color: var(--accent-text-color); margin-top: 5px; font-size: 0.9rem; margin-bottom: 10px;">
                                下の「🌐 GitHubで編集（本番反映）」ボタンをクリック → archiveResults.jsonが開きます → 該当月のデータ内に貼り付け → 下部の「Commit changes」で本番反映完了！
                            </p>
                            <a href="https://github.com/apol0510/nankan-analytics/edit/main/astro-site/src/data/archiveResults.json"
                               target="_blank"
                               style="display: inline-block; background: linear-gradient(135deg, #10b981, #059669); color: white; padding: 10px 20px; border-radius: 8px; text-decoration: none; font-weight: 600; transition: all 0.3s; margin-top: 5px;">
                                🌐 GitHubで編集（本番反映）
                            </a>
                        </div>
                    </div>
                </div>

                <div style="margin-top: 20px; padding: 15px; background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3); border-radius: 8px;">
                    <strong style="color: #f59e0b;">💡 重要ポイント</strong>
                    <ul style="margin-top: 10px; padding-left: 20px; color: var(--accent-text-color); font-size: 0.9rem;">
                        <li style="margin-bottom: 5px;">GitHubエディタで archiveResults.json を開いたら、既存の月データ内の適切な日付に追加してください</li>
                        <li style="margin-bottom: 5px;">編集後、ページ下部の「Commit changes」ボタンをクリックすると本番反映されます（1-2分後）</li>
                        <li style="margin-bottom: 5px;">トップページ・standard-predictions・archive各ページに自動反映されます</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- 昨日の結果入力 -->
        <div class="input-section">
            <h2>📊 昨日の的中結果入力</h2>
            <div class="input-group">
                <label for="dailyData">結果データを貼り付けてください：</label>
                <textarea
                    id="dailyData"
                    placeholder="９/８川崎競馬予想 有料版　結果
１Ｒ ４-６馬単　1.900円 的中！
２Ｒ ７-12馬単　1.990円 的中！
..."
                    rows="15"
                ></textarea>
                <button onclick="parseDailyData()" class="parse-btn">📈 解析実行</button>
            </div>
        </div>

        <!-- プレビューセクション -->
        <div class="preview-section">
            <h2>👀 プレビュー</h2>
            <div id="daily-stats" class="stats-display"></div>
            <div id="daily-results" class="results-display"></div>
        </div>

        <!-- アーカイブJSON生成セクション -->
        <div class="output-section" style="margin-top: 30px;">
            <h2>🏆 アーカイブJSON生成</h2>
            <p>昨日の結果から <code>archiveResults.json</code> 用のデータを生成します</p>

            <!-- 追加情報入力フォーム -->
            <div class="archive-input-section">
                <h3 style="color: var(--primary-color); margin-bottom: 15px;">📝 レース詳細情報を入力</h3>

                <!-- 一括入力セクション -->
                <div style="background: rgba(16, 185, 129, 0.1); border: 1px solid rgba(16, 185, 129, 0.3); border-radius: 8px; padding: 20px; margin-bottom: 25px;">
                    <h4 style="color: #10b981; margin-bottom: 10px; font-size: 1rem;">⚡ 一括入力（推奨）</h4>
                    <p style="color: var(--accent-text-color); font-size: 0.9rem; margin-bottom: 15px;">
                        premium-predictionsページから全レース名をコピーして貼り付けてください
                    </p>
                    <textarea
                        id="bulkRaceNames"
                        placeholder="premium-predictionsページから全レース名をコピーしてそのまま貼り付けてください

【対応形式1】複数行形式:
1R
２歳(六) 未受賞
第1レース
▼
2R
２歳(五)
第2レース
...

【対応形式2】1行形式:
1R ３歳(六)
2R ローズデビュー
3R ローズデビュー
4R Ｃ２(四)(五)
..."
                        rows="8"
                        style="width: 100%; background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(148, 163, 184, 0.3); border-radius: 6px; padding: 12px; color: var(--body-text-color); font-family: monospace; font-size: 0.9rem;"
                    ></textarea>
                    <button onclick="applyBulkRaceNames()" class="parse-btn" style="margin-top: 10px; background: linear-gradient(135deg, #10b981, #059669);">
                        ⚡ 一括適用
                    </button>
                </div>

                <p style="color: var(--accent-text-color); margin-bottom: 20px; font-size: 0.9rem;">
                    各レースの詳細情報（券種は馬単固定、戦略・点数を選択）
                </p>

                <div id="raceDetailsForm" class="race-details-grid">
                    <!-- JavaScriptで動的生成 -->
                </div>

                <button onclick="generateArchiveJSON()" class="parse-btn" style="margin-top: 20px;">
                    🏆 アーカイブJSON生成
                </button>
            </div>

            <div class="code-output" style="margin-top: 20px;">
                <pre id="archiveCode">// 昨日の結果を解析後、レース情報を入力してアーカイブJSON生成ボタンを押してください</pre>
                <button onclick="copyArchiveToClipboard()" class="copy-btn">📋 コピー</button>
            </div>
        </div>
    </div>

    <style>
        .admin-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            color: var(--body-text-color);
        }

        .admin-header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px;
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(147, 51, 234, 0.1) 100%);
            border-radius: 16px;
            border: 1px solid rgba(59, 130, 246, 0.2);
        }

        .admin-header h1 {
            font-size: 2.5rem;
            font-weight: 800;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .input-section {
            margin-bottom: 40px;
            padding: 30px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 16px;
            border: 1px solid rgba(148, 163, 184, 0.1);
        }

        .input-section h2 {
            color: var(--primary-color);
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 20px;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .input-group label {
            font-weight: 600;
            font-size: 1.1rem;
        }

        textarea {
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(148, 163, 184, 0.2);
            border-radius: 12px;
            padding: 20px;
            color: var(--body-text-color);
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            resize: vertical;
        }

        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .parse-btn, .copy-btn {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            align-self: flex-start;
        }

        .parse-btn:hover, .copy-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(59, 130, 246, 0.3);
        }

        .preview-section {
            margin-bottom: 40px;
            padding: 30px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 16px;
            border: 1px solid rgba(148, 163, 184, 0.1);
        }

        .preview-section h2 {
            color: var(--primary-color);
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 20px;
        }

        .preview-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .tab-btn {
            background: rgba(148, 163, 184, 0.1);
            color: var(--body-text-color);
            border: 1px solid rgba(148, 163, 184, 0.2);
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.3) 100%);
            color: #10b981;
            border-color: rgba(16, 185, 129, 0.3);
        }

        .stats-display {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(34, 197, 94, 0.05) 100%);
            border: 1px solid rgba(16, 185, 129, 0.2);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 800;
            color: #10b981;
            margin-bottom: 5px;
        }

        .stat-label {
            color: var(--body-text-color);
            font-weight: 600;
            font-size: 0.9rem;
        }

        .results-display {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 10px;
            max-width: 800px;
        }

        .race-result {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 12px 8px;
            border-radius: 8px;
            font-size: 0.85rem;
        }

        .race-result.win {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(16, 185, 129, 0.1) 100%);
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .race-result.lose {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
        }

        .race-number {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .race-icon {
            font-size: 1.2rem;
            margin-bottom: 3px;
        }

        .race-payout {
            font-weight: 700;
            font-size: 0.75rem;
        }

        .output-section {
            padding: 30px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 16px;
            border: 1px solid rgba(148, 163, 184, 0.1);
        }

        .output-section h2 {
            color: var(--primary-color);
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 15px;
        }

        .code-output {
            position: relative;
        }

        .code-output pre {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(148, 163, 184, 0.2);
            border-radius: 8px;
            padding: 20px;
            color: #e2e8f0;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            line-height: 1.5;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
            max-height: 400px;
            overflow-y: auto;
        }

        .copy-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 8px 16px;
            font-size: 0.85rem;
        }

        code {
            background: rgba(59, 130, 246, 0.1);
            color: var(--primary-color);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }

        /* アーカイブセクション追加スタイル */
        .archive-input-section {
            background: rgba(59, 130, 246, 0.05);
            border: 1px solid rgba(59, 130, 246, 0.2);
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
        }

        .race-details-grid {
            display: grid;
            gap: 20px;
        }

        .race-detail-item {
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(148, 163, 184, 0.2);
            border-radius: 8px;
            padding: 15px;
        }

        .race-detail-item.hit {
            border-color: rgba(16, 185, 129, 0.4);
            background: rgba(16, 185, 129, 0.05);
        }

        .race-detail-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            font-weight: 600;
            color: var(--body-text-color);
        }

        .race-detail-inputs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 12px;
        }

        .input-field {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .input-field label {
            font-size: 0.85rem;
            color: var(--accent-text-color);
            font-weight: 500;
        }

        .input-field input,
        .input-field select {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(148, 163, 184, 0.3);
            border-radius: 6px;
            padding: 8px 12px;
            color: var(--body-text-color);
            font-size: 0.9rem;
        }

        .input-field input:focus,
        .input-field select:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        @media (max-width: 768px) {
            .admin-container {
                padding: 15px;
            }

            .admin-header h1 {
                font-size: 2rem;
            }

            .stats-display {
                grid-template-columns: repeat(2, 1fr);
            }

            .results-display {
                grid-template-columns: repeat(4, 1fr);
            }

            .race-detail-inputs {
                grid-template-columns: 1fr;
            }
        }
    </style>

    <script is:inline>
        let dailyData = null;

        // 全角・半角数字の正規化
        function normalizeText(text) {
            return text
                .replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xFEE0))
                .replace(/[Ｒｒ]/g, 'R')
                .replace(/[，、]/g, ',')
                .replace(/[．。]/g, '.')
                .replace(/\s+/g, ' ')
                .trim();
        }

        // 金額抽出（1.900円 → 1900）
        function extractPayout(text) {
            const match = text.match(/([0-9,]+(?:\.[0-9]+)?)円/);
            if (match) {
                return parseInt(match[1].replace(/[,\.]/g, ''));
            }
            return 0;
        }

        // レース番号抽出（１Ｒ → 1）
        function extractRaceNumber(text) {
            const normalized = normalizeText(text);
            const match = normalized.match(/(\d+)R/);
            return match ? parseInt(match[1]) : null;
        }

        // 日付抽出（９/８川崎競馬 → 9/8）
        function extractDate(text) {
            const normalized = normalizeText(text);
            const match = normalized.match(/(\d+)\/(\d+)/);
            if (match) {
                return `${parseInt(match[1])}/${parseInt(match[2])}`;
            }
            return null;
        }

        // 競馬場抽出（９/８川崎競馬 → 川崎競馬）
        function extractTrack(text) {
            const match = text.match(/(川崎|大井|船橋|浦和)競馬/);
            return match ? match[1] + '競馬' : '川崎競馬';
        }

        // 昨日データ解析
        function parseDailyData() {
            const input = document.getElementById('dailyData').value;
            if (!input.trim()) {
                alert('データを入力してください');
                return;
            }

            const lines = input.split('\n').filter(line => line.trim());
            const headerLine = lines[0];

            const date = extractDate(headerLine);
            const track = extractTrack(headerLine);

            if (!date) {
                alert('日付を正しく認識できませんでした');
                return;
            }

            // 12レース分の結果を初期化
            const results = [];
            for (let i = 1; i <= 12; i++) {
                results.push({ race: `${i}R`, result: 'lose', payout: 0 });
            }

            let totalPayout = 0;
            let hitCount = 0;

            // 的中レースを解析
            for (let i = 1; i < lines.length; i++) {
                const line = lines[i];
                const raceNum = extractRaceNumber(line);
                const payout = extractPayout(line);

                if (raceNum && raceNum >= 1 && raceNum <= 12 && line.includes('的中')) {
                    results[raceNum - 1] = {
                        race: `${raceNum}R`,
                        result: 'win',
                        payout: payout
                    };
                    totalPayout += payout;
                    hitCount++;
                }
            }

            const hitRate = ((hitCount / 12) * 100).toFixed(1);
            const purchaseAmount = 12 * 1000; // 🛡️ 復活防止: 12レース × 1000円（計算式統一）
            const recoveryRate = Math.round((totalPayout / purchaseAmount) * 100);

            dailyData = {
                date: date,
                track: track,
                hitRate: parseFloat(hitRate),
                hitCount: hitCount,
                totalCount: 12,
                totalPayout: totalPayout,
                recoveryRate: recoveryRate,
                results: results
            };

            displayDailyPreview();
            generateCode();
        }


        // 昨日プレビュー表示
        function displayDailyPreview() {
            if (!dailyData) return;

            const statsHtml = `
                <div class="stat-card">
                    <div class="stat-value">${dailyData.hitRate}%</div>
                    <div class="stat-label">的中率 (${dailyData.hitCount}/${dailyData.totalCount})</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">¥${dailyData.totalPayout.toLocaleString()}</div>
                    <div class="stat-label">配当合計</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${dailyData.recoveryRate}%</div>
                    <div class="stat-label">回収率</div>
                </div>
            `;

            const resultsHtml = dailyData.results.map(result => `
                <div class="race-result ${result.result}">
                    <div class="race-number">${result.race}</div>
                    <div class="race-icon">${result.result === 'win' ? '⭕' : '❌'}</div>
                    ${result.result === 'win' ? `<div class="race-payout">¥${result.payout.toLocaleString()}</div>` : ''}
                </div>
            `).join('');

            document.getElementById('daily-stats').innerHTML = statsHtml;
            document.getElementById('daily-results').innerHTML = resultsHtml;

            // アーカイブ用のレース詳細フォームを生成
            generateRaceDetailsForm();
        }

        // ========== アーカイブJSON生成機能 ==========

        // レース詳細入力フォームの生成
        function generateRaceDetailsForm() {
            if (!dailyData) return;

            const formHTML = dailyData.results.map((r, index) => {
                const raceNum = index + 1;
                const isHit = r.result === 'win';

                return `
                    <div class="race-detail-item ${isHit ? 'hit' : ''}">
                        <div class="race-detail-header">
                            <span>${isHit ? '✅' : '❌'}</span>
                            <span>${raceNum}R</span>
                            ${isHit ? `<span style="color: #10b981;">的中 ¥${r.payout.toLocaleString()}</span>` : '<span style="color: #64748b;">不的中</span>'}
                        </div>
                        ${isHit ? `
                            <div class="race-detail-inputs">
                                <div class="input-field">
                                    <label>レース名 *</label>
                                    <input type="text" id="raceName_${raceNum}" placeholder="例：2歳新馬" style="width: 100%;" />
                                </div>
                                <div class="input-field">
                                    <label>戦略 *</label>
                                    <select id="strategy_${raceNum}" onchange="autoFillBetPoints(${raceNum})">
                                        <option value="">選択してください</option>
                                        <option value="少点数的中型" data-points="3">少点数的中型（3点）</option>
                                        <option value="バランス型" data-points="11">バランス型（8-11点）</option>
                                        <option value="高配当追求型" data-points="17">高配当追求型（14-17点）</option>
                                    </select>
                                </div>
                                <div class="input-field">
                                    <label>買い目点数 *</label>
                                    <input type="number" id="betPoints_${raceNum}" placeholder="自動入力 or 手動" min="1" />
                                </div>
                            </div>
                        ` : '<p style="color: #64748b; text-align: center; padding: 10px;">不的中のため詳細入力不要</p>'}
                    </div>
                `;
            }).join('');

            document.getElementById('raceDetailsForm').innerHTML = formHTML;
        }

        // 戦略選択時に自動で点数入力
        function autoFillBetPoints(raceNum) {
            const strategySelect = document.getElementById(`strategy_${raceNum}`);
            const betPointsInput = document.getElementById(`betPoints_${raceNum}`);
            const selectedOption = strategySelect.options[strategySelect.selectedIndex];
            const points = selectedOption.getAttribute('data-points');

            if (points) {
                betPointsInput.value = points;
            }
        }

        // 一括レース名適用
        function applyBulkRaceNames() {
            const bulkInput = document.getElementById('bulkRaceNames').value;
            if (!bulkInput.trim()) {
                alert('レース名を入力してください');
                return;
            }

            const lines = bulkInput.split('\n').map(line => line.trim()).filter(line => line);
            let appliedCount = 0;
            let currentRaceNum = null;

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];

                // 🆕 新形式対応: 1行形式（例: "1R ３歳(六)"）
                const oneLineMatch = line.match(/^(\d+)R\s+(.+)$/);
                if (oneLineMatch) {
                    const raceNum = parseInt(oneLineMatch[1]);
                    const raceName = oneLineMatch[2].trim();
                    const input = document.getElementById(`raceName_${raceNum}`);
                    if (input && raceName) {
                        input.value = raceName;
                        appliedCount++;
                        console.log(`✅ ${raceNum}R: ${raceName}`);
                    }
                    continue;
                }

                // 既存形式対応: 複数行形式（1R改行、レース名改行...）
                const raceNumMatch = line.match(/^(\d+)R$/);
                if (raceNumMatch) {
                    currentRaceNum = parseInt(raceNumMatch[1]);
                    continue;
                }

                // 「第Xレース」「メインレース」「▼」などをスキップ
                if (line.match(/^第\d+レース$/) ||
                    line === 'メインレース' ||
                    line === '▼' ||
                    line.includes('▼')) {
                    continue;
                }

                // レース名として認識（レース番号の直後の有効な行）
                if (currentRaceNum && line) {
                    const input = document.getElementById(`raceName_${currentRaceNum}`);
                    if (input) {
                        // 全角数字・記号をそのまま保持
                        input.value = line;
                        appliedCount++;
                        console.log(`✅ ${currentRaceNum}R: ${line}`);
                    }
                    currentRaceNum = null; // 次のレースへ
                }
            }

            if (appliedCount > 0) {
                alert(`✅ ${appliedCount}レースのレース名を適用しました`);
            } else {
                alert('⚠️ レース名を適用できませんでした。\n\npremium-predictionsページからレース名をそのままコピーしてください。');
            }
        }

        // アーカイブJSON生成
        function generateArchiveJSON() {
            if (!dailyData) {
                alert('まず昨日の結果を解析してください');
                return;
            }

            // 日付を年/月/日に分解
            const dateParts = dailyData.date.split('/');
            const year = '2025';  // 固定（必要に応じて変更）
            const month = dateParts[0].padStart(2, '0');
            const day = dateParts[1].padStart(2, '0');

            // 競馬場名から「競馬」を削除
            const venue = dailyData.track.replace('競馬', '');

            // レース配列を生成
            const races = [];
            let hasError = false;

            for (let i = 0; i < dailyData.results.length; i++) {
                const raceNum = i + 1;
                const result = dailyData.results[i];

                if (result.result === 'win') {
                    // 的中レースは詳細情報必須
                    const raceName = document.getElementById(`raceName_${raceNum}`)?.value;
                    const strategy = document.getElementById(`strategy_${raceNum}`)?.value;
                    const betPoints = document.getElementById(`betPoints_${raceNum}`)?.value;

                    if (!raceName || !strategy || !betPoints) {
                        alert(`${raceNum}Rの詳細情報を入力してください（レース名・戦略・点数）`);
                        hasError = true;
                        break;
                    }

                    races.push({
                        raceNumber: `${raceNum}R`,
                        raceName: raceName,
                        betType: "馬単",
                        strategy: strategy,
                        betPoints: parseInt(betPoints),
                        hit: true,
                        payout: result.payout
                    });
                } else {
                    // 不的中レースはシンプルに
                    races.push({
                        raceNumber: `${raceNum}R`,
                        raceName: "-",
                        betType: "馬単",
                        strategy: "-",
                        betPoints: 0,
                        hit: false,
                        payout: 0
                    });
                }
            }

            if (hasError) return;

            // パーフェクト的中判定
            const perfectHit = dailyData.hitCount === dailyData.totalCount;

            // JSON構造生成
            const archiveJSON = {
                [day]: {
                    venue: venue,
                    totalRaces: dailyData.totalCount,
                    hitRaces: dailyData.hitCount,
                    perfectHit: perfectHit,
                    totalPayout: dailyData.totalPayout,
                    races: races
                }
            };

            // 整形して表示
            const jsonString = JSON.stringify(archiveJSON, null, 2);
            const output = `// ${year}年${parseInt(month)}月分のarchiveResults.jsonに追加してください
// 以下を "2025" > "${month}" の中に追加：

${jsonString}

// 使用方法：
// 1. src/data/archiveResults.json を開く
// 2. "2025" > "${month}" セクションを探す
// 3. 上記のJSONを該当月の中に追加
// 4. 既存のカンマ区切りに注意してください`;

            document.getElementById('archiveCode').textContent = output;
        }

        // アーカイブJSONコピー
        async function copyArchiveToClipboard() {
            const code = document.getElementById('archiveCode').textContent;
            if (code && !code.includes('昨日の結果を解析後')) {
                try {
                    await navigator.clipboard.writeText(code);
                    alert('アーカイブJSONをクリップボードにコピーしました！');
                } catch (err) {
                    console.error('コピーに失敗しました:', err);
                    alert('コピーに失敗しました。手動でコピーしてください。');
                }
            } else {
                alert('生成されたJSONがありません。まずアーカイブJSON生成を実行してください。');
            }
        }

    </script>
</BaseLayout>