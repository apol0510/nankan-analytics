---
import BaseLayout from '../../layouts/BaseLayout.astro';

const title = 'ポイント交換申請管理 | NANKANアナリティクス';
---

<BaseLayout title={title}>
    <div style="max-width: 1400px; margin: 0 auto; padding: 2rem;">
        <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(16, 185, 129, 0.1) 100%); border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 16px; padding: 2rem; margin-bottom: 2rem;">
            <h1 style="color: #fbbf24; margin-bottom: 0.5rem; font-size: 1.8rem;">🎁 ポイント交換申請管理</h1>
            <p style="color: #cbd5e1; font-size: 1rem;">Airtableに保存された申請データを確認・処理できます</p>
        </div>

        <!-- 統計カード -->
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
            <div class="stat-card" style="background: rgba(59, 130, 246, 0.1); border: 1px solid rgba(59, 130, 246, 0.3);">
                <div class="stat-value" id="total-requests">-</div>
                <div class="stat-label">総申請数</div>
            </div>
            <div class="stat-card" style="background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3);">
                <div class="stat-value" id="pending-requests">-</div>
                <div class="stat-label">未処理</div>
            </div>
            <div class="stat-card" style="background: rgba(16, 185, 129, 0.1); border: 1px solid rgba(16, 185, 129, 0.3);">
                <div class="stat-value" id="completed-requests">-</div>
                <div class="stat-label">処理完了</div>
            </div>
        </div>

        <!-- フィルター -->
        <div style="background: rgba(30, 41, 59, 0.5); border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 12px; padding: 1.5rem; margin-bottom: 2rem;">
            <div style="display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;">
                <label style="color: #cbd5e1; display: flex; align-items: center; gap: 0.5rem;">
                    <span>ステータス:</span>
                    <select id="status-filter" style="padding: 0.5rem 1rem; background: rgba(15, 23, 42, 0.8); color: #e2e8f0; border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 8px; cursor: pointer;">
                        <option value="all">全て</option>
                        <option value="Pending">未処理</option>
                        <option value="Processing">処理中</option>
                        <option value="Completed">完了</option>
                    </select>
                </label>
                <button id="refresh-btn" style="padding: 0.5rem 1.5rem; background: linear-gradient(135deg, #3b82f6, #2563eb); color: #fff; border: none; border-radius: 8px; cursor: pointer; font-weight: 600;">
                    🔄 更新
                </button>
            </div>
        </div>

        <!-- 申請リスト -->
        <div id="requests-container" style="display: flex; flex-direction: column; gap: 1rem;">
            <div style="text-align: center; padding: 3rem; color: #94a3b8;">
                <p>読み込み中...</p>
            </div>
        </div>
    </div>

    <style>
        .stat-card {
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: #fbbf24;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #cbd5e1;
            font-size: 0.9rem;
        }

        .request-card {
            background: rgba(30, 41, 59, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.3s ease;
        }

        .request-card:hover {
            border-color: rgba(59, 130, 246, 0.5);
            transform: translateY(-2px);
        }

        .request-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .request-info {
            flex: 1;
        }

        .request-title {
            color: #fbbf24;
            font-size: 1.1rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .request-meta {
            color: #94a3b8;
            font-size: 0.85rem;
        }

        .status-badge {
            padding: 0.4rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            white-space: nowrap;
        }

        .status-pending {
            background: rgba(245, 158, 11, 0.2);
            color: #fbbf24;
        }

        .status-processing {
            background: rgba(59, 130, 246, 0.2);
            color: #60a5fa;
        }

        .status-completed {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }

        .request-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .detail-item {
            color: #cbd5e1;
            font-size: 0.9rem;
        }

        .detail-label {
            color: #94a3b8;
            font-size: 0.8rem;
            margin-bottom: 0.25rem;
        }

        .detail-value {
            font-weight: 600;
        }

        .airtable-link {
            display: inline-block;
            margin-top: 1rem;
            padding: 0.5rem 1rem;
            background: linear-gradient(135deg, #10b981, #059669);
            color: #fff;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .airtable-link:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }
    </style>

    <script is:inline>
        let allRequests = [];

        async function loadRequests() {
            try {
                const response = await fetch('/.netlify/functions/get-point-exchange-requests');
                const data = await response.json();

                if (data.success) {
                    allRequests = data.requests;
                    updateStatistics();
                    displayRequests();
                } else {
                    throw new Error(data.error || 'データ取得失敗');
                }
            } catch (error) {
                console.error('❌ 申請データ取得エラー:', error);
                document.getElementById('requests-container').innerHTML = `
                    <div style="text-align: center; padding: 3rem; color: #ef4444;">
                        <p>データの読み込みに失敗しました</p>
                        <p style="font-size: 0.9rem; margin-top: 0.5rem;">${error.message}</p>
                    </div>
                `;
            }
        }

        function updateStatistics() {
            const total = allRequests.length;
            const pending = allRequests.filter(r => r.fields.Status === 'Pending').length;
            const completed = allRequests.filter(r => r.fields.Status === 'Completed').length;

            document.getElementById('total-requests').textContent = total;
            document.getElementById('pending-requests').textContent = pending;
            document.getElementById('completed-requests').textContent = completed;
        }

        function displayRequests() {
            const statusFilter = document.getElementById('status-filter').value;
            let filteredRequests = allRequests;

            if (statusFilter !== 'all') {
                filteredRequests = allRequests.filter(r => r.fields.Status === statusFilter);
            }

            // 新しい順にソート
            filteredRequests.sort((a, b) => new Date(b.fields.RequestDate) - new Date(a.fields.RequestDate));

            const container = document.getElementById('requests-container');

            if (filteredRequests.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 3rem; color: #94a3b8;">
                        <p>申請データがありません</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = filteredRequests.map(request => {
                const fields = request.fields;
                const requestDate = new Date(fields.RequestDate);
                const statusClass = `status-${fields.Status.toLowerCase()}`;

                return `
                    <div class="request-card">
                        <div class="request-header">
                            <div class="request-info">
                                <div class="request-title">${fields.RewardName}</div>
                                <div class="request-meta">
                                    ${fields.Name || fields.Email} | ${fields.Plan}プラン
                                </div>
                            </div>
                            <div class="status-badge ${statusClass}">
                                ${fields.Status === 'Pending' ? '未処理' : fields.Status === 'Processing' ? '処理中' : '完了'}
                            </div>
                        </div>

                        <div class="request-details">
                            <div class="detail-item">
                                <div class="detail-label">メールアドレス</div>
                                <div class="detail-value">${fields.Email}</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">必要ポイント</div>
                                <div class="detail-value">${fields.RequiredPoints}pt</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">保有ポイント</div>
                                <div class="detail-value">${fields.CurrentPoints}pt</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">申請日時</div>
                                <div class="detail-value">${requestDate.toLocaleString('ja-JP')}</div>
                            </div>
                        </div>

                        <a href="https://airtable.com/appE0cIbxICG5m6fT/tbl72Hfu9p6KRqFOq/viw0TxQQp6Mxu6MzJ/${request.id}" target="_blank" class="airtable-link">
                            📋 Airtableで確認・編集
                        </a>
                    </div>
                `;
            }).join('');
        }

        // ページ読み込み時
        document.addEventListener('DOMContentLoaded', function() {
            loadRequests();

            // 更新ボタン
            document.getElementById('refresh-btn').addEventListener('click', loadRequests);

            // フィルター変更
            document.getElementById('status-filter').addEventListener('change', displayRequests);
        });
    </script>
</BaseLayout>
