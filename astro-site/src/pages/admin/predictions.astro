---
export const prerender = true;// 簡略化された管理者用予想入力ページ
import { getRaceTier, isMainRace, getRaceDisplayName, getMainRaceNumber } from '../../lib/race-config.js';
import { validateAllRacesPrediction, autoFixData, getValidationSummary } from '../../lib/data-validator.js';
import { convertToStarRating } from '../../lib/shared-prediction-logic.js';
---

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>全レース予想データ管理 | NANKANアナリティクス管理画面</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #e2e8f0;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
        }

        .header {
            background: rgba(30, 41, 59, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 32px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .page-title {
            font-size: 28px;
            font-weight: 700;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .nav-links {
            display: flex;
            gap: 16px;
        }

        .nav-link {
            color: #94a3b8;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

        .nav-link:hover {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

        .form-section {
            background: rgba(30, 41, 59, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
        }

        .section-title {
            font-size: 20px;
            font-weight: 600;
            color: #f1f5f9;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
            color: white;
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(107, 114, 128, 0.3);
        }

        .alert {
            padding: 16px 20px;
            border-radius: 8px;
            margin: 16px 0;
            font-weight: 500;
            display: none;
        }

        .alert.success {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(5, 150, 105, 0.2) 100%);
            border: 1px solid rgba(16, 185, 129, 0.3);
            color: #10b981;
        }

        .alert.error {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.2) 0%, rgba(220, 38, 38, 0.2) 100%);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #ef4444;
        }

        .feature-importance-controls {
            background: rgba(15, 23, 42, 0.5);
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .slider-container {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .slider {
            flex: 1;
            height: 6px;
            border-radius: 3px;
            background: rgba(71, 85, 105, 0.5);
            outline: none;
            cursor: pointer;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            cursor: pointer;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-label {
            font-weight: 600;
            color: #f1f5f9;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .form-input, .form-textarea, .form-select {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid rgba(148, 163, 184, 0.2);
            border-radius: 8px;
            background: rgba(30, 41, 59, 0.5);
            color: #e2e8f0;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-input:focus, .form-textarea:focus, .form-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }


        .race-card {
            background: rgba(15, 23, 42, 0.7);
            border: 1px solid rgba(71, 85, 105, 0.3);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
        }

        .race-card:hover {
            border-color: rgba(59, 130, 246, 0.5);
            background: rgba(30, 41, 59, 0.7);
        }

        .race-status {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
        }

        .status-complete {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }

        .status-incomplete {
            background: rgba(245, 158, 11, 0.2);
            color: #f59e0b;
        }

        .status-empty {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }

        #loading {
            display: none;
            text-align: center;
            padding: 20px;
            color: #94a3b8;
        }

        .operation-log {
            background: rgba(15, 23, 42, 0.8);
            border: 1px solid rgba(71, 85, 105, 0.3);
            border-radius: 8px;
            padding: 15px;
            max-height: 200px;
            overflow-y: auto;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 12px;
            color: #94a3b8;
        }

        /* エラーハンドリングアニメーション */
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes slideOut {
            from {
                opacity: 1;
                transform: translateY(0);
            }
            to {
                opacity: 0;
                transform: translateY(-10px);
            }
        }

        .alert {
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .alert.error {
            border-left: 4px solid #ef4444;
        }

        .alert.success {
            border-left: 4px solid #10b981;
        }

        .alert.warning {
            border-left: 4px solid #f59e0b;
        }

        .alert.info {
            border-left: 4px solid #3b82f6;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="page-title">🏇 全レース予想データ管理</h1>
            <div class="nav-links">
                <a href="/" class="nav-link">🏠 ホーム</a>
                <a href="/admin" class="nav-link">⚙️ 管理画面</a>
            </div>
        </div>

        <div id="alert" class="alert"></div>

        <!-- 外部予想 → AI予想変換（1〜12レース一括処理） -->
        <div class="form-section" style="background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(59, 130, 246, 0.1) 100%); border: 2px solid rgba(16, 185, 129, 0.3);">
            <h2 class="section-title">⚡ 外部予想 → AI予想変換（1〜12レース一括処理）</h2>
            <p style="color: #94a3b8; margin-bottom: 16px;">
                1〜12レース全ての外部予想を一度に貼り付けると、全レース分のAI予想データを一括生成します。<br>
                allRacesPrediction.json形式で出力されるので、そのまま置き換え可能です。
            </p>
            
            <div class="form-group">
                <label class="form-label">全レース予想テキストを貼り付け（1R〜12R）</label>
                <textarea id="external_prediction" class="form-textarea" rows="20" 
                    placeholder="以下の形式で1R〜12R全レースを一度に貼り付けてください:

【新形式】多重印対応（推奨）:
8/26川崎1R 1400m（11頭）発走時刻14:45 2歳新馬
1番 △ △ ◎ △ ビリーヴインミー
2番 ○ ▲ △ タイムフレーム
3番 ◎ ○ ○ セレンディピティ

8/26川崎2R 1200m（10頭）発走時刻15:20 3歳未勝利
5番 ◎ ○ ▲ ブライトスター
3番 ○ △ ノーブルパワー
1番 ▲ ○ アーリーバード

【旧形式】単一印（継続サポート）:
8/26川崎1R 1400m（11頭）発走時刻14:45 2歳新馬
◎8キチョウ
○6マイボンド
▲2トゥルービューティ

...（5R〜12R まで同様に続ける）

【重要】
・新形式: 馬番 印1 印2 印3... 馬名（スコア自動計算・役割自動割り当て）
・各レース行: 月/日＋競馬場名＋レース番号＋距離＋頭数＋発走時刻＋レース名
・印の点数: ◎+7, ○+6, ▲+5, △+4, ×+0（ベース62pt）"></textarea>
            </div>
            
            <div style="display: flex; gap: 12px; margin-bottom: 20px;">
                <button class="btn btn-primary" onclick="convertAllRaces()">🤖 全レース一括変換・JSON生成</button>
                <button class="btn btn-secondary" onclick="clearConversion()">クリア</button>
            </div>

            <!-- 処理状況表示 -->
            <div id="conversion-progress" style="background: rgba(15, 23, 42, 0.8); padding: 15px; border-radius: 8px; display: none; font-family: monospace; font-size: 12px; color: #94a3b8; max-height: 150px; overflow-y: auto;">
                <!-- 処理ログが表示される -->
            </div>
        </div>


        <!-- [DELETED] 不要なセクション削除済み -->

        <!-- 特徴量重要度バー編集 -->
        <div class="form-section" style="background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.2);">
            <h2 class="section-title">📊 特徴量重要度バー編集</h2>
            <p style="color: #94a3b8; margin-bottom: 20px; font-size: 0.9rem;">
                ◎印と○印の特徴量重要度を個別設定。リアルタイムプレビューで確認しながら調整可能。
            </p>
            
            <!-- ◎印（本命）の特徴量重要度 -->
            <div class="feature-importance-controls" style="background: rgba(16, 185, 129, 0.1);">
                <h4 style="color: #10b981; margin-bottom: 15px;">◎ 本命馬の特徴量重要度</h4>
                <div class="slider-container">
                    <label style="min-width: 80px; font-size: 0.9rem;">特徴量1:</label>
                    <input type="text" id="mainFeature1Label" value="安定性" placeholder="特徴量名" style="width: 120px; padding: 5px 8px; font-size: 0.8rem; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                    <input type="range" id="mainFeature1" class="slider" min="0" max="1" step="0.01" value="0.95" onchange="updateImportanceBars()">
                    <span id="mainFeature1Value" style="min-width: 40px; font-size: 0.9rem;">95%</span>
                </div>
                <div class="slider-container">
                    <label style="min-width: 80px; font-size: 0.9rem;">特徴量2:</label>
                    <input type="text" id="mainFeature2Label" value="能力上位性" placeholder="特徴量名" style="width: 120px; padding: 5px 8px; font-size: 0.8rem; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                    <input type="range" id="mainFeature2" class="slider" min="0" max="1" step="0.01" value="0.88" onchange="updateImportanceBars()">
                    <span id="mainFeature2Value" style="min-width: 40px; font-size: 0.9rem;">88%</span>
                </div>
                <div class="slider-container">
                    <label style="min-width: 80px; font-size: 0.9rem;">特徴量3:</label>
                    <input type="text" id="mainFeature3Label" value="展開利" placeholder="特徴量名" style="width: 120px; padding: 5px 8px; font-size: 0.8rem; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                    <input type="range" id="mainFeature3" class="slider" min="0" max="1" step="0.01" value="0.82" onchange="updateImportanceBars()">
                    <span id="mainFeature3Value" style="min-width: 40px; font-size: 0.9rem;">82%</span>
                </div>
            </div>

            <!-- ○印（対抗）の特徴量重要度 -->
            <div class="feature-importance-controls" style="background: rgba(59, 130, 246, 0.1);">
                <h4 style="color: #3b82f6; margin-bottom: 15px;">○ 対抗馬の特徴量重要度</h4>
                <div class="slider-container">
                    <label style="min-width: 80px; font-size: 0.9rem;">特徴量1:</label>
                    <input type="text" id="subFeature1Label" value="先行力" placeholder="特徴量名" style="width: 120px; padding: 5px 8px; font-size: 0.8rem; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                    <input type="range" id="subFeature1" class="slider" min="0" max="1" step="0.01" value="0.96" onchange="updateImportanceBars()">
                    <span id="subFeature1Value" style="min-width: 40px; font-size: 0.9rem;">96%</span>
                </div>
                <div class="slider-container">
                    <label style="min-width: 80px; font-size: 0.9rem;">特徴量2:</label>
                    <input type="text" id="subFeature2Label" value="スピード指数" placeholder="特徴量名" style="width: 120px; padding: 5px 8px; font-size: 0.8rem; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                    <input type="range" id="subFeature2" class="slider" min="0" max="1" step="0.01" value="0.85" onchange="updateImportanceBars()">
                    <span id="subFeature2Value" style="min-width: 40px; font-size: 0.9rem;">85%</span>
                </div>
                <div class="slider-container">
                    <label style="min-width: 80px; font-size: 0.9rem;">特徴量3:</label>
                    <input type="text" id="subFeature3Label" value="枠順優位" placeholder="特徴量名" style="width: 120px; padding: 5px 8px; font-size: 0.8rem; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                    <input type="range" id="subFeature3" class="slider" min="0" max="1" step="0.01" value="0.79" onchange="updateImportanceBars()">
                    <span id="subFeature3Value" style="min-width: 40px; font-size: 0.9rem;">79%</span>
                </div>
            </div>

            <div style="margin-top: 20px; text-align: center;">
                <button class="btn btn-primary" onclick="applyImportanceToSelectedRace()">
                    🎯 選択中レースに適用
                </button>
                <button class="btn btn-secondary" onclick="previewImportanceBars()" style="margin-left: 10px;">
                    👁️ プレビュー表示
                </button>
            </div>
        </div>

        <!-- 個別レース詳細編集 -->
        <div class="form-section" id="race-edit-section" style="display: none; background: rgba(139, 92, 246, 0.1); border: 1px solid rgba(139, 92, 246, 0.3);">
            <h2 class="section-title">🎯 個別レース詳細編集</h2>
            <div id="race-edit-header" style="margin-bottom: 20px; padding: 15px; background: rgba(15, 23, 42, 0.5); border-radius: 8px;">
                <h3 id="race-edit-title" style="color: #8b5cf6; margin-bottom: 10px;">編集中: -</h3>
                <p style="color: #94a3b8; font-size: 0.9rem;">こちらで個別レースの詳細設定を行います。変更後は「適用」ボタンで保存してください。</p>
            </div>

            <!-- レース基本情報 -->
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 25px;">
                <!-- レース情報 -->
                <div style="background: rgba(15, 23, 42, 0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="color: #10b981; margin-bottom: 15px;">📊 レース基本情報</h4>
                    <div style="display: flex; flex-direction: column; gap: 10px;">
                        <input type="text" id="edit-race-name" placeholder="レース名" 
                               style="padding: 8px 12px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 6px; color: white;">
                        <input type="text" id="edit-ability-index" placeholder="能力指数" 
                               style="padding: 8px 12px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 6px; color: white;">
                        <select id="edit-recommendation" 
                                style="padding: 8px 12px; background: rgba(15,23,42,0.8); border: 1px solid rgba(148,163,184,0.2); border-radius: 6px; color: white;">
                            <option value="A+">A+ (最強推奨)</option>
                            <option value="A">A (強推奨)</option>
                            <option value="B+">B+ (推奨)</option>
                            <option value="B">B (やや推奨)</option>
                            <option value="C+">C+ (条件付き)</option>
                            <option value="C">C (注意)</option>
                        </select>
                        <input type="text" id="edit-expected-return" placeholder="期待回収率 (%)" 
                               style="padding: 8px 12px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 6px; color: white;">
                    </div>
                </div>

                <!-- 予想馬情報 -->
                <div style="background: rgba(15, 23, 42, 0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="color: #3b82f6; margin-bottom: 15px;">🏇 予想馬情報</h4>
                    
                    <!-- 本命馬 -->
                    <div style="margin-bottom: 15px; padding: 10px; background: rgba(16, 185, 129, 0.1); border-radius: 6px;">
                        <h5 style="color: #10b981; margin-bottom: 8px;">◎ 本命</h5>
                        <div style="display: flex; gap: 10px;">
                            <input type="number" id="edit-main-number" placeholder="馬番" min="1" max="16" 
                                   style="width: 70px; padding: 6px 8px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                            <input type="text" id="edit-main-name" placeholder="馬名" 
                                   style="flex: 1; padding: 6px 8px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                        </div>
                    </div>

                    <!-- 対抗馬 -->
                    <div style="margin-bottom: 15px; padding: 10px; background: rgba(59, 130, 246, 0.1); border-radius: 6px;">
                        <h5 style="color: #3b82f6; margin-bottom: 8px;">○ 対抗</h5>
                        <div style="display: flex; gap: 10px;">
                            <input type="number" id="edit-sub1-number" placeholder="馬番" min="1" max="16" 
                                   style="width: 70px; padding: 6px 8px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                            <input type="text" id="edit-sub1-name" placeholder="馬名" 
                                   style="flex: 1; padding: 6px 8px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                        </div>
                    </div>

                    <!-- 単穴馬 -->
                    <div style="margin-bottom: 10px; padding: 10px; background: rgba(245, 158, 11, 0.1); border-radius: 6px;">
                        <h5 style="color: #f59e0b; margin-bottom: 8px;">▲ 単穴</h5>
                        <div style="display: flex; gap: 10px;">
                            <input type="number" id="edit-sub2-number" placeholder="馬番" min="1" max="16" 
                                   style="width: 70px; padding: 6px 8px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                            <input type="text" id="edit-sub2-name" placeholder="馬名" 
                                   style="flex: 1; padding: 6px 8px; background: rgba(255,255,255,0.05); border: 1px solid rgba(148,163,184,0.2); border-radius: 4px; color: white;">
                        </div>
                    </div>
                </div>
            </div>

            <!-- 操作ボタン -->
            <div style="display: flex; gap: 12px; justify-content: center;">
                <button class="btn btn-success" onclick="saveRaceEdit()">✅ 変更を適用</button>
                <button class="btn btn-secondary" onclick="cancelRaceEdit()">❌ キャンセル</button>
                <button class="btn btn-warning" onclick="resetRaceToDefault()">🔄 デフォルトに戻す</button>
            </div>
        </div>

        <div id="loading">
            <p>🔄 処理中...</p>
        </div>

        <!-- 生成されたJSONの表示 -->
        <div class="form-section" style="display: none;" id="json-output-section">
            <h2 class="section-title">📄 生成JSON</h2>
            <textarea id="json-output" class="form-textarea" rows="20" readonly 
                style="font-family: 'Monaco', 'Menlo', monospace; font-size: 12px; background: rgba(15, 23, 42, 0.8);"></textarea>
            <div style="margin-top: 12px; display: flex; gap: 12px; flex-wrap: wrap;">
                <button class="btn btn-primary" onclick="copyToClipboard('json-output')">📋 JSONをコピー</button>
                <button class="btn btn-secondary" onclick="downloadJson()">💾 JSONファイルダウンロード</button>
            </div>
            <div style="margin-top: 15px; padding: 12px; background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3); border-radius: 6px;">
                <p style="color: #f59e0b; font-size: 0.9rem; margin-bottom: 8px;"><strong>📝 保存手順:</strong></p>
                <ol style="color: #e2e8f0; font-size: 0.85rem; margin-left: 20px; line-height: 1.4;">
                    <li>「JSONファイルダウンロード」ボタンでファイルを保存</li>
                    <li>ダウンロードした「allRacesPrediction.json」を<strong>src/data/</strong>フォルダに配置</li>
                    <li>既存のallRacesPrediction.jsonファイルを上書き</li>
                    <li>フロントエンド（メインサイト）を再読み込みして変更を確認</li>
                </ol>
                <p style="color: #94a3b8; font-size: 0.8rem; margin-top: 8px;">
                    ⚠️ レース名の変更は管理画面でのみ行い、フロントエンドに反映するには上記手順が必要です。
                </p>
            </div>
        </div>
    </div>

    <script>
        // ===== グローバル変数 =====
        let allRacesData = null;
        let currentEditingRace = null;

        // ===== 共有ロジック関数 (クライアントサイド用) =====
        function convertToStarRating(text, horseType, score) {
            // スコアが数値でない場合はテキストをそのまま返す
            if (typeof score !== 'number' && typeof score !== 'string') {
                return text;
            }

            const numScore = typeof score === 'string' ? parseInt(score) : score;

            // スコアが有効な数値でない場合はデフォルトテキスト
            if (isNaN(numScore)) {
                return text;
            }

            // 89以上は4つ星、88以下は3つ星
            const stars = numScore >= 89 ? '★★★★' : '★★★';

            return `総合評価:${stars}`;
        }

        // レース設定（race-config.jsと同じ定義）
        const RACE_TIERS = {
            1: 'premium', 2: 'premium', 3: 'premium',
            4: 'premium', 5: 'premium', 6: 'premium',
            7: 'premium', 8: 'premium', 9: 'premium',
            10: 'standard',
            11: 'free',     // メインレース
            12: 'standard'
        };
        
        // race-config.js互換の関数
        function getRaceTier(raceNumber) {
            return RACE_TIERS[raceNumber] || 'premium';
        }
        
        function isMainRace(raceNumber) {
            return raceNumber === 11;
        }
        
        function getRaceDisplayName(raceNumber) {
            const tier = getRaceTier(raceNumber);
            const isMain = isMainRace(raceNumber);
            
            if (isMain) {
                return `${raceNumber}R編集 (メイン・free)`;
            } else if (tier === 'standard') {
                return `${raceNumber}R編集 (standard)`;
            } else {
                return `${raceNumber}R編集 (premium)`;
            }
        }
        
        // デフォルトレース名生成関数
        function getDefaultRaceName(raceNumber) {
            const raceNames = {
                1: '2歳新馬',
                2: '3歳未勝利',
                3: '3歳1勝クラス',
                4: 'サラ系3歳以上',
                5: '3歳以上1勝クラス',
                6: 'サラ系3歳以上',
                7: '3歳以上2勝クラス',
                8: 'オープン',
                9: '重賞',
                10: '特別戦',
                11: 'メインレース', // 11Rはメインレース
                12: 'サラ系3歳以上'
            };
            
            return raceNames[raceNumber] || 'サラ系3歳以上';
        }
        let parsedPredictionData = null;

        // データバリデーション関数（data-validator.jsの機能を利用）
        function validateAllRaces() {
            if (!allRacesData) {
                handleError('検証するデータがありません。先にデータを読み込んでください。', 'データ検証');
                return;
            }
            
            // バリデーション実行
            const validation = validateAllRacesPredictionInternal(allRacesData);
            
            // 結果表示
            const alertBox = document.getElementById('alert');
            if (validation.valid) {
                showSuccess('データ検証成功: すべてのデータが正常です', 'データ検証');
            } else {
                let message = '⚠️ データ検証で問題が見つかりました:\n\n';
                
                if (validation.errors.length > 0) {
                    message += '【エラー】\n';
                    validation.errors.forEach(e => message += `• ${e}\n`);
                }
                
                if (validation.warnings.length > 0) {
                    message += '\n【警告（自動修正可能）】\n';
                    validation.warnings.forEach(w => message += `• ${w}\n`);
                }
                
                message += '\n自動修正を適用しますか？';
                
                if (confirm(message)) {
                    // 自動修正適用
                    allRacesData = validation.fixed || allRacesData;
                    showSuccess('データを自動修正しました', 'データ検証');
                    
                    // JSONを再生成
                    const jsonOutput = document.getElementById('json-output');
                    jsonOutput.value = JSON.stringify(allRacesData, null, 2);
                }
            }
        }
        
        // 内部バリデーション関数（data-validator.jsと同じロジック）
        function validateAllRacesPredictionInternal(data) {
            const errors = [];
            const warnings = [];
            const fixed = JSON.parse(JSON.stringify(data));
            
            // 必須フィールドチェック
            if (!data.raceDate) errors.push('開催日が未設定');
            if (!data.track) errors.push('競馬場が未設定');
            if (!data.totalRaces) errors.push('総レース数が未設定');
            
            // 各レースのチェック
            if (data.races && Array.isArray(data.races)) {
                data.races.forEach((race, index) => {
                    const raceNum = parseInt(race.raceNumber);
                    const expectedNum = index + 1;
                    
                    // tier検証
                    const correctTier = getRaceTier(raceNum || expectedNum);
                    if (race.tier !== correctTier) {
                        warnings.push(`${race.raceNumber}: tierを${race.tier}→${correctTier}に修正`);
                        fixed.races[index].tier = correctTier;
                    }
                    
                    // メインレースフラグ検証
                    const shouldBeMain = isMainRace(raceNum || expectedNum);
                    if (race.isMainRace !== shouldBeMain) {
                        warnings.push(`${race.raceNumber}: isMainRaceを${race.isMainRace}→${shouldBeMain}に修正`);
                        fixed.races[index].isMainRace = shouldBeMain;
                    }
                    
                    // 馬データチェック
                    if (!race.horses?.main?.number) {
                        errors.push(`${race.raceNumber}: 本命馬が未設定`);
                    }
                    
                    // importance値の正規化（1以上なら100で割る）
                    ['main', 'sub'].forEach(horseType => {
                        if (race.horses?.[horseType]?.importance) {
                            race.horses[horseType].importance.forEach((item, idx) => {
                                if (item.value > 1) {
                                    warnings.push(`${race.raceNumber}: ${horseType}馬のimportance値を正規化`);
                                    fixed.races[index].horses[horseType].importance[idx].value = item.value / 100;
                                }
                            });
                        }
                    });
                });
            }
            
            return {
                valid: errors.length === 0,
                errors,
                warnings,
                fixed: errors.length === 0 ? fixed : null
            };
        }
        
        // レース編集ボタンを動的生成
        function generateRaceEditButtons() {
            const container = document.getElementById('raceEditButtons');
            if (!container) return;
            
            container.innerHTML = '';
            for (let i = 1; i <= 12; i++) {
                const button = document.createElement('button');
                button.className = 'btn btn-secondary';
                button.textContent = getRaceDisplayName(i);
                button.style.justifyContent = 'center';
                
                // メインレース（11R）は特別なスタイル
                if (isMainRace(i)) {
                    button.style.background = 'linear-gradient(135deg, rgba(16, 185, 129, 0.3) 0%, rgba(59, 130, 246, 0.3) 100%)';
                    button.style.border = '2px solid rgba(16, 185, 129, 0.5)';
                }
                
                button.onclick = () => editRace(`${i}R`);
                container.appendChild(button);
            }
        }
        
        // ===== ユーティリティ関数 =====
        // ===== エラーハンドリング改善 =====
        function showAlert(message, type = 'success') {
            const alert = document.getElementById('alert');
            const typeConfig = {
                success: { icon: '✅', color: '#10b981', bgColor: 'rgba(16, 185, 129, 0.1)' },
                error: { icon: '❌', color: '#ef4444', bgColor: 'rgba(239, 68, 68, 0.1)' },
                warning: { icon: '⚠️', color: '#f59e0b', bgColor: 'rgba(245, 158, 11, 0.1)' },
                info: { icon: '💡', color: '#3b82f6', bgColor: 'rgba(59, 130, 246, 0.1)' }
            };
            
            const config = typeConfig[type] || typeConfig.info;
            
            alert.innerHTML = `
                <div style="display: flex; align-items: center; gap: 8px;">
                    <span style="font-size: 16px;">${config.icon}</span>
                    <span>${message}</span>
                </div>
            `;
            alert.className = `alert ${type}`;
            alert.style.cssText = `
                display: block;
                background: ${config.bgColor};
                color: ${config.color};
                border: 1px solid ${config.color}33;
                padding: 12px 16px;
                border-radius: 8px;
                margin: 12px 0;
                backdrop-filter: blur(10px);
                animation: slideIn 0.3s ease;
            `;
            
            // 自動消去
            setTimeout(() => {
                if (alert.style.display !== 'none') {
                    alert.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => alert.style.display = 'none', 300);
                }
            }, 5000);
        }
        
        // エラー処理の統一化
        function handleError(error, context = '') {
            console.error(`[${context}] エラー:`, error);
            
            let message = 'エラーが発生しました';
            
            if (typeof error === 'string') {
                message = error;
            } else if (error.message) {
                // よくあるエラーをユーザーフレンドリーに変換
                if (error.message.includes('fetch')) {
                    message = 'サーバーに接続できません。ネットワーク接続を確認してください';
                } else if (error.message.includes('JSON')) {
                    message = 'データ形式に問題があります';
                } else if (error.message.includes('timeout')) {
                    message = '処理がタイムアウトしました。再試行してください';
                } else {
                    message = error.message;
                }
            }
            
            showAlert(`${context ? `[${context}] ` : ''}${message}`, 'error');
        }
        
        // 成功メッセージの表示
        function showSuccess(message, context = '') {
            showAlert(`${context ? `[${context}] ` : ''}${message}`, 'success');
        }
        
        // 警告メッセージの表示
        function showWarning(message, context = '') {
            showAlert(`${context ? `[${context}] ` : ''}${message}`, 'warning');
        }

        function logAllRaces(message) {
            const log = document.getElementById('all-races-log');
            if (!log) {
                console.warn('all-races-log element not found');
                return;
            }

            const timestamp = new Date().toLocaleTimeString();
            log.innerHTML += `<div>[${timestamp}] ${message}</div>`;
            log.scrollTop = log.scrollHeight;
        }

        // ===== 生成データ確認・編集システム =====
        // 外部変数: 変換システムで生成されたデータを保持
        let generatedRacesData = null;
        
        // 変換システムからデータを受け取る関数（変換完了時に呼び出される）
        window.setGeneratedData = function(jsonData) {
            generatedRacesData = jsonData;
            allRacesData = jsonData; // 後方互換性のため
            refreshGeneratedData();
            logAllRaces(`✅ ${jsonData.totalRaces}レース分のデータを受け取りました`);
        };
        
        // 生成データを表示
        window.refreshGeneratedData = function() {
            if (!generatedRacesData) {
                showAlert('まず上の「全レース一括変換・JSON生成」を実行してください', 'info');
                updateDataStatus('変換実行待ち');
                return;
            }
            
            logAllRaces(`📊 ${generatedRacesData.raceDate} ${generatedRacesData.track} データを表示中...`);
            
            // UI更新
            updateDataStatus(`${generatedRacesData.totalRaces}レース生成済み`);
            updateRaceStatus();
            generateRaceEditButtons();
            
            logAllRaces('✅ 生成データの表示完了');
            showAlert('生成データを表示しました', 'success');
        };
        
        // 最終JSONをコピー
        window.copyGeneratedJSON = function() {
            if (!generatedRacesData) {
                showAlert('まず変換を実行してデータを生成してください', 'error');
                return;
            }
            
            const jsonString = JSON.stringify(generatedRacesData, null, 2);
            
            // クリップボードにコピー
            if (navigator.clipboard) {
                navigator.clipboard.writeText(jsonString).then(() => {
                    logAllRaces('✅ JSONをクリップボードにコピーしました');
                    showAlert('JSONをクリップボードにコピーしました！\nallRacesPrediction.jsonに貼り付けてコミットしてください。', 'success');
                }).catch(() => {
                    fallbackCopy(jsonString);
                });
            } else {
                fallbackCopy(jsonString);
            }
        };
        
        // データ検証
        window.validateGeneratedData = function() {
            if (!generatedRacesData) {
                showAlert('検証するデータがありません', 'error');
                return;
            }
            
            logAllRaces('🔍 データ検証を実行中...');
            
            const validation = validateAllRacesPredictionInternal(generatedRacesData);
            
            if (validation.valid) {
                logAllRaces('✅ データ検証: 問題なし');
                showAlert('データ検証完了: すべて正常です', 'success');
            } else {
                logAllRaces(`⚠️ ${validation.errors.length}個の問題を発見`);
                showAlert(`データに${validation.errors.length}個の問題があります`, 'warning');
            }
        };
        
        // ヘルパー関数
        function updateDataStatus(message) {
            const statusElement = document.getElementById('data-status');
            if (statusElement) {
                statusElement.textContent = message;
            }
        }
        
        function fallbackCopy(text) {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            try {
                document.execCommand('copy');
                logAllRaces('✅ JSONをコピーしました（フォールバック方式）');
                showAlert('JSONをコピーしました！', 'success');
            } catch (err) {
                logAllRaces('❌ コピーに失敗しました');
                showAlert('コピーに失敗しました', 'error');
            }
            document.body.removeChild(textArea);
        }

        window.validateAllRaces = function() {
            if (!allRacesData) {
                showAlert('先にデータを読み込んでください', 'error');
                return;
            }

            logAllRaces('🔍 データ構造を検証中...');
            
            const validation = {
                totalRaces: allRacesData.races?.length || 0,
                premiumRaces: 0,
                standardRaces: 0,
                freeRaces: 0,
                mainRace: null,
                errors: []
            };

            if (allRacesData.races) {
                allRacesData.races.forEach(race => {
                    switch(race.tier) {
                        case 'premium': validation.premiumRaces++; break;
                        case 'standard': validation.standardRaces++; break;
                        case 'free': validation.freeRaces++; break;
                    }
                    
                    if (race.isMainRace) {
                        validation.mainRace = race.raceNumber;
                    }
                });
            }

            logAllRaces(`📊 検証結果: ${validation.totalRaces}レース (プレミアム:${validation.premiumRaces}, スタンダード:${validation.standardRaces}, 無料:${validation.freeRaces})`);
            logAllRaces(`🎯 メインレース: ${validation.mainRace || '未設定'}`);
            
            showAlert(`データ検証完了: ${validation.totalRaces}レースを確認しました`, 'success');
        };

        window.saveAllRaces = function() {
            if (!allRacesData) {
                showAlert('保存するデータがありません', 'error');
                return;
            }

            try {
                const jsonString = JSON.stringify(allRacesData, null, 2);
                
                // クリップボードにコピー
                navigator.clipboard.writeText(jsonString).then(() => {
                    logAllRaces('📋 JSONデータをクリップボードにコピーしました');
                    showAlert('JSONデータをクリップボードにコピーしました。allRacesPrediction.jsonに貼り付けてください。', 'success');
                    
                    // JSON表示エリアにも出力
                    document.getElementById('json-output').value = jsonString;
                    document.getElementById('json-output-section').style.display = 'block';
                    
                }).catch(() => {
                    // フォールバック: テキストエリアに表示
                    document.getElementById('json-output').value = jsonString;
                    document.getElementById('json-output-section').style.display = 'block';
                    showAlert('JSONデータを表示しました。手動でコピーしてください。', 'success');
                });
                
            } catch (error) {
                logAllRaces(`❌ 保存エラー: ${error.message}`);
                showAlert(`保存エラー: ${error.message}`, 'error');
            }
        };

        window.generatePreview = function() {
            if (!allRacesData) {
                showAlert('プレビューするデータがありません', 'error');
                return;
            }

            logAllRaces('👁️ プレビューを生成中...');
            
            const preview = {
                概要: `${allRacesData.track} ${allRacesData.raceDate}`,
                全レース数: allRacesData.races?.length || 0,
                プレミアム: allRacesData.races?.filter(r => r.tier === 'premium').length || 0,
                スタンダード: allRacesData.races?.filter(r => r.tier === 'standard').length || 0,
                無料: allRacesData.races?.filter(r => r.tier === 'free').length || 0,
                メインレース: allRacesData.races?.find(r => r.isMainRace)?.raceNumber || '未設定'
            };

            logAllRaces('✅ プレビュー生成完了');
            showAlert(`プレビュー: ${preview.概要} - 全${preview.全レース数}レース (プレミアム:${preview.プレミアム}, スタンダード:${preview.スタンダード}, 無料:${preview.無料})`, 'success');
        };

        window.editRace = function(raceNumber) {
            currentEditingRace = raceNumber;
            logAllRaces(`🎯 ${raceNumber}の編集を開始`);
            showAlert(`${raceNumber}が選択されました。特徴量重要度バー編集セクションで調整してください。`, 'success');
            
            // レース選択状態を視覚的に表示
            document.querySelectorAll('.btn-secondary').forEach(btn => {
                btn.style.background = 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)';
            });
            
            event.target.style.background = 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)';
        };

        function updateRaceStatus() {
            const statusContainer = document.getElementById('all-races-status');
            if (!statusContainer) {
                console.warn('all-races-status element not found');
                return;
            }

            if (!allRacesData?.races) {
                statusContainer.innerHTML = '<div style="color: #ef4444;">データが読み込まれていません</div>';
                return;
            }

            statusContainer.innerHTML = '';
            
            allRacesData.races.forEach(race => {
                const hasDetailedData = race.horses?.main?.importance && race.strategies && race.analysis;
                const statusClass = hasDetailedData ? 'status-complete' : 'status-incomplete';
                const statusText = hasDetailedData ? '完了' : '基本のみ';
                
                const card = document.createElement('div');
                card.className = 'race-card';
                card.innerHTML = `
                    <div style="font-weight: 600; color: #f1f5f9; margin-bottom: 8px;">${race.raceNumber}</div>
                    <div style="font-size: 0.9rem; color: #94a3b8; margin-bottom: 8px;">${race.raceName}</div>
                    <div class="race-status ${statusClass}">${statusText}</div>
                `;
                statusContainer.appendChild(card);
            });
        }

        // ===== 特徴量重要度バー編集機能 =====
        window.updateImportanceBars = function() {
            // リアルタイム値更新（パーセント表示）
            document.getElementById('mainFeature1Value').textContent = Math.round(document.getElementById('mainFeature1').value * 100) + '%';
            document.getElementById('mainFeature2Value').textContent = Math.round(document.getElementById('mainFeature2').value * 100) + '%';
            document.getElementById('mainFeature3Value').textContent = Math.round(document.getElementById('mainFeature3').value * 100) + '%';
            document.getElementById('subFeature1Value').textContent = Math.round(document.getElementById('subFeature1').value * 100) + '%';
            document.getElementById('subFeature2Value').textContent = Math.round(document.getElementById('subFeature2').value * 100) + '%';
            document.getElementById('subFeature3Value').textContent = Math.round(document.getElementById('subFeature3').value * 100) + '%';
        };

        window.applyImportanceToSelectedRace = function() {
            if (!currentEditingRace) {
                showAlert('先にレースを選択してください', 'error');
                return;
            }
            
            if (!allRacesData?.races) {
                showAlert('先にレースデータを読み込んでください', 'error');
                return;
            }

            const race = allRacesData.races.find(r => r.raceNumber === currentEditingRace);
            if (!race) {
                showAlert('選択されたレースが見つかりません', 'error');
                return;
            }

            // 特徴量重要度データを適用
            if (!race.horses) race.horses = {};
            
            // 本命馬の特徴量重要度
            if (!race.horses.main) race.horses.main = {};
            race.horses.main.importance = [
                { 
                    label: document.getElementById('mainFeature1Label').value || '特徴量1', 
                    value: parseFloat(document.getElementById('mainFeature1').value) 
                },
                { 
                    label: document.getElementById('mainFeature2Label').value || '特徴量2', 
                    value: parseFloat(document.getElementById('mainFeature2').value) 
                },
                { 
                    label: document.getElementById('mainFeature3Label').value || '特徴量3', 
                    value: parseFloat(document.getElementById('mainFeature3').value) 
                }
            ];

            // 対抗馬の特徴量重要度
            if (!race.horses.sub) race.horses.sub = {};
            race.horses.sub.importance = [
                { 
                    label: document.getElementById('subFeature1Label').value || '特徴量1', 
                    value: parseFloat(document.getElementById('subFeature1').value) 
                },
                { 
                    label: document.getElementById('subFeature2Label').value || '特徴量2', 
                    value: parseFloat(document.getElementById('subFeature2').value) 
                },
                { 
                    label: document.getElementById('subFeature3Label').value || '特徴量3', 
                    value: parseFloat(document.getElementById('subFeature3').value) 
                }
            ];

            logAllRaces(`✅ ${currentEditingRace}に特徴量重要度を適用しました`);
            showAlert(`${currentEditingRace}に特徴量重要度を適用しました`, 'success');
            updateRaceStatus();
        };

        window.previewImportanceBars = function() {
            const preview = {
                '本命馬': [
                    `${document.getElementById('mainFeature1Label').value}: ${document.getElementById('mainFeature1').value}`,
                    `${document.getElementById('mainFeature2Label').value}: ${document.getElementById('mainFeature2').value}`,
                    `${document.getElementById('mainFeature3Label').value}: ${document.getElementById('mainFeature3').value}`
                ],
                '対抗馬': [
                    `${document.getElementById('subFeature1Label').value}: ${document.getElementById('subFeature1').value}`,
                    `${document.getElementById('subFeature2Label').value}: ${document.getElementById('subFeature2').value}`,
                    `${document.getElementById('subFeature3Label').value}: ${document.getElementById('subFeature3').value}`
                ]
            };
            
            logAllRaces('👁️ 特徴量重要度プレビュー:');
            logAllRaces(`本命: ${preview['本命馬'].join(', ')}`);
            logAllRaces(`対抗: ${preview['対抗馬'].join(', ')}`);
            
            showAlert('特徴量重要度のプレビューをログに表示しました', 'success');
        };

        // ===== 全レース一括変換機能 =====
        window.convertAllRaces = async function() {
            const externalText = document.getElementById('external_prediction').value;
            if (!externalText.trim()) {
                showAlert('変換するテキストを入力してください', 'error');
                return;
            }

            const progressDiv = document.getElementById('conversion-progress');
            if (!progressDiv) {
                console.warn('conversion-progress element not found');
                showAlert('進捗表示エリアが見つかりません', 'error');
                return;
            }

            progressDiv.style.display = 'block';
            progressDiv.innerHTML = '';

            function logProgress(message) {
                const timestamp = new Date().toLocaleTimeString();
                if (progressDiv) {
                    progressDiv.innerHTML += `<div>[${timestamp}] ${message}</div>`;
                    progressDiv.scrollTop = progressDiv.scrollHeight;
                }
            }

            try {
                logProgress('🔍 全レーステキストを解析中...');
                
                // 全レース分のテキストを解析
                const allRacesData = parseAllRacesPrediction(externalText);
                
                logProgress(`✅ ${allRacesData.races.length}レースを検出しました`);
                logProgress('🤖 各レースのAI予想データを生成中...');

                // 各レースのAI予想データを生成
                const races = [];
                for (let i = 0; i < allRacesData.races.length; i++) {
                    const raceData = allRacesData.races[i];
                    logProgress(`処理中: ${raceData.raceNumber}R (${raceData.horses.length}頭)`);
                    
                    const aiRaceData = generateRaceData(raceData, allRacesData);
                    races.push(aiRaceData);
                }

                // allRacesPrediction.json形式で出力
                const finalData = {
                    raceDate: allRacesData.raceDate,
                    track: allRacesData.track,
                    totalRaces: races.length,
                    races: races,
                    planAccess: {
                        free: {
                            races: ["11R"],
                            description: "メインレースのみ（最終レースの1つ前）"
                        },
                        standard: {
                            races: ["10R", "11R", "12R"],
                            description: "後半3レース"
                        },
                        premium: {
                            races: ["1R", "2R", "3R", "4R", "5R", "6R", "7R", "8R", "9R", "10R", "11R", "12R"],
                            description: "全レース"
                        }
                    }
                };

                // メインレース設定（11Rをデフォルト）
                const mainRaceIndex = races.findIndex(r => r.raceNumber === '11R');
                if (mainRaceIndex !== -1) {
                    races[mainRaceIndex].isMainRace = true;
                }

                // JSONを表示
                const jsonString = JSON.stringify(finalData, null, 2);
                document.getElementById('json-output').value = jsonString;
                document.getElementById('json-output-section').style.display = 'block';

                logProgress(`🎉 完了！全${races.length}レースのAI予想JSONを生成しました`);
                showAlert(`✅ 全レース変換完了！${races.length}レースのAI予想データを生成しました`, 'success');

            } catch (error) {
                console.error('変換エラー:', error);
                logProgress(`❌ エラー: ${error.message}`);
                showAlert('変換中にエラーが発生しました: ' + error.message, 'error');
            }
        }

        window.clearConversion = function() {
            document.getElementById('external_prediction').value = '';
            document.getElementById('conversion-progress').style.display = 'none';
            document.getElementById('json-output-section').style.display = 'none';
            parsedPredictionData = null;
            showAlert('フォームをクリアしました', 'success');
        }

        // 全レース解析（複数レース対応）
        function parseAllRacesPrediction(text) {
            const sections = text.split(/\n\s*\n/).filter(section => section.trim());
            const result = {
                races: [],
                raceDate: null,
                track: null
            };

            let globalDate = null;
            let globalTrack = null;

            for (const section of sections) {
                try {
                    const raceData = parseExternalPrediction(section);
                    if (raceData.horses.length > 0) {
                        // 最初に見つけた日付・競馬場をグローバルに設定
                        if (!globalDate && raceData.raceDate) globalDate = raceData.raceDate;
                        if (!globalTrack && raceData.trackName) globalTrack = raceData.trackName;
                        
                        result.races.push(raceData);
                    }
                } catch (error) {
                    console.warn('レースセクション解析エラー:', section, error);
                }
            }

            // 日付・競馬場設定
            result.raceDate = globalDate || new Date().toISOString().split('T')[0];
            result.track = globalTrack || '川崎競馬';

            // レース番号順にソート
            result.races.sort((a, b) => (a.raceNumber || 99) - (b.raceNumber || 99));

            return result;
        }

        // レースデータ生成（統一関数）
        function generateRaceData(raceData, allRacesData) {
            // race-config.jsから一元管理された設定を使用
            const raceNum = raceData.raceNumber || 1;
            
            return {
                raceNumber: raceNum + 'R',
                raceName: raceData.raceName || getDefaultRaceName(raceNum),
                tier: getRaceTier(raceNum),
                isMainRace: false, // 後で設定
                displayOrder: raceData.raceNumber,
                raceInfo: {
                    title: `${allRacesData.track.replace('競馬', '')}${raceData.raceNumber || 1}R ${raceData.raceName || 'サラ系'}`,
                    date: allRacesData.raceDate,
                    track: allRacesData.track,
                    raceNumber: (raceData.raceNumber || 1) + 'R',
                    raceName: raceData.raceName || getDefaultRaceName(raceData.raceNumber || raceNum),
                    abilityIndex: (50 + Math.random() * 40).toFixed(1),
                    recommendation: "B+",
                    expectedReturn: (70 + Math.random() * 80).toFixed(0),
                    // 新規追加：レース詳細情報
                    distance: raceData.raceDistance ? raceData.raceDistance + 'm' : '',
                    horseCount: raceData.horseCount || 0,
                    startTime: raceData.startTime || '',
                    raceCondition: raceData.raceCondition || '',
                    // 表示用統合文字列
                    raceDetails: `${allRacesData.track || '川崎'}${raceData.raceNumber}R ${raceData.raceDistance ? raceData.raceDistance + 'm' : ''} ${raceData.horseCount ? '（' + raceData.horseCount + '頭）' : ''} ${raceData.startTime ? '発走時刻' + raceData.startTime : ''} ${raceData.raceName || 'サラ系'} ${raceData.raceCondition || ''}`
                },
                horses: generateHorsesDataForRace(raceData),
                strategies: generateStrategiesForRace(raceData),
                analysis: generateAnalysisForRace(raceData),
                preview: generatePreviewDataForRace(raceData),
                allHorses: generateAllHorsesDataForRace(raceData),
                totalHorses: raceData.horses.length,
                lastUpdated: new Date().toISOString()
            };
        }

        function generateHorsesDataForRace(raceData) {
            const horses = {};
            
            // スコアベースでの自動役割割り当て
            const sortedHorses = [...raceData.horses].sort((a, b) => {
                const scoreA = a.score || 62;
                const scoreB = b.score || 62;
                if (scoreB === scoreA) {
                    // 同点の場合は登場順（配列のインデックス）で決定
                    return raceData.horses.indexOf(a) - raceData.horses.indexOf(b);
                }
                return scoreB - scoreA;
            });
            
            // 役割自動割り当て（スコア順・同点なら登場順）
            const mainHorse = sortedHorses[0]; // 最高スコア→本命（1頭固定）
            const subHorse = sortedHorses[1]; // 2番目→対抗（1頭固定）
            const darkHorses = sortedHorses.slice(2, 4); // 3-4番目→単穴（2頭固定）
            const underHorses = sortedHorses.slice(4, 8); // 5-8番目→連下（1-4頭）
            const pressHorses = sortedHorses.slice(8); // 9番目以降→×抑え（0-4頭）
            
            // 互換性のため、従来の印による分類も併用
            const legacyMainHorse = raceData.horses.find(h => h.mark === '◎');
            const legacySubHorse = raceData.horses.find(h => h.mark === '○' || h.mark === '◯');
            const legacyDarkHorses = raceData.horses.filter(h => h.mark === '▲');

            // スコアベース（優先）または従来の印ベースで本命を設定
            const selectedMain = mainHorse || legacyMainHorse;
            if (selectedMain) {
                horses.main = {
                    number: selectedMain.number,
                    name: selectedMain.name,
                    type: "本命",
                    factors: [
                        {icon: "★", text: convertToStarRating("総合評価:★★★", "本命", selectedMain.score || 85)},
                        ...(selectedMain.score ? [{icon: "🎯", text: `累積スコア: ${selectedMain.score}pt`}] : [])
                    ],
                    importance: [
                        {label: "安定性", value: ((selectedMain.score || 85) + 3) / 100},
                        {label: "能力上位性", value: ((selectedMain.score || 85) + 3) / 100},
                        {label: "展開利", value: ((selectedMain.score || 85) - 6) / 100}
                    ]
                };
            }

            // スコアベース（優先）または従来の印ベースで対抗を設定
            const selectedSub = subHorse || legacySubHorse;
            if (selectedSub) {
                horses.sub = {
                    number: selectedSub.number,
                    name: selectedSub.name,
                    type: "対抗",
                    factors: [
                        {icon: "★", text: convertToStarRating("総合評価:★★★", "対抗", selectedSub.score || 85)},
                        ...(selectedSub.score ? [{icon: "🎯", text: `累積スコア: ${selectedSub.score}pt`}] : [])
                    ],
                    importance: [
                        {label: "先行力", value: ((selectedSub.score || 85) + 8) / 100},
                        {label: "スピード指数", value: ((selectedSub.score || 85) - 6) / 100},
                        {label: "枠順優位", value: ((selectedSub.score || 85) - 2) / 100}
                    ]
                };
            }

            // ▲印（単穴）最大2頭まで処理
            if (darkHorses.length > 0) {
                horses.sub1 = {
                    number: darkHorses[0].number,
                    name: darkHorses[0].name,
                    type: "単穴",
                    factors: [
                        {icon: "🎯", text: `累積スコア: ${darkHorses[0].score || 75}pt`}
                    ],
                    importance: [
                        {label: "安定性", value: ((darkHorses[0].score || 75) - 5) / 100},
                        {label: "爆発力", value: ((darkHorses[0].score || 75) + 5) / 100},
                        {label: "展開利", value: (darkHorses[0].score || 75) / 100}
                    ]
                };
                
                if (darkHorses.length > 1) {
                    horses.sub2 = {
                        number: darkHorses[1].number,
                        name: darkHorses[1].name,
                        type: "単穴2",
                        factors: [
                            {icon: "🎯", text: `累積スコア: ${darkHorses[1].score || 70}pt`}
                        ],
                        importance: [
                            {label: "爆発力", value: (darkHorses[1].score || 70) / 100},
                            {label: "穴馬適性", value: (darkHorses[1].score || 70) / 100},
                            {label: "展開利", value: (darkHorses[1].score || 70) / 100}
                        ]
                    };
                }
            }

            return horses;
        }

        function generateStrategiesForRace(raceData) {
            const mainHorses = raceData.horses.filter(h => h.mark === '◎');
            const subHorses = raceData.horses.filter(h => h.mark === '○' || h.mark === '◯');
            const darkHorses = raceData.horses.filter(h => h.mark === '▲');
            const underHorses = raceData.horses.filter(h => h.mark === '△');
            const pressHorses = raceData.horses.filter(h => h.mark === '×'); // ×印（押さえ）追加
            
            const main = mainHorses[0]?.number || 1;
            const subs = subHorses.map(h => h.number);
            const darks = darkHorses.map(h => h.number);
            const unders = underHorses.map(h => h.number);
            const press = pressHorses.map(h => h.number); // ×印の馬番配列

            return {
                safe: {
                    title: "戦略A: 高的中率型",
                    recommendation: 3,
                    hitRate: (70 + Math.random() * 15).toFixed(1),
                    returnRate: (110 + Math.random() * 30).toFixed(0),
                    riskLevel: "low",
                    bets: [
                        { type: "馬単", horses: `${main} → ${[...subs, ...darks].slice(0, 3).join(',')}`, points: `${Math.max(2, subs.length + Math.min(darks.length, 2))}点` },
                        { type: "馬連", horses: `${main} - ${[...subs, ...darks].slice(0, 3).join(',')}`, points: `${Math.max(2, subs.length + Math.min(darks.length, 2))}点` },
                        { type: "3連複", horses: `${main}-${subs[0] || darks[0] || 2} - ${[...darks, ...unders].slice(0, 3).join(',')}`, points: "6点" }
                    ],
                    expectedPayout: "3-6倍",
                    payoutType: "堅実決着想定"
                },
                balance: {
                    title: "戦略B: バランス型",
                    recommendation: 2,
                    hitRate: (55 + Math.random() * 15).toFixed(1),
                    returnRate: (140 + Math.random() * 40).toFixed(0),
                    riskLevel: "medium",
                    bets: [
                        { type: "馬単", horses: `${main} → ${[...subs, ...darks].join(',')}`, points: `${Math.max(3, subs.length + darks.length)}点` },
                        { type: "3連複", horses: `${main},${subs[0] || darks[0] || 2}-${[...darks, ...unders].join(',')}`, points: "10点" },
                        { type: "ワイド", horses: `${main}-${[...subs, ...darks].join(',')}`, points: `${Math.max(2, subs.length + darks.length)}点` }
                    ],
                    expectedPayout: "6-12倍",
                    payoutType: "中穴配当想定"
                },
                aggressive: {
                    title: "戦略C: 高配当追求型",
                    recommendation: 2,
                    hitRate: (25 + Math.random() * 20).toFixed(1),
                    returnRate: (250 + Math.random() * 200).toFixed(0),
                    riskLevel: "high",
                    bets: press.length > 0 ? [
                        // ×印がある場合：×印を使った高配当狙い
                        { type: "3連単", horses: `${press.slice(0,2).join(',')}→${main}→${[...subs, ...darks, ...unders].join(',')}`, points: `${Math.min(12, press.length * 4)}点` },
                        { type: "馬単", horses: `${press.join(',')}→${main},${subs[0] || darks[0] || 2}`, points: `${Math.min(8, press.length * 2)}点` },
                        { type: "3連複", horses: `${press[0] || 3}-${main}-${[...darks, ...unders].join(',')}`, points: "6点" }
                    ] : [
                        // ×印がない場合：従来の高配当戦略
                        { type: "3連単", horses: `${main}→${[...subs, ...darks].slice(0, 2).join(',')}→${[...darks, ...unders].join(',')}`, points: "12点" },
                        { type: "3連単", horses: `${subs[0] || darks[0] || 2}→${main}→${[...darks, ...unders].join(',')}`, points: "8点" },
                        { type: "馬単", horses: `${darks[0] || 3}→${main},${subs[0] || 2}`, points: "2点" }
                    ],
                    expectedPayout: press.length > 0 ? "20倍以上" : "12倍以上",
                    payoutType: press.length > 0 ? "大穴・万馬券狙い" : "大穴視野"
                }
            };
        }

        function generateAnalysisForRace(raceData) {
            const mainHorse = raceData.horses.find(h => h.mark === '◎');
            return {
                raceExpected: `XGBoostモデル: ◎${mainHorse ? mainHorse.number + mainHorse.name : '本命馬'}の安定性を評価`,
                keyIndicators: {
                    accuracy: (70 + Math.random() * 20).toFixed(1),
                    similarRaces: `${Math.floor(15 + Math.random() * 35)}件`,
                    recommendedInvestment: "資金の1-2%"
                }
            };
        }

        function generatePreviewDataForRace(raceData) {
            const mainHorse = raceData.horses.find(h => h.mark === '◎');
            const subHorse = raceData.horses.find(h => h.mark === '○' || h.mark === '◯');
            
            return {
                summary: `推奨投資戦略: ${mainHorse ? mainHorse.name : '本命'}${subHorse ? '、' + subHorse.name : ''}を中心とした馬単、期待値+${(5 + Math.random() * 25).toFixed(1)}%`,
                features: "特徴量重要度: 安定性(0.90)、能力上位性(0.85)、展開利(0.75)",
                riskAnalysis: "中リスク、バランス型"
            };
        }

        function generateAllHorsesDataForRace(raceData) {
            // スコアベースで役割を決定
            const sortedHorses = [...raceData.horses].sort((a, b) => {
                const scoreA = a.score || 62;
                const scoreB = b.score || 62;
                if (scoreB === scoreA) {
                    return raceData.horses.indexOf(a) - raceData.horses.indexOf(b);
                }
                return scoreB - scoreA;
            });
            
            return raceData.horses.map(horse => {
                const index = sortedHorses.indexOf(horse);
                let type, displayMark;
                
                if (index === 0) {
                    type = '本命';
                    displayMark = '◎';
                } else if (index === 1) {
                    type = '対抗';
                    displayMark = '○';
                } else if (index >= 2 && index <= 3) {
                    type = '単穴';
                    displayMark = '▲';
                } else if (index >= 4 && index <= 7) {
                    type = '連下';
                    displayMark = '△';
                } else {
                    type = '押さえ';
                    displayMark = '×';
                }
                
                return {
                    number: horse.number,
                    name: horse.name,
                    mark: displayMark,
                    type: type,
                    factors: [
 
                        {icon: "★", text: type === '押さえ' ? "大穴適性: 高変動" : convertToStarRating("総合評価:★★★", type, horse.score)},
                        ...(horse.score ? [{icon: "🎯", text: `累積スコア: ${horse.score}pt`}] : [])
                    ]
                };
            });
        }

        // 外部予想解析
        function parseExternalPrediction(text) {
            const lines = text.split('\n').map(line => line.trim()).filter(line => line);
            const result = {
                horses: [],
                raceDate: null,
                trackName: null,
                raceNumber: null,
                raceName: null,
                raceDistance: null,
                // 新規追加項目
                horseCount: 0,
                startTime: '',
                raceCondition: ''
            };

            // 日付と競馬場情報を抽出
            const headerMatch = text.match(/(\d+\/\d+)([^\d]*?)([\d０-９]+)[ＲRr]/i);
            if (headerMatch) {
                const [month, day] = headerMatch[1].split('/');
                const year = new Date().getFullYear();
                result.raceDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                
                const trackText = headerMatch[2];
                if (trackText.includes('川崎')) result.trackName = '川崎';
                else if (trackText.includes('大井')) result.trackName = '大井';
                else if (trackText.includes('船橋')) result.trackName = '船橋';
                else if (trackText.includes('浦和')) result.trackName = '浦和';

                result.raceNumber = parseInt(headerMatch[3].replace(/[０-９]/g, s => String.fromCharCode(s.charCodeAt(0) - 0xFEE0)));
            } else {
                // フォールバック: レース番号のみを抽出
                const raceNumMatch = text.match(/([1-9]|1[0-2])[ＲRr]/i);
                if (raceNumMatch) {
                    result.raceNumber = parseInt(raceNumMatch[1]);
                    result.trackName = '川崎競馬'; // デフォルト
                } else {
                    console.warn('レース番号が解析できません:', text.substring(0, 100));
                    // 暫定値として1Rを設定（後で一括変換で適切な番号を設定）
                    result.raceNumber = 1;
                    result.trackName = '川崎競馬';
                }
            }

            // レース名と詳細情報を抽出（複数パターン対応）
            // パターン1: 川崎1R 1,400m（11頭）発走時刻14:45 ツクツクボウシ賞 ２歳(四)
            const detailedPattern1 = text.match(/(\w+)(\d+)[ＲRr]\s*([,\d]+)m[^\d]*（(\d+)頭）[^\d]*(\d{1,2}[:：]\d{2})[^\n]*?([^\s\d]+賞?)[^\n]*?([^\n]*)/);
            
            // パターン2: 川崎1R ツクツクボウシ賞 1,400m（11頭）２歳(四) 14:45
            const detailedPattern2 = text.match(/(\w+)(\d+)[ＲRr]\s*([^\s\d]+賞?)[^\d]*([,\d]+)m[^\d]*（(\d+)頭）[^\n]*?([^\d]*?)(\d{1,2}[:：]\d{2})/);
            
            // パターン3: 距離のみ抽出 1400m または 1,400m
            const distancePattern = text.match(/(\d{1,2}[,]?\d{3})m/);
            
            // パターン4: 頭数のみ抽出 （11頭）
            const horseCountPattern = text.match(/（(\d+)頭）/);
            
            // パターン5: 発走時刻のみ抽出 14:45
            const startTimePattern = text.match(/(\d{1,2}[:：]\d{2})/);

            if (detailedPattern1) {
                result.raceDistance = detailedPattern1[3] || '';
                result.horseCount = parseInt(detailedPattern1[4]) || 0;
                result.startTime = detailedPattern1[5] || '';
                result.raceName = detailedPattern1[6] || '';
                result.raceCondition = detailedPattern1[7] || '';
            } else if (detailedPattern2) {
                result.raceName = detailedPattern2[3] || '';
                result.raceDistance = detailedPattern2[4] || '';
                result.horseCount = parseInt(detailedPattern2[5]) || 0;
                result.raceCondition = detailedPattern2[6] || '';
                result.startTime = detailedPattern2[7] || '';
            } else {
                // フォールバック：シンプルなレース名抽出
                const raceNameMatch = text.match(/\d+[ＲRr]\s+([^\n◎○▲△×☆★]+)/i);
                if (raceNameMatch) {
                    result.raceName = raceNameMatch[1].trim();
                }
                
                // 個別に詳細情報を抽出
                if (distancePattern) {
                    result.raceDistance = distancePattern[1];
                }
                if (horseCountPattern) {
                    result.horseCount = parseInt(horseCountPattern[1]);
                }
                if (startTimePattern) {
                    result.startTime = startTimePattern[1];
                }
            }

            // 馬情報を抽出（複数パターンに対応、×印も含む）
            const horsePatterns = [
                /([◎○◯▲△×☆★])\s*([０-９0-9]+)\s*(.+?)(?=[\n◎○◯▲△×☆★]|$)/g,
                /([◎○◯▲△×☆★])([０-９0-9]+)(.+?)(?=[\n◎○◯▲△×☆★]|$)/g,
                /([◎○◯▲△×☆★])\s*([^\s]+)/g
            ];

            for (const pattern of horsePatterns) {
                const matches = [...text.matchAll(pattern)];
                if (matches.length > 0) {
                    matches.forEach(match => {
                        const mark = match[1];
                        const numberStr = match[2] || '';
                        const name = (match[3] || match[2] || '').trim();
                        
                        // 馬番を抽出（全角→半角変換）
                        const number = parseInt(numberStr.replace(/[０-９]/g, s => 
                            String.fromCharCode(s.charCodeAt(0) - 0xFEE0)
                        )) || result.horses.length + 1;

                        if (name && !name.match(/^[０-９0-9]+$/)) {
                            result.horses.push({ mark, number, name: name.replace(/^[０-９0-9]+/, '') });
                        }
                    });
                    if (result.horses.length > 0) break;
                }
            }
            
            // 印の頭数制限を適用
            // ◎:1頭、○:1頭、▲:最大2頭、△:最大4頭、×:最大6頭
            const limitedHorses = [];
            const counts = { '◎': 0, '○': 0, '◯': 0, '▲': 0, '△': 0, '×': 0 };
            const limits = { '◎': 1, '○': 1, '◯': 1, '▲': 2, '△': 4, '×': 6 };
            
            result.horses.forEach(horse => {
                const mark = horse.mark === '◯' ? '○' : horse.mark; // ◯を○に統一
                if (counts[mark] !== undefined && counts[mark] < (limits[mark] || 99)) {
                    limitedHorses.push(horse);
                    counts[mark]++;
                }
            });
            result.horses = limitedHorses;

            const mainCount = result.horses.filter(h => h.mark === '◎').length;
            const subCount = result.horses.filter(h => h.mark === '○' || h.mark === '◯').length;
            if (mainCount === 1 && subCount <= 2) {
            } else if (mainCount === 1) {
            } else {
            }

            return result;
        }

        // 馬の新フォーマット factors 生成（累積スコアのみ）
        function generateHorseFactors(horse) {
            return [
                {icon: "🎯", text: `累積スコア: ${horse.score || 65}pt`}
            ];
        }


        function generateHorsesData() {
            const horses = {};
            const mainHorse = parsedPredictionData.horses.find(h => h.mark === '◎');
            const subHorse = parsedPredictionData.horses.find(h => h.mark === '○' || h.mark === '◯');
            const darkHorse = parsedPredictionData.horses.find(h => h.mark === '▲');

            if (mainHorse) {
                horses.main = {
                    number: mainHorse.number,
                    name: mainHorse.name,
                    type: "本命",
                    factors: [
                        {icon: "★", text: convertToStarRating("総合評価:★★★", "本命", mainHorse.score || 85)},
                        {icon: "🎯", text: `累積スコア: ${mainHorse.score || 85}pt`}
                    ],
                    importance: [
                        {label: "安定性", value: ((mainHorse.score || 85) + 3) / 100},
                        {label: "能力上位性", value: ((mainHorse.score || 85) + 3) / 100},
                        {label: "展開利", value: ((mainHorse.score || 85) - 6) / 100}
                    ]
                };
            }

            if (subHorse) {
                horses.sub = {
                    number: subHorse.number,
                    name: subHorse.name,
                    type: "対抗",
                    factors: [
                        {icon: "★", text: convertToStarRating("総合評価:★★★", "対抗", subHorse.score || 85)},
                        {icon: "🎯", text: `累積スコア: ${subHorse.score || 85}pt`}
                    ],
                    importance: [
                        {label: "先行力", value: ((subHorse.score || 85) + 8) / 100},
                        {label: "スピード指数", value: ((subHorse.score || 85) - 6) / 100},
                        {label: "枠順優位", value: ((subHorse.score || 85) - 2) / 100}
                    ]
                };
            }

            if (darkHorse) {
                horses.dark = {
                    number: darkHorse.number,
                    name: darkHorse.name,
                    type: "単穴",
                    factors: [
                        {icon: "🎯", text: `累積スコア: ${darkHorse.score || 75}pt`}
                    ],
                    importance: [
                        {label: "安定性", value: ((darkHorse.score || 75) - 5) / 100},
                        {label: "爆発力", value: ((darkHorse.score || 75) + 5) / 100},
                        {label: "展開利", value: (darkHorse.score || 75) / 100}
                    ]
                };
            }

            return horses;
        }

        // 投資戦略を自動生成
        function generateStrategies(parsed) {
            const mainHorses = parsed.horses.filter(h => h.mark === '◎');
            const subHorses = parsed.horses.filter(h => h.mark === '○' || h.mark === '◯');
            const darkHorses = parsed.horses.filter(h => h.mark === '▲');
            const underHorses = parsed.horses.filter(h => h.mark === '△');
            
            const main = mainHorses[0]?.number || 1;
            const subs = subHorses.map(h => h.number);
            const darks = darkHorses.map(h => h.number);
            const unders = underHorses.map(h => h.number);

            return {
                safe: {
                    title: "戦略A: 高的中率型",
                    recommendation: 4,
                    hitRate: (75 + Math.random() * 10).toFixed(1),
                    returnRate: (120 + Math.random() * 30).toFixed(0),
                    riskLevel: "low",
                    bets: [
                        { type: "馬単", horses: `${main} → ${[...subs, ...darks].slice(0, 3).join(',')}`, points: `${subs.length + Math.min(darks.length, 2)}点` },
                        { type: "馬連", horses: `${main} - ${[...subs, ...darks].slice(0, 3).join(',')}`, points: `${subs.length + Math.min(darks.length, 2)}点` },
                        { type: "3連複", horses: `${main}-${subs[0] || darks[0]} - ${[...darks, ...unders].slice(0, 3).join(',')}`, points: "6点" }
                    ],
                    expectedPayout: "3-6倍",
                    payoutType: "堅実決着想定"
                },
                balance: {
                    title: "戦略B: バランス型",
                    recommendation: 3,
                    hitRate: (60 + Math.random() * 10).toFixed(1),
                    returnRate: (160 + Math.random() * 40).toFixed(0),
                    riskLevel: "medium",
                    bets: [
                        { type: "馬単", horses: `${main} → ${[...subs, ...darks].join(',')}`, points: `${subs.length + darks.length}点` },
                        { type: "3連複", horses: `${main},${subs[0] || darks[0]}-${[...darks, ...unders].join(',')}`, points: "10点" },
                        { type: "ワイド", horses: `${main}-${[...subs, ...darks].join(',')}`, points: `${subs.length + darks.length}点` }
                    ],
                    expectedPayout: "6-12倍",
                    payoutType: "中穴配当想定"
                },
                aggressive: {
                    title: "戦略C: 高配当追求型",
                    recommendation: 2,
                    hitRate: (35 + Math.random() * 15).toFixed(1),
                    returnRate: (280 + Math.random() * 120).toFixed(0),
                    riskLevel: "high",
                    bets: [
                        { type: "3連単", horses: `${main}→${[...subs, ...darks].slice(0, 2).join(',')}→${[...darks, ...unders].join(',')}`, points: "12点" },
                        { type: "3連単", horses: `${subs[0] || darks[0]}→${main}→${[...darks, ...unders].join(',')}`, points: "8点" },
                        { type: "馬単", horses: `${darks[0] || 3}→${main},${subs[0] || 2}`, points: "2点" }
                    ],
                    expectedPayout: "15倍以上",
                    payoutType: "大穴視野"
                }
            };
        }

        function generateAnalysis(parsed) {
            const mainHorse = parsed.horses.find(h => h.mark === '◎');
            return {
                raceExpected: `XGBoostモデル: ◎${mainHorse ? mainHorse.number + mainHorse.name : '本命馬'}の安定性を評価`,
                keyIndicators: {
                    accuracy: (75 + Math.random() * 15).toFixed(1),
                    similarRaces: `${Math.floor(20 + Math.random() * 30)}件`,
                    recommendedInvestment: "資金の2-4%"
                }
            };
        }

        function generatePreviewData(parsed) {
            const mainHorse = parsed.horses.find(h => h.mark === '◎');
            const subHorse = parsed.horses.find(h => h.mark === '○' || h.mark === '◯');
            
            return {
                summary: `推奨投資戦略: ${mainHorse ? mainHorse.name : '本命'}${subHorse ? '、' + subHorse.name : ''}を中心とした馬単、期待値+${(10 + Math.random() * 20).toFixed(1)}%`,
                features: "特徴量重要度: 安定性(0.95)、能力上位性(0.88)、展開利(0.82)",
                riskAnalysis: "中リスク、バランス型"
            };
        }

        function generateAllHorsesData() {
            return parsedPredictionData.horses.map(horse => ({
                number: horse.number,
                name: horse.name,
                mark: horse.mark,
                type: horse.mark === '◎' ? '本命' : 
                      horse.mark === '○' || horse.mark === '◯' ? '対抗' : 
                      horse.mark === '▲' ? '単穴' : 
                      horse.mark === '△' ? '連下' : '押さえ',
                factors: [{icon: "★", text: convertToStarRating("総合評価:★★★", horse.mark === '◎' ? '本命' : horse.mark === '○' || horse.mark === '◯' ? '対抗' : horse.mark === '▲' ? '単穴' : horse.mark === '△' ? '連下' : '押さえ', horse.score)}]
            }));
        }

        // ===== 個別レース編集機能 =====
        window.editRace = function(raceNumber) {
            currentEditingRace = raceNumber;
            
            // レース編集セクションを表示
            const editSection = document.getElementById('race-edit-section');
            editSection.style.display = 'block';
            
            // タイトルを更新
            const title = document.getElementById('race-edit-title');
            const tierMap = {
                '1R': 'premium', '2R': 'premium', '3R': 'premium', '4R': 'premium', '5R': 'premium',
                '6R': 'premium', '7R': 'premium', '8R': 'premium', '9R': 'premium',
                '10R': 'standard', '11R': 'メイン・free', '12R': 'standard'
            };
            title.textContent = `編集中: ${raceNumber} (${tierMap[raceNumber] || 'unknown'})`;
            
            // 既存データがある場合は読み込み
            if (allRacesData && allRacesData.races) {
                const existingRace = allRacesData.races.find(r => r.raceNumber === raceNumber);
                if (existingRace) {
                    loadRaceDataToForm(existingRace);
                } else {
                    // デフォルトデータを生成
                    loadDefaultRaceData(raceNumber);
                }
            } else {
                loadDefaultRaceData(raceNumber);
            }
            
            logAllRaces(`🎯 ${raceNumber}の詳細編集を開始しました`);
            
            // スクロールして編集セクションに移動
            editSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        };

        function loadRaceDataToForm(raceData) {
            // レース基本情報を読み込み
            document.getElementById('edit-race-name').value = raceData.raceName || '';
            document.getElementById('edit-ability-index').value = raceData.raceInfo?.abilityIndex || '';
            document.getElementById('edit-recommendation').value = raceData.raceInfo?.recommendation || 'B+';
            document.getElementById('edit-expected-return').value = raceData.raceInfo?.expectedReturn || '';
            
            // 馬情報を読み込み
            if (raceData.horses?.main) {
                document.getElementById('edit-main-number').value = raceData.horses.main.number || '';
                document.getElementById('edit-main-name').value = raceData.horses.main.name || '';
            }
            
            if (raceData.horses?.sub1) {
                document.getElementById('edit-sub1-number').value = raceData.horses.sub1.number || '';
                document.getElementById('edit-sub1-name').value = raceData.horses.sub1.name || '';
            }
            
            if (raceData.horses?.sub2) {
                document.getElementById('edit-sub2-number').value = raceData.horses.sub2.number || '';
                document.getElementById('edit-sub2-name').value = raceData.horses.sub2.name || '';
            }
        }

        function loadDefaultRaceData(raceNumber) {
            // デフォルトデータを設定
            const raceNum = parseInt(raceNumber.replace('R', ''));
            
            document.getElementById('edit-race-name').value = `サラ系3歳以上`;
            document.getElementById('edit-ability-index').value = (75 + Math.random() * 20).toFixed(1);
            document.getElementById('edit-recommendation').value = raceNum === 11 ? 'A+' : 'B+';
            document.getElementById('edit-expected-return').value = (120 + Math.random() * 50).toFixed(0);
            
            // デフォルト馬情報
            document.getElementById('edit-main-number').value = Math.floor(Math.random() * 12) + 1;
            document.getElementById('edit-main-name').value = `本命馬${raceNum}`;
            
            document.getElementById('edit-sub1-number').value = Math.floor(Math.random() * 12) + 1;
            document.getElementById('edit-sub1-name').value = `対抗馬${raceNum}`;
            
            document.getElementById('edit-sub2-number').value = Math.floor(Math.random() * 12) + 1;
            document.getElementById('edit-sub2-name').value = `単穴馬${raceNum}`;
        }

        window.saveRaceEdit = function() {
            if (!currentEditingRace) {
                showAlert('編集中のレースがありません', 'error');
                return;
            }
            
            try {
                // フォームデータを取得
                const raceData = {
                    raceNumber: currentEditingRace,
                    raceName: document.getElementById('edit-race-name').value,
                    tier: getRaceTier(parseInt(currentEditingRace.replace('R', ''))),
                    isMainRace: isMainRace(parseInt(currentEditingRace.replace('R', ''))),
                    displayOrder: parseInt(currentEditingRace.replace('R', '')),
                    raceInfo: {
                        title: `川崎${currentEditingRace} ${document.getElementById('edit-race-name').value}`,
                        date: new Date().toISOString().split('T')[0],
                        track: "川崎競馬",
                        raceNumber: currentEditingRace,
                        raceName: document.getElementById('edit-race-name').value,
                        abilityIndex: document.getElementById('edit-ability-index').value,
                        recommendation: document.getElementById('edit-recommendation').value,
                        expectedReturn: document.getElementById('edit-expected-return').value
                    },
                    horses: {
                        main: {
                            number: parseInt(document.getElementById('edit-main-number').value),
                            name: document.getElementById('edit-main-name').value,
                            type: '本命',
                        },
                        sub1: {
                            number: parseInt(document.getElementById('edit-sub1-number').value),
                            name: document.getElementById('edit-sub1-name').value,
                            type: '対抗',
                        },
                        sub2: {
                            number: parseInt(document.getElementById('edit-sub2-number').value),
                            name: document.getElementById('edit-sub2-name').value,
                            type: '単穴',
                        }
                    }
                };
                
                // データを保存
                if (!allRacesData) {
                    allRacesData = {
                        raceDate: new Date().toISOString().split('T')[0],
                        track: "川崎競馬",
                        totalRaces: 12,
                        races: []
                    };
                }
                
                // 既存レースを更新または新規追加
                const existingIndex = allRacesData.races.findIndex(r => r.raceNumber === currentEditingRace);
                if (existingIndex >= 0) {
                    allRacesData.races[existingIndex] = raceData;
                } else {
                    allRacesData.races.push(raceData);
                }
                
                // ソート
                allRacesData.races.sort((a, b) => a.displayOrder - b.displayOrder);
                
                updateRaceStatus();
                logAllRaces(`✅ ${currentEditingRace}の変更を保存しました`);
                showAlert(`${currentEditingRace}の変更を保存しました`, 'success');
                
            } catch (error) {
                console.error('レース保存エラー:', error);
                showAlert('レースの保存に失敗しました', 'error');
                logAllRaces(`❌ ${currentEditingRace}の保存に失敗: ${error.message}`);
            }
        };

        window.cancelRaceEdit = function() {
            document.getElementById('race-edit-section').style.display = 'none';
            currentEditingRace = null;
            logAllRaces('❌ レース編集をキャンセルしました');
        };

        window.resetRaceToDefault = function() {
            if (!currentEditingRace) return;
            
            if (confirm(`${currentEditingRace}の設定をデフォルトに戻しますか？`)) {
                loadDefaultRaceData(currentEditingRace);
                logAllRaces(`🔄 ${currentEditingRace}をデフォルト設定に戻しました`);
                showAlert(`${currentEditingRace}をデフォルトに戻しました`, 'success');
            }
        };

        // ===== その他のユーティリティ関数 =====
        function copyToClipboard(elementId) {
            const element = document.getElementById(elementId);
            const text = element.value || element.textContent;
            
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text).then(() => {
                    showAlert('📋 JSONデータをクリップボードにコピーしました', 'success');
                }).catch((err) => {
                    console.error('Clipboard copy failed:', err);
                    // フォールバック: 古い方法を試行
                    fallbackCopyTextToClipboard(element, text);
                });
            } else {
                // フォールバック: 古い方法
                fallbackCopyTextToClipboard(element, text);
            }
        }
        
        function fallbackCopyTextToClipboard(element, text) {
            element.select();
            element.setSelectionRange(0, 99999); // モバイル用
            try {
                const successful = document.execCommand('copy');
                if (successful) {
                    showAlert('📋 JSONデータをクリップボードにコピーしました', 'success');
                } else {
                    showAlert('❌ コピーに失敗しました。手動で選択してコピーしてください', 'error');
                }
            } catch (err) {
                console.error('Fallback copy failed:', err);
                showAlert('❌ コピーに失敗しました。手動で選択してコピーしてください', 'error');
            }
        }

        function downloadJson() {
            if (!allRacesData) {
                showAlert('ダウンロードするデータがありません', 'error');
                return;
            }

            const jsonString = JSON.stringify(allRacesData, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = 'allRacesPrediction.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showAlert('JSONファイルをダウンロードしました。このファイルをsrc/data/allRacesPrediction.jsonに保存してください', 'success');
        }

        // ===== レース設定検証関数 =====
        function validateRaceConfiguration(data) {
            const errors = [];
            
            // 11Rがメインレースかチェック
            const race11 = data.races?.find(r => r.raceNumber === '11R');
            if (race11) {
                if (race11.tier !== 'free') {
                    errors.push('❌ エラー: 11Rがfreeではありません（現在: ' + race11.tier + '）');
                }
                if (!race11.isMainRace) {
                    errors.push('❌ エラー: 11RのisMainRaceがtrueではありません');
                }
            }
            
            // 12Rが誤ってfreeになっていないかチェック
            const race12 = data.races?.find(r => r.raceNumber === '12R');
            if (race12) {
                if (race12.tier === 'free') {
                    errors.push('❌ 重大エラー: 12Rが無料設定になっています！12Rはstandardです！');
                }
                if (race12.isMainRace) {
                    errors.push('❌ 重大エラー: 12Rがメインレースになっています！11Rがメインです！');
                }
            }
            
            // planAccessのチェック
            if (data.planAccess?.free?.races) {
                if (data.planAccess.free.races.includes('12R')) {
                    errors.push('❌ エラー: planAccess.free.racesに12Rが含まれています');
                }
                if (!data.planAccess.free.races.includes('11R')) {
                    errors.push('❌ エラー: planAccess.free.racesに11Rが含まれていません');
                }
            }
            
            if (errors.length > 0) {
                console.error('レース設定検証エラー:');
                errors.forEach(err => {
                    console.error(err);
                    logAllRaces(err);
                });
                showAlert('レース設定に問題があります。ログを確認してください。', 'error');
                return false;
            }
            
            console.log('✅ レース設定検証: 正常');
            return true;
        }

        // ===== 個別レース編集機能 =====
        window.editRace = function(raceNumber) {
            if (!allRacesData || !allRacesData.races) {
                showAlert('先にデータを読み込んでください', 'error');
                return;
            }

            const race = allRacesData.races.find(r => r.raceNumber === raceNumber + 'R');
            if (!race) {
                showAlert(`${raceNumber}Rのデータが見つかりません`, 'error');
                return;
            }

            currentEditingRace = race;
            
            // 編集フォームに値を設定
            document.getElementById('edit-race-name').value = race.raceName || '';
            document.getElementById('edit-ability-index').value = race.raceInfo?.abilityIndex || '';
            document.getElementById('edit-recommendation').value = race.raceInfo?.recommendation || 'A';
            document.getElementById('edit-expected-return').value = race.raceInfo?.expectedReturn || '';
            
            // 馬情報設定
            if (race.horses?.main) {
                document.getElementById('edit-main-number').value = race.horses.main.number || '';
                document.getElementById('edit-main-name').value = race.horses.main.name || '';
            }
            
            if (race.horses?.sub) {
                document.getElementById('edit-sub1-number').value = race.horses.sub.number || '';
                document.getElementById('edit-sub1-name').value = race.horses.sub.name || '';
            }
            
            if (race.horses?.sub1) {
                document.getElementById('edit-sub2-number').value = race.horses.sub1.number || '';
                document.getElementById('edit-sub2-name').value = race.horses.sub1.name || '';
            }
            
            // 編集セクションを表示
            document.getElementById('race-edit-section').style.display = 'block';
            document.getElementById('race-edit-title').textContent = `編集中: ${raceNumber}R ${race.raceName || ''}`;
            
            // 編集セクションまでスクロール
            document.getElementById('race-edit-section').scrollIntoView({ behavior: 'smooth' });
            
            logAllRaces(`📝 ${raceNumber}R の編集を開始`);
        };

        window.saveRaceEdit = function() {
            if (!currentEditingRace) {
                showAlert('編集中のレースがありません', 'error');
                return;
            }

            try {
                // フォームから値を取得して更新
                currentEditingRace.raceName = document.getElementById('edit-race-name').value || currentEditingRace.raceName;
                
                if (!currentEditingRace.raceInfo) {
                    currentEditingRace.raceInfo = {};
                }
                
                currentEditingRace.raceInfo.abilityIndex = document.getElementById('edit-ability-index').value || currentEditingRace.raceInfo.abilityIndex;
                currentEditingRace.raceInfo.recommendation = document.getElementById('edit-recommendation').value || currentEditingRace.raceInfo.recommendation;
                currentEditingRace.raceInfo.expectedReturn = document.getElementById('edit-expected-return').value || currentEditingRace.raceInfo.expectedReturn;
                
                // レース名の更新をraceInfoのtitleとraceNameにも反映
                currentEditingRace.raceInfo.raceName = currentEditingRace.raceName;
                currentEditingRace.raceInfo.title = `${allRacesData.track.replace('競馬', '')}${currentEditingRace.raceNumber} ${currentEditingRace.raceName}`;
                
                // 馬情報更新
                if (currentEditingRace.horses?.main) {
                    const mainNumber = document.getElementById('edit-main-number').value;
                    const mainName = document.getElementById('edit-main-name').value;
                    
                    if (mainNumber) currentEditingRace.horses.main.number = parseInt(mainNumber);
                    if (mainName) currentEditingRace.horses.main.name = mainName;
                }
                
                if (currentEditingRace.horses?.sub) {
                    const subNumber = document.getElementById('edit-sub1-number').value;
                    const subName = document.getElementById('edit-sub1-name').value;
                    
                    if (subNumber) currentEditingRace.horses.sub.number = parseInt(subNumber);
                    if (subName) currentEditingRace.horses.sub.name = subName;
                }
                
                if (currentEditingRace.horses?.sub1) {
                    const sub2Number = document.getElementById('edit-sub2-number').value;
                    const sub2Name = document.getElementById('edit-sub2-name').value;
                    
                    if (sub2Number) currentEditingRace.horses.sub1.number = parseInt(sub2Number);
                    if (sub2Name) currentEditingRace.horses.sub1.name = sub2Name;
                }
                
                // lastUpdatedを更新
                currentEditingRace.lastUpdated = new Date().toISOString();
                
                logAllRaces(`✅ ${currentEditingRace.raceNumber} の変更を保存しました`);
                showAlert(`${currentEditingRace.raceNumber} ${currentEditingRace.raceName} の変更を保存しました`, 'success');
                
                // 編集セクションを非表示
                document.getElementById('race-edit-section').style.display = 'none';
                currentEditingRace = null;
                
                // レースボタンを更新
                updateRaceStatus();
                
            } catch (error) {
                handleError(error, 'レース保存');
            }
        };

        window.cancelRaceEdit = function() {
            document.getElementById('race-edit-section').style.display = 'none';
            currentEditingRace = null;
            logAllRaces('❌ レース編集をキャンセルしました');
        };

        window.resetRaceToDefault = function() {
            if (!currentEditingRace) {
                showAlert('編集中のレースがありません', 'error');
                return;
            }

            const raceNumber = parseInt(currentEditingRace.raceNumber.replace('R', ''));
            
            // デフォルト値で上書き
            currentEditingRace.raceName = getDefaultRaceName(raceNumber);
            currentEditingRace.raceInfo.raceName = currentEditingRace.raceName;
            currentEditingRace.raceInfo.title = `${allRacesData.track.replace('競馬', '')}${currentEditingRace.raceNumber} ${currentEditingRace.raceName}`;
            
            // フォームにデフォルト値を反映
            document.getElementById('edit-race-name').value = currentEditingRace.raceName;
            
            logAllRaces(`🔄 ${currentEditingRace.raceNumber} をデフォルト値に戻しました`);
            showAlert('レース情報をデフォルトに戻しました', 'warning');
        };

        // ===== 外部予想一括変換機能 =====
        window.convertAllRaces = function() {
            const inputText = document.getElementById('external_prediction').value.trim();
            
            if (!inputText) {
                showAlert('外部予想データを入力してください', 'error');
                return;
            }

            try {
                showConversionProgress('🔄 外部予想データの解析を開始...');
                
                // 入力データを解析
                const parsedData = parseAllRacesFromInput(inputText);
                
                if (!parsedData.races || parsedData.races.length === 0) {
                    throw new Error('有効なレースデータが見つかりませんでした');
                }

                showConversionProgress(`📊 ${parsedData.races.length}レースのデータを検出しました`);
                
                // AI予想形式に変換
                const allRacesData = convertToAIPredictionFormat(parsedData);
                
                // JSONを生成・表示
                const jsonString = JSON.stringify(allRacesData, null, 2);
                document.getElementById('json-output').value = jsonString;
                document.getElementById('json-output-section').style.display = 'block';
                
                // グローバル変数にも保存
                window.allRacesData = allRacesData;
                
                showConversionProgress(`✅ 完了！全${parsedData.races.length}レースのAI予想JSONを生成しました`);
                showAlert(`外部予想を正常にAI予想形式に変換しました（${parsedData.races.length}レース）`, 'success');
                
                // 新システムにデータを渡す
                if (typeof setGeneratedData === 'function') {
                    setGeneratedData(allRacesData);
                }
                
                updateRaceStatus();
                
            } catch (error) {
                console.error('変換エラー:', error);
                showConversionProgress(`❌ エラー: ${error.message}`);
                showAlert('変換中にエラーが発生しました: ' + error.message, 'error');
            }
        };

        window.clearConversion = function() {
            const externalInput = document.getElementById('external_prediction');
            const progressDiv = document.getElementById('conversion-progress');
            const outputSection = document.getElementById('json-output-section');

            if (externalInput) externalInput.value = '';
            if (progressDiv) progressDiv.style.display = 'none';
            if (outputSection) outputSection.style.display = 'none';

            showAlert('フォームをクリアしました', 'success');
        };

        function showConversionProgress(message) {
            const progressDiv = document.getElementById('conversion-progress');
            if (!progressDiv) {
                console.warn('conversion-progress element not found in showConversionProgress');
                return;
            }

            const timestamp = new Date().toLocaleTimeString();

            if (progressDiv.style.display === 'none') {
                progressDiv.style.display = 'block';
                progressDiv.innerHTML = '';
            }

            progressDiv.innerHTML += `<div>[${timestamp}] ${message}</div>`;
            progressDiv.scrollTop = progressDiv.scrollHeight;
        }

        // 外部予想データのパース（1〜12レース一括対応）
        function parseAllRacesFromInput(inputText) {
            const result = {
                races: [],
                raceDate: null,
                track: null
            };

            // 行ごとに分割
            const lines = inputText.split('\n').map(line => line.trim()).filter(line => line);
            
            let currentRace = null;
            let globalDate = null;
            let globalTrack = null;

            for (const line of lines) {
                // レース情報行の検出（例: "8/24川崎2R 1,200m（10頭）発走時刻15:20 サラ系3歳"）
                const raceInfoMatch = line.match(/(\d+\/\d+)([^\d]*?)(\d+)R\s*([^\s]+)\s*[（(](\d+)頭[）)]\s*発走時刻(\d+:\d+)\s*(.+)/);
                
                if (raceInfoMatch) {
                    // 前のレースを保存
                    if (currentRace && currentRace.horses.length > 0) {
                        result.races.push(currentRace);
                    }
                    
                    // 新しいレースを開始
                    const [, date, track, raceNum, distance, horseCount, startTime, raceName] = raceInfoMatch;
                    
                    if (!globalDate) globalDate = convertDateFormat(date);
                    if (!globalTrack) globalTrack = extractTrackName(track);
                    
                    currentRace = {
                        raceNumber: parseInt(raceNum),
                        raceName: raceName.trim(),
                        raceDate: globalDate,
                        trackName: globalTrack,
                        raceDistance: distance.replace(/[^\d]/g, ''),
                        horseCount: parseInt(horseCount),
                        startTime: startTime,
                        horses: [],
                    };
                    
                    showConversionProgress(`📝 ${raceNum}R ${raceName} を解析中...`);
                    continue;
                }

                // 馬情報の検出
                // 新形式: "8番 ◎ ○ ▲ ▲ キチョウ" 
                // 旧形式: "◎8キチョウ" も継続対応
                const newFormatMatch = line.match(/^(\d+)番\s+([◎○▲△×\s]+)\s+(.+)/);
                const oldFormatMatch = line.match(/^([◎○▲△×])(\d+)(.+)/);
                
                if (newFormatMatch && currentRace) {
                    const [, number, marksStr, name] = newFormatMatch;
                    const marks = marksStr.trim().split(/\s+/).filter(mark => /[◎○▲△×]/.test(mark));
                    
                    // 累積スコア計算（ベース62pt + 印の値）
                    const markValues = {'◎': 7, '○': 6, '▲': 5, '△': 4, '×': 0};
                    const totalScore = 62 + marks.reduce((sum, mark) => sum + (markValues[mark] || 0), 0);
                    
                    currentRace.horses.push({
                        mark: marks[0] || '△', // 最初の印を表示用マークとして使用
                        marks: marks, // 全印を保存
                        number: parseInt(number),
                        name: name.trim(),
                        score: totalScore
                    });
                } else if (oldFormatMatch && currentRace) {
                    // 旧形式対応（後方互換性）
                    const [, mark, number, name] = oldFormatMatch;
                    const markValues = {'◎': 7, '○': 6, '▲': 5, '△': 4, '×': 0};
                    const totalScore = 62 + (markValues[mark] || 0);
                    
                    currentRace.horses.push({
                        mark: mark,
                        marks: [mark],
                        number: parseInt(number),
                        name: name.trim(),
                        score: totalScore
                    });
                }
            }

            // 最後のレースを保存
            if (currentRace && currentRace.horses.length > 0) {
                result.races.push(currentRace);
            }

            result.raceDate = globalDate || new Date().toISOString().split('T')[0];
            result.track = globalTrack || '川崎競馬';

            return result;
        }

        // 日付形式変換（8/24 → 2025-08-24）
        function convertDateFormat(dateStr) {
            const [month, day] = dateStr.split('/').map(num => parseInt(num));
            const year = new Date().getFullYear();
            
            return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
        }

        // 競馬場名抽出
        function extractTrackName(trackStr) {
            const trackNames = {
                '川崎': '川崎競馬',
                '大井': '大井競馬', 
                '船橋': '船橋競馬',
                '浦和': '浦和競馬'
            };
            
            for (const [key, value] of Object.entries(trackNames)) {
                if (trackStr.includes(key)) {
                    return value;
                }
            }
            
            return '川崎競馬'; // デフォルト
        }

        // AI予想形式への変換
        function convertToAIPredictionFormat(parsedData) {
            const result = {
                raceDate: parsedData.raceDate,
                track: parsedData.track,
                totalRaces: parsedData.races.length,
                races: parsedData.races.map(race => generateRaceData(race, parsedData)),
                planAccess: {
                    free: { races: ["11R"] },
                    standard: { races: ["10R", "12R"] },
                    premium: { races: ["1R", "2R", "3R", "4R", "5R", "6R", "7R", "8R", "9R"] }
                },
                lastUpdated: new Date().toISOString(),
                dataVersion: "2.0",
                generatedBy: "NANKANアナリティクス管理システム"
            };

            // メインレース設定
            const mainRace = result.races.find(r => r.raceNumber === '11R');
            if (mainRace) {
                mainRace.isMainRace = true;
            }

            return result;
        }

        // ===== 初期化 =====
        document.addEventListener('DOMContentLoaded', function() {
            logAllRaces('🚀 システム初期化完了');
            updateImportanceBars();
            generateRaceEditButtons(); // レース編集ボタンを動的生成
            
            // 初期データをチェック（もしあれば）
            if (allRacesData) {
                validateRaceConfiguration(allRacesData);
            }
        });
    </script>
</body>
</html>