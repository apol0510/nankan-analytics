---
export const prerender = true; // 静的サイト生成用に戻す
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="マイページ - NANKANアナリティクス">
    <div class="dashboard-container">
        <!-- ヘッダー -->
        <div class="dashboard-header">
            <h1>🔑 会員ログイン</h1>
            <p class="subtitle">ご登録済みの会員様専用 - NANKANアナリティクス</p>
        </div>

        <!-- ログインフォーム（初期表示） -->
        <div id="login-section" class="login-section">
            <div class="login-card">
                <h2>🔐 会員様ログイン</h2>
                <p>ご登録済みのメールアドレスでマイページにアクセスしてください</p>
                <form id="magic-link-form">
                    <input 
                        type="email" 
                        id="email-input" 
                        placeholder="example@email.com"
                        required
                        class="email-input"
                    />
                    <button type="submit" class="submit-btn" id="magic-link-btn">
                        ログイン
                    </button>
                </form>
                <div id="success-message" class="success-message" style="display: none;"></div>
                <div id="error-message" class="error-message" style="display: none;"></div>

                <!-- 新規ユーザー向け案内 -->
                <div class="new-user-notice">
                    <p>🆕 <strong>初めてご利用の方</strong></p>
                    <p>まずは<a href="/free-signup/" class="link">こちらから無料で始める</a>で会員登録をお済ませください。</p>
                </div>
            </div>
        </div>

        <!-- ダッシュボード（ログイン後表示） -->
        <div id="dashboard-section" style="display: none;">
            <!-- 期限切れ警告（期限切れユーザーのみ表示） -->
            <div id="expiry-warning-section" class="expiry-warning-section" style="display: none;">
                <div class="expiry-warning-card">
                    <div class="expiry-warning-icon">⚠️</div>
                    <div class="expiry-warning-content">
                        <h3>プランの有効期限が切れています</h3>
                        <div class="expiry-details">
                            <p>お客様の<strong id="expired-plan-name">プレミアム</strong>プランは、<strong id="expiry-date-display">2025-10-01</strong>に有効期限を迎えました。</p>
                            <p>現在は<strong>無料会員</strong>としてご利用いただけます。</p>
                        </div>
                        <div class="expiry-actions">
                            <div class="expiry-action-card">
                                <h4>🔄 継続をご希望の場合</h4>
                                <p>クレジットカード登録で自動更新（おすすめ）</p>
                                <a href="/pricing/" class="expiry-btn renew">今すぐプランを更新</a>
                            </div>
                            <div class="expiry-action-card secondary">
                                <h4>🚪 退会をご希望の場合</h4>
                                <p>退会処理後も有効期限内はご利用可能</p>
                                <button id="withdrawal-btn-expired" class="expiry-btn withdraw">退会処理へ進む</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 今回のログイン情報 -->
            <div id="login-info-section" class="login-info-section" style="display: none;">
                <div class="login-info-card">
                    <div class="login-info-icon">🎉</div>
                    <div class="login-info-content">
                        <h3 id="login-info-title">ログイン成功</h3>
                        <div id="login-info-message" class="login-info-message"></div>
                        <div id="login-info-points" class="login-info-points" style="display: none;">
                            <span class="points-icon">🎆</span>
                            <span id="login-points-text">ログインポイント獲得！</span>
                            <span id="login-points-value" class="points-value">+0pt</span>
                        </div>
                    </div>
                    <button id="login-info-close" class="close-btn">×</button>
                </div>
            </div>

            <!-- 穴馬ページリンク -->
            <div class="dark-horse-link-section">
                <a href="/dark-horse-picks/" class="dark-horse-link-btn">
                    <span class="dark-horse-icon">🐎</span>
                    <div class="dark-horse-text">
                        <span class="dark-horse-title">本日の穴馬抽出ツール</span>
                        <span class="dark-horse-subtitle">AI予想から狙い目の穴馬を自動抽出</span>
                    </div>
                    <span class="dark-horse-arrow">→</span>
                </a>
            </div>

            <!-- 会員ステータス -->
            <div class="status-section">
                <div class="status-grid">
                    <!-- メインステータスカード -->
                    <div class="status-card main-status">
                        <div class="status-header">
                            <div class="status-icon" id="main-status-icon">👤</div>
                            <div class="status-badge" id="status-badge">読み込み中</div>
                        </div>
                        <div class="status-info">
                            <h3>会員ステータス</h3>
                            <div id="membership-status" class="status-value">読み込み中...</div>
                            <div id="membership-details" class="status-details"></div>
                        </div>
                    </div>



                    <!-- VIP情報カード（Premiumのみ） -->
                    <div class="vip-status-card" id="vip-status-card" style="display: none;">
                        <div class="vip-header">
                            <div class="vip-icon">👑</div>
                            <div class="vip-title">PREMIUM会員特典</div>
                        </div>
                        <div class="vip-benefits" id="vip-benefits">
                            <div class="vip-benefit">✨ 優先サポート</div>
                            <div class="vip-benefit">🏆 限定コンテンツ</div>
                            <div class="vip-benefit">💰 ボーナスポイント</div>
                        </div>
                    </div>
                    
                    <!-- プラン特典カード（Standard/Free用） -->
                    <div class="plan-benefits-card" id="plan-benefits-card" style="display: none;">
                        <div class="plan-header">
                            <div class="plan-icon" id="plan-icon">🎁</div>
                            <div class="plan-title" id="plan-title">プラン特典</div>
                        </div>
                        <div class="plan-benefits" id="plan-benefits">
                            <div class="plan-benefit">🏇 後半3レース予想</div>
                            <div class="plan-benefit">💰 ログイン10pt</div>
                        </div>
                    </div>
                    
                </div>
            </div>

            <!-- 今日の予想 -->
            <div class="predictions-section">
                <h2>🏇 今日の予想</h2>
                <div class="predictions-grid">

                    <!-- 無料予想 -->
                    <div id="free-predictions" class="prediction-card free">
                        <div class="card-header">
                            <h3>🎁 無料予想</h3>
                            <span class="plan-badge free">FREE</span>
                        </div>
                        <div class="race-info">
                            <div class="race-title">メインレース（11R）</div>
                            <div class="confidence">予想精度: 87.3%</div>
                        </div>
                        <a href="/free-prediction/" class="view-btn">予想を見る</a>
                    </div>

                    <!-- Standard予想 -->
                    <div id="standard-predictions" class="prediction-card standard" style="display: none;">
                        <div class="card-header">
                            <h3>⚡ Standard予想</h3>
                            <span class="plan-badge standard">STANDARD</span>
                        </div>
                        <div class="race-info">
                            <div class="race-title">後半3レース（10R-12R）</div>
                            <div class="confidence">予想精度: 89.1%</div>
                        </div>
                        <a href="/standard-predictions/" class="view-btn">予想を見る</a>
                    </div>

                    <!-- Premium予想 -->
                    <div id="premium-predictions" class="prediction-card premium" style="display: none;">
                        <div class="card-header">
                            <h3>💎 Premium予想</h3>
                            <span class="plan-badge premium">PREMIUM</span>
                        </div>
                        <div class="race-info">
                            <div class="race-title">全レース（1R-12R）</div>
                            <div class="confidence">予想精度: 91.8%</div>
                        </div>
                        <a href="/premium-predictions/" class="view-btn">予想を見る</a>
                    </div>
                </div>
            </div>

            <!-- ポイントカード -->
            <div class="points-section">
                <div class="points-card">
                    <div class="points-header">
                        <h2>💰 保有ポイント</h2>
                        <div class="points-value">
                            <span id="current-points">0</span>
                            <span class="points-unit">pt</span>
                        </div>
                    </div>
                    <div class="points-progress">
                        <!-- 🎯 シンプルプログレス表示（復活防止対策） -->
                        <div class="simple-progress-container">
                            <div id="simple-progress-display">
                                <div class="progress-info-row">
                                    <span class="progress-current">💰 使用可能: <span id="current-points-simple">0</span>pt</span>
                                    <span class="progress-target">🎯 次の目標: <span id="target-points-simple">1000</span>pt</span>
                                </div>
                                <div class="progress-remaining">
                                    あと<span id="remaining-points-simple">1000</span>ptで次の目標達成！
                                </div>
                                <div class="simple-progress-bar">
                                    <div class="simple-progress-fill" id="simple-progress-fill" style="width: 0%;"></div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <!-- ポイント交換メニュー -->
            <div class="exchange-section">
                <div class="exchange-card">
                    <div class="exchange-header">
                        <h2>🎁 ポイント交換</h2>
                        <p class="exchange-subtitle">ポイントを特典と交換できます</p>
                    </div>
                    
                    <div class="exchange-grid">
                        <!-- 1000pt特典 -->
                        <div class="exchange-option">
                            <div class="exchange-cost">1000pt</div>
                            <div class="exchange-reward">AI解析による隠れ上昇馬情報</div>
                            <button class="exchange-btn" onclick="requestExchange(1000, 'AI解析による隠れ上昇馬情報')">
                                交換申請
                            </button>
                        </div>

                        <!-- 2000pt特典 -->
                        <div class="exchange-option premium-option">
                            <div class="exchange-cost">2000pt</div>
                            <div class="exchange-reward">AI解析による急上昇 激走穴馬情報</div>
                            <button class="exchange-btn" onclick="requestExchange(2000, 'AI解析による急上昇 激走穴馬情報')">
                                交換申請
                            </button>
                        </div>
                        
                        <!-- 3000pt特典 -->
                        <div class="exchange-option orange-option">
                            <div class="exchange-cost">3000pt</div>
                            <div class="exchange-reward">厩舎の発射タイミング予測による激走穴馬情報</div>
                            <button class="exchange-btn" onclick="requestExchange(3000, '厩舎の発射タイミング予測による激走穴馬情報')">
                                交換申請
                            </button>
                        </div>
                        
                    </div>
                    
                    <div class="exchange-note">
                        <small>※ 交換申請後、管理者が確認後に特典を提供いたします。</small>
                    </div>
                </div>
            </div>

            <!-- プラン管理（無料会員のみ表示） -->
            <div id="plan-section" class="plan-section" style="display: none;">
                <h2>📋 プラン管理</h2>
                <div class="plan-actions">
                    <a href="/pricing/" class="action-btn upgrade">プランをアップグレード</a>
                    <button id="logout-btn-free" class="action-btn logout">ログアウト</button>
                </div>
            </div>

            <!-- ログアウトボタン（有料会員のみ表示） -->
            <div id="logout-section-paid" class="logout-section-paid" style="display: none;">
                <button id="logout-btn-paid" class="action-btn logout-primary">ログアウト</button>
            </div>

            <!-- アップグレード促進（無料・Standard会員のみ表示） -->
            <div id="upgrade-promotion" class="upgrade-section" style="display: none;">
                <div class="upgrade-card">
                    <h3>🚀 さらなる投資効率を目指しませんか？</h3>
                    <p>上位プランで全レースの詳細予想と高精度分析データによる買い目にアクセスできます</p>
                    <a href="/pricing/" class="upgrade-btn">今すぐアップグレード</a>
                </div>
            </div>
        </div>
    </div>

    <!-- 簡略化された認証システム -->
    <script>

        // 簡略化されたセッション管理
        function isAuthenticated() {
            const userPlanData = localStorage.getItem('user-plan');
            const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
            const userPlan = localStorage.getItem('userPlan');
            
            return !!(userPlanData || isLoggedIn || userPlan);
        }
        
        async function getCustomerData() {
            console.log('🔍 getCustomerData 開始');
            
            // 新しい決済システムのデータを最優先
            const userPlanData = localStorage.getItem('user-plan');
            console.log('📦 user-plan データ:', userPlanData);
            
            if (userPlanData) {
                try {
                    const userData = JSON.parse(userPlanData);
                    console.log('📋 解析したuserData:', userData);
                    
                    // 実際のポイントをFunctionsから取得
                    console.log('🚀 fetchUserPoints 呼び出し開始:', userData.email);
                    const realPoints = await fetchUserPoints(userData.email);
                    console.log('🎯 取得したrealPoints:', realPoints);
                    
                    const result = {
                        email: userData.email,
                        plan: userData.plan || 'free',
                        points: realPoints,
                        hasClaimedReward: localStorage.getItem('hasClaimedReward') === 'true',
                        registrationDate: userData.registeredAt,
                        name: 'お客様'
                    };
                    console.log('✅ getCustomerData 返却値:', result);
                    return result;
                } catch (e) {
                    console.warn('user-plan解析エラー:', e);
                }
            }
            
            // 古いシステムのデータをフォールバック
            const email = localStorage.getItem('userEmail');
            const plan = localStorage.getItem('userPlan') || 'free';
            
            if (email || plan !== 'free') {
                // 実際のポイントをFunctionsから取得
                const realPoints = await fetchUserPoints(email);
                return {
                    email: email || 'member@example.com',
                    plan: plan,
                    points: realPoints,
                    hasClaimedReward: localStorage.getItem('hasClaimedReward') === 'true',
                    name: 'お客様'
                };
            }
            
            return null;
        }

        // Functionsからユーザーポイントを取得（実際のAirtableデータ優先）
        async function fetchUserPoints(email) {
            console.log('📝 fetchUserPoints 呼び出し:', email);
            if (!email) {
                console.log('⚠️ メールアドレスが空です');
                return 0;
            }
            
            try {
                const functionsUrl = window.location.hostname === 'localhost' 
                    ? 'http://localhost:8888/.netlify/functions/auth-user'
                    : '/.netlify/functions/auth-user';
                
                // auth-user Functionを使用（get-user-pointsは削除済み）
                const response = await fetch(functionsUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email: email })
                });
                
                if (!response.ok) {
                    console.error('ポイント取得エラー:', response.status);
                    return 0;
                }
                
                const data = await response.json();
                const points = data.user?.points || 0;
                console.log(`📊 Airtableから取得: ${points}pt (email: ${email})`);
                return points;
                
            } catch (error) {
                console.error('⚠️ ポイント取得エラー:', error);
                console.log('🔄 エラーのため0ptを返します');
                return 0;
            }
        }

        // ランク定義 - より長期的な達成感のある設計
        const RANK_THRESHOLDS = {
            ビギナー: { min: 0, max: 199, name: '🌱 ビギナー', next: 200 },
            ブロンズ: { min: 200, max: 599, name: '🥉 ブロンズ', next: 600 },
            シルバー: { min: 600, max: 1199, name: '🥈 シルバー', next: 1200 },
            ゴールド: { min: 1200, max: 2999, name: '🥇 ゴールド', next: 3000 },
            プラチナ: { min: 3000, max: 7999, name: '🏆 プラチナ', next: 8000 },
            ダイヤモンド: { min: 8000, max: Infinity, name: '💎 ダイヤモンド', next: null }
        };

        // ランク特典
        const RANK_BENEFITS = {
            ビギナー: ['毎日10ポイント獲得'],
            ブロンズ: ['毎日10ポイント獲得', '月間レポート'],
            シルバー: ['毎日10ポイント獲得', '月間レポート', '特典申請可能'],
            ゴールド: ['毎日10ポイント獲得', '優先サポート', '月間レポート', '特典申請可能'],
            プラチナ: ['毎日10ポイント獲得', '優先サポート', '詳細分析レポート', '特典申請可能'],
            ダイヤモンド: ['毎日10ポイント獲得', '個別AI分析', 'VIPサポート', '特典申請可能']
        };

        // 簡略化されたマジックリンクフォーム処理
        document.getElementById('magic-link-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('email-input').value;
            const button = document.getElementById('magic-link-btn');
            
            button.disabled = true;
            button.textContent = '送信中...';
            
            try {
                // Netlify Functions経由でAirtableから正確なプラン情報を取得（エラーハンドリング強化）
                let response;
                let data;
                
                try {
                    // 開発環境では直接Functions サーバーを呼び出す
                    const functionsUrl = window.location.hostname === 'localhost' 
                        ? 'http://localhost:8888/.netlify/functions/auth-user'
                        : '/.netlify/functions/auth-user';
                    
                    response = await fetch(functionsUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ email: email })
                    });
                    
                    if (!response.ok) {
                        // レスポンステキストを取得してログ出力
                        const errorText = await response.text();
                        console.error('🚨 Response error text:', errorText);
                        throw new Error(`Functions error: ${response.status} - ${errorText}`);
                    }
                    
                    data = await response.json();
                } catch (fetchError) {
                    console.error('Functions呼び出しエラー:', fetchError);
                    console.error('エラー詳細:', {
                        message: fetchError.message,
                        stack: fetchError.stack,
                        response: response ? {
                            status: response.status,
                            statusText: response.statusText,
                            url: response.url
                        } : null
                    });
                    
                    // 具体的なエラーメッセージを表示
                    throw new Error(`認証API接続エラー: ${fetchError.message}`);
                }
                
                if (data.success && data.user) {
                    console.log('✅ ログイン成功:', data.user);

                    // セッション情報保存
                    localStorage.setItem('isLoggedIn', 'true');
                    localStorage.setItem('userEmail', data.user.email);
                    localStorage.setItem('userPlan', data.user.plan);

                    // 期限切れ情報保存
                    if (data.isExpired) {
                        localStorage.setItem('isExpired', 'true');
                        localStorage.setItem('originalPlan', data.user.originalPlan || 'premium');
                        localStorage.setItem('expiryDate', data.user.expiryDate || '');
                    } else {
                        localStorage.removeItem('isExpired');
                        localStorage.removeItem('originalPlan');
                        if (data.user.expiryDate) {
                            localStorage.setItem('expiryDate', data.user.expiryDate);
                        }
                    }

                    const planNames = {
                        'free': '無料会員',
                        'Free': '無料会員',
                        'standard': 'Standard会員',
                        'Standard': 'Standard会員',
                        'premium': 'Premium会員',
                        'Premium': 'Premium会員',
                        'expired': '期限切れ' // 期限切れ表示
                    };

                    const planDisplayName = planNames[data.user.plan] || data.user.plan;
                    
                    // ログイン情報をダッシュボードに保存（画面切り替え後に表示用）
                    const loginInfo = {
                        planDisplayName: planDisplayName,
                        pointsAdded: data.user.pointsAdded,
                        totalPoints: data.user.points,
                        email: data.user.email
                    };
                    localStorage.setItem('loginInfo', JSON.stringify(loginInfo));
                    
                    // ログインポイント付与通知
                    if (data.user.pointsAdded > 0) {
                        const message = `✅ ${planDisplayName}でログイン！ログインポイント${data.user.pointsAdded}pt獲得`;
                        console.log('成功メッセージ:', message);
                        showSuccess(message);
                        console.log('ポイント通知表示:', data.user.pointsAdded);
                        showPointsNotification(data.user.pointsAdded);
                    } else {
                        const message = `✅ ${planDisplayName}でログインしました（本日のポイントは付与済み）`;
                        console.log('成功メッセージ（ポイント付与済み）:', message);
                        showSuccess(message);
                    }
                    
                    document.getElementById('email-input').value = '';
                    
                    // ダッシュボード表示用データ準備（Functionsから取得した実データを使用）
                    const dashboardData = {
                        email: data.user.email,
                        plan: data.user.plan,
                        points: data.user.points,  // Functions から取得した実際のポイント
                        hasClaimedReward: localStorage.getItem('hasClaimedReward') === 'true',
                        registrationDate: data.user.registeredAt || data.user.lastLogin,
                        name: 'お客様'
                    };
                    
                    setTimeout(() => {
                        showDashboard(dashboardData);
                        // ナビゲーション更新のためイベント発火
                        window.dispatchEvent(new Event('storage'));
                    }, 1000);
                } else {
                    throw new Error('Invalid customer data');
                }
                
            } catch (error) {
                console.error('Login error:', error);
                showError(`認証エラー: ${error.message}`);
            } finally {
                button.disabled = false;
                button.textContent = 'ログイン';
            }
        });

        // URLパラメータからトークン認証処理（簡略化）
        async function handleTokenAuth() {
            const urlParams = new URLSearchParams(window.location.search);
            const token = urlParams.get('token');
            const email = urlParams.get('email');
            
            if (token && email) {
                console.log('マジックリンク認証開始:', email);
                
                try {
                    // 簡略化された認証：メールアドレスからプランを推定
                    const mockCustomer = {
                        email: email,
                        plan: email.includes('premium') ? 'premium' : (email.includes('standard') ? 'standard' : 'free'),
                        registrationDate: new Date().toISOString()
                    };
                    
                    // セッション情報保存
                    localStorage.setItem('isLoggedIn', 'true');
                    localStorage.setItem('userEmail', mockCustomer.email);
                    localStorage.setItem('userPlan', mockCustomer.plan);
                    
                    console.log('認証成功:', mockCustomer);
                    // URLからパラメータを削除
                    window.history.replaceState({}, document.title, window.location.pathname);
                    // ダッシュボード表示
                    showDashboard(mockCustomer);
                    
                } catch (error) {
                    console.error('認証エラー:', error);
                    showError('認証に失敗しました');
                }
            }
        }

        // ダッシュボード表示
        function showDashboard(customerData) {
            console.log('🎨 showDashboard 開始, customerData:', customerData);

            // セクション切り替え
            document.getElementById('login-section').style.display = 'none';
            document.getElementById('dashboard-section').style.display = 'block';

            // 期限切れチェック・警告表示
            const isExpired = localStorage.getItem('isExpired') === 'true';
            if (isExpired) {
                showExpiryWarning();
            } else {
                document.getElementById('expiry-warning-section').style.display = 'none';
            }

            // ログイン情報表示
            showLoginInfo();

            // 会員情報表示
            updateMembershipInfo(customerData);

            // ポイント表示
            console.log('🎯 updatePointsDisplay 呼び出し, points:', customerData.points);
            updatePointsDisplay(customerData.points, customerData.hasClaimedReward);

            // プラン別コンテンツ表示
            showPlanContent(customerData.plan);
        }

        // 期限切れ警告表示
        function showExpiryWarning() {
            const originalPlan = localStorage.getItem('originalPlan') || 'Premium';
            const expiryDate = localStorage.getItem('expiryDate') || '不明';

            const planNames = {
                'premium': 'プレミアム',
                'Premium': 'プレミアム',
                'standard': 'スタンダード',
                'Standard': 'スタンダード'
            };

            document.getElementById('expired-plan-name').textContent = planNames[originalPlan] || originalPlan;
            document.getElementById('expiry-date-display').textContent = expiryDate;
            document.getElementById('expiry-warning-section').style.display = 'block';

            // 退会ボタンイベント設定（プラン判定付き）
            document.getElementById('withdrawal-btn-expired').addEventListener('click', function() {
                const modal = document.getElementById('withdrawalModal');
                const userPlan = localStorage.getItem('userPlan') || '';

                // 無料会員はモーダル表示、有料会員はwithdrawal-upsellへ遷移
                if (userPlan.toLowerCase() === 'free') {
                    if (modal) {
                        modal.style.display = 'flex';
                    }
                } else {
                    window.location.href = '/withdrawal-upsell/';
                }
            });
        }

        // ログイン情報表示
        function showLoginInfo() {
            const loginInfoData = localStorage.getItem('loginInfo');
            if (loginInfoData) {
                try {
                    const loginInfo = JSON.parse(loginInfoData);
                    const loginInfoSection = document.getElementById('login-info-section');
                    const loginInfoMessage = document.getElementById('login-info-message');
                    const loginInfoPoints = document.getElementById('login-info-points');
                    const loginPointsValue = document.getElementById('login-points-value');

                    // メッセージ設定
                    if (loginInfo.pointsAdded > 0) {
                        loginInfoMessage.textContent = `${loginInfo.planDisplayName}でログイン成功！`;
                        loginPointsValue.textContent = `+${loginInfo.pointsAdded}pt`;
                        loginInfoPoints.style.display = 'flex';
                    } else {
                        loginInfoMessage.textContent = `${loginInfo.planDisplayName}でログインしました（本日のポイントは付与済み）`;
                        loginInfoPoints.style.display = 'none';
                    }

                    // セクション表示
                    loginInfoSection.style.display = 'block';
                    
                    // ログイン情報を一度表示したら削除（リロード時に再表示しないため）
                    localStorage.removeItem('loginInfo');
                    
                } catch (e) {
                    console.error('ログイン情報の解析エラー:', e);
                }
            }
        }

        // 会員情報更新（統計情報付き）
        function updateMembershipInfo(data) {
            const planNames = {
                'free': '🎁 無料会員',
                'Free': '🎁 無料会員',
                'standard': '⚡ Standard会員',
                'Standard': '⚡ Standard会員',
                'premium': '💎 Premium会員',
                'Premium': '💎 Premium会員'
            };
            
            const planIcons = {
                'free': '🎁',
                'Free': '🎁',
                'standard': '⚡',
                'Standard': '⚡',
                'premium': '💎',
                'Premium': '💎'
            };
            
            const planBadgeTexts = {
                'free': 'FREE',
                'Free': 'FREE',
                'standard': 'STANDARD',
                'Standard': 'STANDARD',
                'premium': 'PREMIUM',
                'Premium': 'PREMIUM'
            };
            
            // メインステータス更新
            document.getElementById('membership-status').textContent = planNames[data.plan] || '🎁 無料会員';
            document.getElementById('main-status-icon').textContent = planIcons[data.plan] || '🎁';
            document.getElementById('status-badge').textContent = planBadgeTexts[data.plan] || 'FREE';
            
            let detailsHtml = `
                <div class="member-info-grid">
                    <div class="info-item">
                        <span class="info-label">📧 メールアドレス</span>
                        <span class="info-value">${data.email}</span>
                    </div>
            `;

            // 氏名表示
            if (data.name && data.name !== 'お客様') {
                detailsHtml += `
                    <div class="info-item">
                        <span class="info-label">👤 お名前</span>
                        <span class="info-value">${data.name}</span>
                    </div>
                `;
            }

            // 登録日表示
            if (data.registrationDate) {
                const regDate = new Date(data.registrationDate);
                detailsHtml += `
                    <div class="info-item">
                        <span class="info-label">📅 登録日</span>
                        <span class="info-value">${regDate.toLocaleDateString('ja-JP')}</span>
                    </div>
                `;
            }

            // 最終ログイン表示
            const lastLoginDate = data.lastLogin ? new Date(data.lastLogin) : new Date();
            detailsHtml += `
                <div class="info-item">
                    <span class="info-label">🕐 最終ログイン</span>
                    <span class="info-value">${lastLoginDate.toLocaleDateString('ja-JP')} ${lastLoginDate.toLocaleTimeString('ja-JP', {hour: '2-digit', minute: '2-digit'})}</span>
                </div>
            `;

            detailsHtml += `</div>`;


            document.getElementById('membership-details').innerHTML = detailsHtml;
            
            // ランク表示のみ
            updateCurrentRankDisplay(data.points || 0);
            updateRankGuide(data.points || 0);
            
            // プラン別特典カード表示
            const vipCard = document.getElementById('vip-status-card');
            const planCard = document.getElementById('plan-benefits-card');
            
            if (data.plan === 'premium' || data.plan === 'Premium') {
                // Premium会員はVIPカードを表示
                vipCard.style.display = 'block';
                planCard.style.display = 'none';
                updateVipBenefits(data.plan);
            } else if (data.plan === 'standard' || data.plan === 'Standard') {
                // Standard会員はプラン特典カードを表示
                vipCard.style.display = 'none';
                planCard.style.display = 'block';
                updatePlanBenefits('standard');
            } else {
                // Free会員は両方非表示
                vipCard.style.display = 'none';
                planCard.style.display = 'none';
            }
        }
        
        
        // VIP特典更新
        function updateVipBenefits(plan) {
            const benefits = {
                standard: [
                    '⚡ 後半3レース予想',
                    '📊 統計データ閲覧',
                    '💰 ログイン10pt'
                ],
                Standard: [
                    '⚡ 後半3レース予想',
                    '📊 統計データ閲覧',
                    '💰 ログイン10pt'
                ],
                premium: [
                    '💎 全レース予想',
                    '🏆 優先サポート',
                    '💰 ログイン30pt'
                ],
                Premium: [
                    '💎 全レース予想',
                    '🏆 優先サポート',
                    '💰 ログイン30pt'
                ]
            };
            
            const planBenefits = benefits[plan] || benefits.standard;
            document.getElementById('vip-benefits').innerHTML = planBenefits
                .map(benefit => `<div class="vip-benefit">${benefit}</div>`)
                .join('');
        }
        
        // プラン特典更新（Standard用）
        function updatePlanBenefits(plan) {
            const benefits = {
                standard: [
                    '🏇 後半3レース予想',
                    '📊 統計データ閲覧',
                    '💰 ログイン10pt'
                ]
            };
            
            const planBenefits = benefits[plan] || benefits.standard;
            document.getElementById('plan-benefits').innerHTML = planBenefits
                .map(benefit => `<div class="plan-benefit">${benefit}</div>`)
                .join('');
        }
        
        // 現在ランク表示更新
        function updateCurrentRankDisplay(points) {
            const RANK_INFO = {
                'ビギナー': { icon: '🌱', emoji: '🌱', name: 'ビギナー' },
                'ブロンズ': { icon: '🥉', emoji: '🥉', name: 'ブロンズ' },
                'シルバー': { icon: '🥈', emoji: '🥈', name: 'シルバー' },
                'ゴールド': { icon: '🥇', emoji: '🥇', name: 'ゴールド' },
                'プラチナ': { icon: '🏆', emoji: '🏆', name: 'プラチナ' },
                'ダイヤモンド': { icon: '💎', emoji: '💎', name: 'ダイヤモンド' }
            };
            
            // ランク判定ロジックと同じものを使用
            let currentRankKey = 'ビギナー';
            for (const [key, threshold] of Object.entries(RANK_THRESHOLDS)) {
                if (points >= threshold.min && points <= threshold.max) {
                    currentRankKey = key;
                    break;
                }
            }

        }
        
        // 🛡️ 安定化: 単一プログレスバー初期化
        function initializeProgressBar() {
            console.log('🚀 プログレスバー初期化開始');

            // 安定化: 1回のみ実行で競合を防ぐ
            setTimeout(() => {
                const pointsElement = document.getElementById('current-points');
                if (pointsElement) {
                    const actualPoints = parseInt(pointsElement.textContent) || 0; // フォールバック削除
                    console.log('🎯 実際のポイント値:', actualPoints, 'textContent:', pointsElement.textContent);
                    if (actualPoints > 0) {
                        console.log('🔄 initializeProgressBar からシンプルプログレス更新:', actualPoints);
                        updateSimpleProgress(actualPoints);
                    } else {
                        console.warn('⚠️ ポイント値が0または無効:', pointsElement.textContent);
                        // ⚠️ デバッグ: 0の場合でもsipmle progressを初期化
                        console.log('🔧 デバッグ: 0ptでもシンプルプログレス初期化');
                        updateSimpleProgress(0);
                    }
                } else {
                    console.error('❌ current-points要素が見つかりません');
                }
            }, 1000); // 遅延を1000msに延長してDOM更新を待つ

            // 🔧 定期的なシンク確認: メインポイント表示と同期
            setInterval(() => {
                const pointsElement = document.getElementById('current-points');
                const simplePointsElement = document.getElementById('current-points-simple');
                if (pointsElement && simplePointsElement) {
                    const mainPoints = parseInt(pointsElement.textContent) || 0;
                    const simplePoints = parseInt(simplePointsElement.textContent) || 0;

                    if (mainPoints !== simplePoints && mainPoints > 0) {
                        console.log(`🔧 シンク修正: メイン${mainPoints}pt → シンプル${simplePoints}pt を同期`);
                        updateSimpleProgress(mainPoints);
                    }
                }
            }, 2000); // 2秒ごとに同期チェック
        }

        // 🛡️ 復活防止対策: 既存セグメント更新関数
        function updateExistingSegment(currentSegmentIndex, goals, points) {
            const defaultProgressFill = document.getElementById('default-progress-fill');
            const defaultProgressText = document.getElementById('default-progress-text');

            // 安全な数値変換
            const numericPoints = typeof points === 'number' ? points : parseInt(points) || 0;

            if (defaultProgressFill && defaultProgressText && currentSegmentIndex >= 0) {
                // 🔧 根本修正: 正しいセグメント判定と目標計算
                let targetGoal, actualProgress;

                if (currentSegmentIndex >= goals.length) {
                    // 全目標達成済み
                    targetGoal = goals[goals.length - 1];
                    actualProgress = 100;
                } else {
                    // 現在進行中の目標
                    targetGoal = goals[currentSegmentIndex];
                    const prevGoal = currentSegmentIndex === 0 ? 0 : goals[currentSegmentIndex - 1].points;
                    actualProgress = ((numericPoints - prevGoal) / (targetGoal.points - prevGoal)) * 100;
                }

                const progress = Math.max(0, Math.min(100, actualProgress));
                console.log('🔍 根本修正後計算:', {
                    rawPoints: points,
                    numericPoints: numericPoints,
                    pointsType: typeof points,
                    currentSegmentIndex: currentSegmentIndex,
                    targetGoalPoints: targetGoal.points,
                    prevGoalPoints: currentSegmentIndex === 0 ? 0 : goals[currentSegmentIndex - 1]?.points,
                    calculation: `(${numericPoints} - ${currentSegmentIndex === 0 ? 0 : goals[currentSegmentIndex - 1]?.points}) / (${targetGoal.points} - ${currentSegmentIndex === 0 ? 0 : goals[currentSegmentIndex - 1]?.points}) * 100`,
                    actualProgress,
                    finalProgress: progress,
                    roundedProgress: Math.round(progress)
                });
                // プログレスバー更新（100%超過時は100%に制限）
                defaultProgressFill.style.width = Math.max(1, Math.min(100, progress)) + '%';
                defaultProgressText.textContent = Math.round(progress) + '%';

                // 🆕 目標テキストの動的更新
                const defaultSegmentTitle = document.querySelector('#default-segment .segment-title');
                if (defaultSegmentTitle) {
                    defaultSegmentTitle.textContent = `目標: ${targetGoal.points}pt`;
                    console.log('🎯 目標テキスト更新:', `目標: ${targetGoal.points}pt`);
                }

                console.log('🔄 既存セグメント更新成功:', Math.round(progress) + '%');
                console.log('🎯 最終表示値:', defaultProgressText.textContent, 'バー幅:', defaultProgressFill.style.width);
                return true; // 更新成功
            }

            console.log('⚠️ 既存セグメント要素が見つからないか、対象外のセグメント');
            return false; // 更新失敗
        }

        // 🎯 シンプルプログレス更新関数（復活防止対策）
        function updateSimpleProgress(points) {
            console.log('🎯 シンプルプログレス更新開始:', { points, type: typeof points });

            const goals = [
                { points: 1000, emoji: '🎯' },
                { points: 2000, emoji: '⚡' },
                { points: 3000, emoji: '🏆' }
            ];

            // 安全な数値変換
            const numericPoints = typeof points === 'number' ? points : parseInt(points) || 0;

            // 要素取得
            const currentPointsEl = document.getElementById('current-points-simple');
            const targetPointsEl = document.getElementById('target-points-simple');
            const remainingPointsEl = document.getElementById('remaining-points-simple');
            const progressFillEl = document.getElementById('simple-progress-fill');

            if (!currentPointsEl || !targetPointsEl || !remainingPointsEl || !progressFillEl) {
                console.error('❌ シンプルプログレス要素が見つかりません');
                return;
            }

            // 現在の目標を決定
            let targetGoal = goals[0]; // デフォルト1000pt
            let prevGoal = 0;

            for (let i = 0; i < goals.length; i++) {
                if (numericPoints < goals[i].points) {
                    targetGoal = goals[i];
                    prevGoal = i === 0 ? 0 : goals[i - 1].points;
                    break;
                } else if (i === goals.length - 1) {
                    // 全目標達成
                    targetGoal = goals[goals.length - 1];
                    prevGoal = goals[goals.length - 1].points;
                    break;
                }
            }

            // 残りポイント計算
            const remainingPoints = Math.max(0, targetGoal.points - numericPoints);

            // 進行度計算
            let progressPercent = 0;
            if (numericPoints >= targetGoal.points) {
                progressPercent = 100; // 全達成
            } else {
                progressPercent = ((numericPoints - prevGoal) / (targetGoal.points - prevGoal)) * 100;
            }

            // 表示更新
            currentPointsEl.textContent = numericPoints;
            targetPointsEl.textContent = targetGoal.points;
            remainingPointsEl.textContent = remainingPoints;
            progressFillEl.style.width = Math.max(1, Math.min(100, progressPercent)) + '%';

            console.log('✅ シンプルプログレス更新完了:', {
                現在: numericPoints,
                目標: targetGoal.points,
                残り: remainingPoints,
                進行度: progressPercent + '%'
            });
        }

        // 旧複雑関数（非使用）
        function updateProgressSegments(points) {
            // 安全な数値変換
            const numericPoints = typeof points === 'number' ? points : parseInt(points) || 0;
            console.log('🎯 updateProgressSegments 呼び出し:', { original: points, converted: numericPoints, type: typeof points });

            const goals = [
                { points: 1000, reward: '', emoji: '🎯' },
                { points: 2000, reward: '', emoji: '⚡' },
                { points: 3000, reward: '', emoji: '🏆' }
            ];

            const container = document.getElementById('dynamic-segments');
            console.log('📦 コンテナ要素:', container);
            if (!container) {
                console.error('❌ dynamic-segments 要素が見つかりません');
                return;
            }

            // 現在のセグメントを決定
            let currentSegmentIndex = 0;
            for (let i = 0; i < goals.length; i++) {
                if (numericPoints < goals[i].points) {
                    currentSegmentIndex = i;
                    break;
                } else if (i === goals.length - 1) {
                    currentSegmentIndex = goals.length; // 全達成
                    break;
                }
            }

            // セグメントHTMLを生成
            let segmentHTML = '';

            if (currentSegmentIndex < goals.length) {
                // 現在進行中のセグメント
                const currentGoal = goals[currentSegmentIndex];
                const prevGoal = currentSegmentIndex === 0 ? 0 : goals[currentSegmentIndex - 1].points;
                const progress = ((numericPoints - prevGoal) / (currentGoal.points - prevGoal)) * 100;

                console.log('🔍 プログレス計算:', {
                    points: numericPoints,
                    currentSegmentIndex,
                    currentGoal: currentGoal.points,
                    prevGoal,
                    progress: Math.round(progress)
                });

                segmentHTML = `
                    <div class="segment-item current-segment">
                        <div class="segment-header">
                            <div class="segment-left">
                                <span class="segment-emoji">${currentGoal.emoji}</span>
                                <span class="segment-title">目標: ${currentGoal.points}pt</span>
                            </div>
                            <span class="segment-progress">${Math.round(progress)}%</span>
                        </div>
                        <div class="segment-bar">
                            <div class="segment-fill" style="width: ${Math.max(1, progress)}%; background: linear-gradient(90deg, #fbbf24 0%, #f59e0b 100%);"></div>
                        </div>
                    </div>
                `;

                // 達成済みのセグメントも小さく表示
                for (let i = 0; i < currentSegmentIndex; i++) {
                    const achievedGoal = goals[i];
                    segmentHTML = `
                        <div class="segment-item achieved-segment">
                            <div class="segment-header">
                                <span class="segment-emoji">✅</span>
                                <span class="segment-title">${achievedGoal.points}pt 達成済み</span>
                            </div>
                            <div class="segment-reward-small">${achievedGoal.reward}</div>
                        </div>
                    ` + segmentHTML;
                }
            } else {
                // 全目標達成
                segmentHTML = `
                    <div class="segment-item completed-all">
                        <div class="segment-header">
                            <span class="segment-emoji">🎉</span>
                            <span class="segment-title">全目標達成！</span>
                        </div>
                        <div class="segment-label">
                            <span class="segment-reward">すべての特典が利用可能です</span>
                        </div>
                    </div>
                `;
            }

            // 🛡️ 復活防止対策: 既存要素を優先更新（innerHTML上書き防止）
            const existingUpdated = updateExistingSegment(currentSegmentIndex, goals, numericPoints);

            if (!existingUpdated && segmentHTML.trim()) {
                // 既存更新ができなかった場合のみ新HTMLを設定
                container.innerHTML = segmentHTML;
                console.log('📊 新セグメントHTML設定:', segmentHTML.substring(0, 200) + '...');
            } else if (existingUpdated) {
                console.log('✅ 既存セグメント更新で処理完了');
            } else {
                console.warn('⚠️ セグメント更新失敗、デフォルト表示を維持');
            }

            // 次の目標までの情報更新処理は削除（UI要素が削除されたため）
        }

        // ランク目安ガイド更新
        function updateRankGuide(currentPoints) {
            const rankItems = document.querySelectorAll('.rank-item');
            
            // 現在ランクをハイライト
            let currentRankKey = 'ビギナー';
            for (const [key, threshold] of Object.entries(RANK_THRESHOLDS)) {
                if (currentPoints >= threshold.min && currentPoints <= threshold.max) {
                    currentRankKey = key;
                    break;
                }
            }
            
            // ランクアイテムにハイライトを設定
            rankItems.forEach((item, index) => {
                const rankNames = ['ビギナー', 'ブロンズ', 'シルバー', 'ゴールド', 'プラチナ', 'ダイヤモンド'];
                
                if (rankNames[index] === currentRankKey) {
                    item.classList.add('current');
                } else {
                    item.classList.remove('current');
                }
            });
        }

        // ポイント獲得通知表示
        function showPointsNotification(points) {
            console.log('showPointsNotification 呼び出し:', points);
            const notification = document.createElement('div');
            notification.className = 'points-notification';
            notification.innerHTML = `
                <div class="notification-content">
                    🎆 ログインポイント獲得！
                    <span class="points-added">+${points}pt</span>
                </div>
            `;
            document.body.appendChild(notification);
            console.log('ポイント通知をDOMに追加:', notification);
            
            // アニメーション後に削除
            setTimeout(() => {
                notification.classList.add('fade-out');
                setTimeout(() => notification.remove(), 500);
            }, 3000);
        }
        
        // ポイント表示更新（射幸心を煽る演出付き）
        function updatePointsDisplay(points, hasClaimedReward = false) {
            console.log('🎯 updatePointsDisplay開始 - 受け取ったpoints:', points, typeof points);

            // ポイント数をアニメーション付きで表示
            animatePointsDisplay(points);

            // 🔥 実際のポイント値でシンプルプログレス更新
            console.log('🔄 ポイント値でシンプルプログレス更新:', points);
            updateSimpleProgress(points);

            // ランク判定
            let currentRankKey = 'ビギナー';
            for (const [key, threshold] of Object.entries(RANK_THRESHOLDS)) {
                if (points >= threshold.min && points <= threshold.max) {
                    currentRankKey = key;
                    break;
                }
            }
            
            
        }

        // ポイント数のアニメーション表示
        function animatePointsDisplay(targetPoints) {
            const pointsElement = document.getElementById('current-points');
            const currentPoints = parseInt(pointsElement.textContent) || 0;
            const duration = 1500; // 1.5秒
            const steps = 30;
            const increment = (targetPoints - currentPoints) / steps;
            
            let step = 0;
            const timer = setInterval(() => {
                step++;
                const currentValue = currentPoints + (increment * step);
                const roundedValue = Math.round(currentValue);
                pointsElement.textContent = roundedValue;
                // 🔧 アニメーション中もシンプルプログレス更新
                updateSimpleProgress(roundedValue);
                
                if (step >= steps) {
                    clearInterval(timer);
                    pointsElement.textContent = targetPoints;
                    // 🔧 アニメーション完了時にシンプルプログレス同期
                    console.log('🔧 アニメーション完了: シンプルプログレス更新', targetPoints);
                    updateSimpleProgress(targetPoints);
                    // 完了時にキラキラ演出
                    pointsElement.classList.add('points-sparkle');
                    setTimeout(() => {
                        pointsElement.classList.remove('points-sparkle');
                    }, 1000);
                }
            }, duration / steps);
        }

        // プログレスバーのアニメーション
        function animateProgressBar(progressElement, targetProgress) {
            const currentWidth = parseFloat(progressElement.style.width) || 0;
            const duration = 1200; // 1.2秒
            const steps = 24;
            const increment = (targetProgress - currentWidth) / steps;
            
            let step = 0;
            const timer = setInterval(() => {
                step++;
                const currentValue = currentWidth + (increment * step);
                progressElement.style.width = `${currentValue}%`;
                
                if (step >= steps) {
                    clearInterval(timer);
                    progressElement.style.width = `${targetProgress}%`;
                }
            }, duration / steps);
        }

        // プログレスバーの色更新（進捗に応じて）
        function updateProgressBarColor(progressElement, progress, rankKey) {
            progressElement.classList.remove(
                'progress-bronze', 'progress-silver', 'progress-gold', 
                'progress-platinum', 'progress-diamond', 'progress-max'
            );
            
            if (progress >= 90) {
                progressElement.classList.add('progress-max');
            } else if (rankKey === 'ダイヤモンド') {
                progressElement.classList.add('progress-diamond');
            } else if (rankKey === 'プラチナ') {
                progressElement.classList.add('progress-platinum');
            } else if (rankKey === 'ゴールド') {
                progressElement.classList.add('progress-gold');
            } else if (rankKey === 'シルバー') {
                progressElement.classList.add('progress-silver');
            } else {
                progressElement.classList.add('progress-bronze');
            }
        }

        // プラン別コンテンツ表示
        function showPlanContent(plan) {
            console.log('showPlanContent 呼び出し:', plan);
            
            const planLower = (plan || '').toLowerCase();
            
            // 無料予想の表示制御
            if (planLower === 'free' || planLower === '' || !planLower) {
                console.log('無料予想を表示（Free会員）');
                document.getElementById('free-predictions').style.display = 'block';
            } else {
                console.log('無料予想を非表示（有料会員）');
                document.getElementById('free-predictions').style.display = 'none';
            }
            
            // Standard予想の表示制御（Standard会員のみ）
            if (planLower === 'standard') {
                console.log('Standard予想を表示');
                document.getElementById('standard-predictions').style.display = 'block';
            } else {
                console.log('Standard予想を非表示');
                document.getElementById('standard-predictions').style.display = 'none';
            }
            
            // Premium予想の表示制御
            if (planLower === 'premium') {
                console.log('Premium予想を表示');
                document.getElementById('premium-predictions').style.display = 'block';
            }
            
            // プラン管理の表示制御（無料会員のみ）
            if (planLower === 'free') {
                console.log('プラン管理を表示（無料会員）');
                document.getElementById('plan-section').style.display = 'block';
            } else {
                // 有料会員はログアウトセクション表示
                console.log('ログアウトセクション表示（有料会員）');
                document.getElementById('logout-section-paid').style.display = 'block';
            }

            // アップグレード促進の表示制御
            if (planLower !== 'premium') {
                console.log('アップグレード促進を表示');
                document.getElementById('upgrade-promotion').style.display = 'block';
            }
        }

        // 成功メッセージ表示
        function showSuccess(message) {
            console.log('showSuccess 呼び出し:', message);
            const successEl = document.getElementById('success-message');
            console.log('success-message 要素:', successEl);
            if (successEl) {
                successEl.textContent = message;
                successEl.style.display = 'block';
                console.log('成功メッセージ表示済み');
                setTimeout(() => {
                    successEl.style.display = 'none';
                }, 10000);
            } else {
                console.error('success-message 要素が見つかりません');
            }
        }

        // エラー表示
        function showError(message) {
            const errorEl = document.getElementById('error-message');
            errorEl.textContent = message;
            errorEl.style.display = 'block';
            setTimeout(() => {
                errorEl.style.display = 'none';
            }, 5000);
        }

        // 特典申請（簡略化）
        document.getElementById('claim-reward-btn')?.addEventListener('click', async () => {
            const customer = getCustomerData();
            if (!customer || !customer.email) {
                showError('ログイン情報が取得できません');
                return;
            }
            
            if (confirm('特典を申請しますか？\n\n申請後は取り消しできません。')) {
                const button = document.getElementById('claim-reward-btn');
                button.disabled = true;
                button.textContent = '申請中...';
                
                try {
                    // 簡略化：ローカル処理
                    setTimeout(() => {
                        button.textContent = '✅ 申請済み';
                        button.style.background = '#64748b';
                        alert('特典申請を受け付けました！\n3営業日以内にメールでご連絡いたします。');
                        
                        // ローカルストレージに申請済みフラグを保存
                        localStorage.setItem('hasClaimedReward', 'true');
                    }, 1000);
                    
                } catch (error) {
                    console.error('特典申請エラー:', error);
                    button.disabled = false;
                    button.textContent = '🎁 特典を申請する';
                    alert('申請に失敗しました: ' + error.message);
                }
            }
        });

        // ポイント交換申請関数
        window.requestExchange = async function(requiredPoints, rewardName) {
            const customer = await getCustomerData();
            
            if (!customer || !customer.email) {
                alert('ログインが必要です');
                return;
            }
            
            if (customer.points < requiredPoints) {
                alert(`ポイントが不足しています。\n必要: ${requiredPoints}pt\n現在: ${customer.points}pt`);
                return;
            }
            
            const subject = `ポイント交換申請: ${rewardName}`;
            const body = `
ユーザー: ${customer.email}
プラン: ${customer.plan}
申請: ${requiredPoints}pt → ${rewardName}
現在のポイント: ${customer.points}pt
申請日時: ${new Date().toLocaleString()}

※この申請は自動送信されました。管理者が確認後にご連絡いたします。
            `.trim();
            
            // メール申請を開く
            window.location.href = `mailto:support@keiba.link?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
        };

        // ログアウト（簡略化）
        window.logout = function() {
            // 全てのログイン情報をクリア
            localStorage.removeItem('user-plan');
            localStorage.removeItem('isLoggedIn');
            localStorage.removeItem('userPlan');
            localStorage.removeItem('userData');
            localStorage.removeItem('userEmail');
            localStorage.removeItem('hasClaimedReward');
            
            // ナビゲーション更新イベントを発火
            window.dispatchEvent(new CustomEvent('userLoggedOut'));
            
            // ホームページにリダイレクト
            setTimeout(() => {
                window.location.href = '/';
            }, 500);
        };

        // ページ読み込み時の初期化（簡略化）
        document.addEventListener('DOMContentLoaded', async () => {
            // 🛡️ 復活防止対策: プログレスバー即座に初期化
            initializeProgressBar();

            // ログアウトボタンにイベントリスナーを追加（無料会員用）
            const logoutBtnFree = document.getElementById('logout-btn-free');
            if (logoutBtnFree) {
                logoutBtnFree.addEventListener('click', () => {
                    logout();
                });
            }

            // ログアウトボタンにイベントリスナーを追加（有料会員用）
            const logoutBtnPaid = document.getElementById('logout-btn-paid');
            if (logoutBtnPaid) {
                logoutBtnPaid.addEventListener('click', () => {
                    logout();
                });
            }
            
            // ログイン情報の閉じるボタン
            const loginInfoCloseBtn = document.getElementById('login-info-close');
            if (loginInfoCloseBtn) {
                loginInfoCloseBtn.addEventListener('click', () => {
                    document.getElementById('login-info-section').style.display = 'none';
                });
            }
            
            // マジックリンク認証チェック
            await handleTokenAuth();
            
            // 既存セッションチェック
            console.log('🔐 認証チェック開始');
            if (isAuthenticated()) {
                console.log('✅ 認証済み、顧客データ取得開始');
                const customer = await getCustomerData();
                console.log('👤 取得した顧客データ:', customer);
                if (customer) {
                    console.log('🎨 showDashboard 実行');
                    showDashboard(customer);
                } else {
                    console.log('⚠️ 顧客データがnull');
                }
            } else {
                console.log('❌ 未認証');
            }
        });

    </script>

    <style>
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            min-height: 100vh;
            color: #e2e8f0;
        }

        /* ヘッダー */
        .dashboard-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .dashboard-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .subtitle {
            font-size: 1.1rem;
            color: #94a3b8;
        }

        /* ログインセクション */
        .login-section {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 400px;
        }

        .login-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 1rem;
            padding: 2.5rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
            max-width: 400px;
            width: 100%;
        }

        .login-card h2 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            text-align: center;
        }

        .login-card p {
            color: #94a3b8;
            text-align: center;
            margin-bottom: 2rem;
        }

        .email-input {
            width: 100%;
            padding: 0.75rem;
            background: rgba(15, 23, 42, 0.5);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 0.5rem;
            color: #e2e8f0;
            font-size: 1rem;
            margin-bottom: 1rem;
        }

        .email-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .submit-btn {
            width: 100%;
            padding: 0.875rem;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.4);
        }

        .error-message {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #ef4444;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-top: 1rem;
            text-align: center;
        }

        .new-user-notice {
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid rgba(59, 130, 246, 0.3);
            color: #e2e8f0;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-top: 1.5rem;
            text-align: center;
        }

        .new-user-notice p {
            margin: 0.25rem 0;
        }

        .new-user-notice .link {
            color: #3b82f6;
            text-decoration: none;
            font-weight: 600;
        }

        .new-user-notice .link:hover {
            color: #60a5fa;
            text-decoration: underline;
        }

        .success-message {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            color: #10b981;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-top: 1rem;
            text-align: center;
        }

        /* ログイン情報セクション */
        .login-info-section {
            margin-bottom: 2rem;
            /* animation: slideInFromTop 0.5s ease; */
        }

        .login-info-card {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            border-radius: 1rem;
            padding: 1.5rem;
            color: white;
            display: flex;
            align-items: center;
            gap: 1rem;
            position: relative;
            box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3);
        }

        .login-info-icon {
            font-size: 2rem;
        }

        .login-info-content {
            flex: 1;
        }

        .login-info-content h3 {
            margin: 0 0 0.5rem 0;
            font-size: 1.2rem;
        }

        .login-info-message {
            margin-bottom: 0.5rem;
            font-size: 0.95rem;
            opacity: 0.9;
        }

        .login-info-points {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
            margin-top: 0.5rem;
        }

        .points-icon {
            font-size: 1.2rem;
        }

        .points-value {
            background: rgba(255, 255, 255, 0.2);
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 1.1rem;
            font-weight: bold;
        }

        .close-btn {
            position: absolute;
            top: 0.5rem;
            right: 0.75rem;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s;
        }

        .close-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        @keyframes slideInFromTop {
            from {
                transform: translateY(-20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* 会員ステータス */
        .status-section {
            margin-bottom: 2rem;
        }

        .status-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 1rem;
            padding: 2rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .status-icon {
            font-size: 3rem;
        }

        .status-info h3 {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            color: #3b82f6;
        }

        .status-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .status-details {
            font-size: 0.9rem;
            color: #94a3b8;
        }

        .email {
            margin-bottom: 0.25rem;
        }

        .expires {
            font-size: 0.85rem;
            color: #10b981;
        }

        /* 会員ステータスグリッド */
        .status-section {
            margin-bottom: 2rem;
        }
        
        .status-grid {
            display: grid;
            grid-template-columns: 1fr 380px;
            gap: 2rem;
            align-items: stretch;
        }

        /* メインステータスカード */
        .main-status {
            grid-column: 1;
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(139, 92, 246, 0.1) 100%);
            border-radius: 1rem;
            padding: 2rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        /* プラン特典カード */

        .plan-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .plan-icon {
            font-size: 1.5rem;
        }

        .plan-header h3 {
            color: #10b981;
            font-size: 1.1rem;
            margin: 0;
        }

        .benefits-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .benefit-item, .plan-benefit {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            background: rgba(16, 185, 129, 0.1);
            border-radius: 0.5rem;
            font-size: 0.9rem;
            color: #e2e8f0;
            margin-bottom: 0.5rem;
        }
        
        .main-status::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(255, 255, 255, 0.05) 50%, transparent 100%);
            /* animation: status-shine 4s infinite; */
        }
        
        @keyframes status-shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .status-icon {
            font-size: 2.5rem;
            filter: drop-shadow(0 2px 8px rgba(59, 130, 246, 0.3));
        }
        
        .status-badge {
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .status-info h3 {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            color: #3b82f6;
        }
        
        .status-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .status-details {
            font-size: 0.9rem;
            color: #94a3b8;
            line-height: 1.5;
        }

        /* 会員情報グリッド */
        .member-info-grid {
            display: grid;
            gap: 0.75rem;
            margin-top: 0.5rem;
        }

        .info-item {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 0.75rem;
            align-items: center;
            padding: 0.5rem;
            background: rgba(30, 41, 59, 0.3);
            border-radius: 0.5rem;
            border-left: 3px solid rgba(59, 130, 246, 0.4);
        }

        .info-label {
            font-size: 0.85rem;
            color: #94a3b8;
            font-weight: 500;
            white-space: nowrap;
        }

        .info-value {
            font-size: 0.9rem;
            color: #e2e8f0;
            font-weight: 400;
            text-align: right;
        }
        
        /* ランク表示のみ */
        .rank-display-only {
            grid-column: 2;
            grid-row: 1;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .rank-card-main {
            background: rgba(30, 41, 59, 0.6);
            border: 1px solid rgba(59, 130, 246, 0.2);
            border-radius: 1rem;
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            backdrop-filter: blur(8px);
            transition: all 0.3s ease;
            min-width: 200px;
        }

        .rank-card-main:hover {
            transform: translateY(-2px);
            border-color: rgba(59, 130, 246, 0.4);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
        }

        .rank-icon-large {
            font-size: 2.5rem;
            filter: drop-shadow(0 0 8px rgba(59, 130, 246, 0.4));
        }

        .rank-info {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .rank-name {
            font-size: 1.25rem;
            font-weight: 600;
            color: #e2e8f0;
        }

        .rank-label {
            font-size: 0.875rem;
            color: #94a3b8;
        }
        
        .mini-stat-icon {
            font-size: 1.5rem;
            filter: drop-shadow(0 1px 3px rgba(59, 130, 246, 0.2));
        }
        
        .mini-stat-value {
            font-size: 1.2rem;
            font-weight: 700;
            color: #3b82f6;
            margin-bottom: 0.2rem;
        }
        
        .mini-stat-label {
            font-size: 0.75rem;
            color: #94a3b8;
            line-height: 1;
        }
        
        /* VIPステータスカード */
        .vip-status-card {
            grid-column: 2;
            grid-row: 1;
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1) 0%, rgba(255, 165, 0, 0.1) 100%);
            border: 1px solid rgba(255, 215, 0, 0.3);
            border-radius: 1rem;
            min-height: 200px;
            padding: 1.5rem;
            position: relative;
            overflow: hidden;
        }
        
        .vip-status-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(255, 215, 0, 0.1) 50%, transparent 100%);
            /* animation: vip-shine 3s infinite; */
        }
        
        @keyframes vip-shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .vip-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .vip-icon {
            font-size: 1.5rem;
            filter: drop-shadow(0 2px 4px rgba(255, 215, 0, 0.3));
        }
        
        .vip-title {
            color: #fbbf24;
            font-weight: 700;
            font-size: 1rem;
        }
        
        .vip-benefits {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .vip-benefit {
            font-size: 0.85rem;
            color: #fbbf24;
            background: rgba(255, 215, 0, 0.1);
            padding: 0.5rem;
            border-radius: 0.5rem;
            border-left: 3px solid #fbbf24;
        }
        
        /* プラン特典カード（Standard/Free用） */
        .plan-benefits-card {
            grid-column: 2;
            grid-row: 1;
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(5, 150, 105, 0.1) 100%);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 1rem;
            min-height: 200px;
            padding: 1.5rem;
            position: relative;
            overflow: hidden;
        }
        
        .plan-benefits-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(16, 185, 129, 0.1) 50%, transparent 100%);
            /* animation: plan-shine 3s infinite; */
        }
        
        @keyframes plan-shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .plan-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .plan-icon {
            font-size: 1.5rem;
            filter: drop-shadow(0 2px 4px rgba(16, 185, 129, 0.3));
        }
        
        .plan-title {
            color: #10b981;
            font-weight: 700;
            font-size: 1rem;
        }
        
        .plan-benefits {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .plan-benefit {
            font-size: 0.85rem;
            color: #10b981;
            background: rgba(16, 185, 129, 0.1);
            padding: 0.5rem;
            border-radius: 0.5rem;
            border-left: 3px solid #10b981;
        }
        
        /* ランクカード特別スタイル */
        .rank-card {
            background: linear-gradient(135deg, rgba(139, 92, 246, 0.15) 0%, rgba(99, 102, 241, 0.15) 100%);
            border: 1px solid rgba(139, 92, 246, 0.4);
        }
        
        .rank-card:hover {
            border-color: rgba(139, 92, 246, 0.6);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.2);
        }
        
        /* ランク目安カード */
        .rank-guide-card {
            grid-column: 1 / 3;
            grid-row: 3;
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.1) 0%, rgba(139, 92, 246, 0.1) 100%);
            border: 1px solid rgba(99, 102, 241, 0.3);
            border-radius: 1rem;
            padding: 1.5rem;
            position: relative;
            overflow: hidden;
        }
        
        .rank-guide-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(99, 102, 241, 0.1) 50%, transparent 100%);
            /* animation: rank-shine 4s infinite; */
        }
        
        @keyframes rank-shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .rank-guide-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .rank-guide-icon {
            font-size: 1.5rem;
            filter: drop-shadow(0 2px 4px rgba(99, 102, 241, 0.3));
        }
        
        .rank-guide-title {
            color: #6366f1;
            font-weight: 700;
            font-size: 1rem;
        }
        
        .rank-list {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
        }
        
        @media (max-width: 480px) {
            .rank-list {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        .rank-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            background: rgba(99, 102, 241, 0.05);
            border-radius: 0.5rem;
            border: 1px solid rgba(99, 102, 241, 0.1);
            transition: all 0.3s ease;
        }
        
        .rank-item:hover {
            background: rgba(99, 102, 241, 0.1);
            border-color: rgba(99, 102, 241, 0.2);
            transform: translateY(-1px);
        }
        
        .rank-item.current {
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
            border: 2px solid #6366f1;
            box-shadow: 0 2px 8px rgba(99, 102, 241, 0.3);
        }
        
        .rank-badge {
            font-size: 1.2rem;
            width: 2rem;
            height: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            flex-shrink: 0;
        }
        
        .rank-badge.beginner { background: rgba(34, 197, 94, 0.2); }
        .rank-badge.bronze { background: rgba(205, 127, 50, 0.2); }
        .rank-badge.silver { background: rgba(192, 192, 192, 0.2); }
        .rank-badge.gold { background: rgba(255, 215, 0, 0.2); }
        .rank-badge.platinum { background: rgba(229, 228, 226, 0.2); }
        .rank-badge.diamond { background: rgba(0, 191, 255, 0.2); }
        
        .rank-info {
            display: flex;
            flex-direction: column;
            gap: 0.1rem;
        }
        
        .rank-name {
            font-size: 0.8rem;
            font-weight: 600;
            color: #e2e8f0;
        }
        
        .rank-requirement {
            font-size: 0.7rem;
            color: #94a3b8;
        }
        
        .email {
            margin-bottom: 0.25rem;
        }
        
        .expires {
            font-size: 0.85rem;
            color: #10b981;
        }

        /* ポイントセクション */
        .points-section {
            margin-bottom: 2rem;
        }

        .points-card {
            background: linear-gradient(135deg, rgba(251, 191, 36, 0.15) 0%, rgba(245, 158, 11, 0.1) 100%);
            border-radius: 1rem;
            padding: 2rem;
            border: 1px solid rgba(251, 191, 36, 0.4);
            box-shadow: 0 4px 15px rgba(251, 191, 36, 0.1);
        }

        .points-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .points-header h2 {
            font-size: 1.5rem;
            margin: 0;
            color: #fbbf24;
            text-shadow: 0 2px 4px rgba(251, 191, 36, 0.3);
        }

        .points-value {
            display: flex;
            align-items: baseline;
            gap: 0.5rem;
        }

        #current-points {
            font-size: 2rem;
            font-weight: 600;
            background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .points-unit {
            font-size: 1.25rem;
            color: #94a3b8;
            font-weight: 400;
        }

        .points-progress {
            margin-bottom: 2rem;
        }

        .progress-bar {
            height: 16px;
            background: linear-gradient(90deg, rgba(30, 41, 59, 0.8) 0%, rgba(15, 23, 42, 0.9) 100%);
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 1rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #fbbf24 0%, #f59e0b 100%);
            transition: width 1.2s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 6px;
            position: relative;
            box-shadow: 0 1px 6px rgba(251, 191, 36, 0.3);
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
        }

        #current-rank {
            font-weight: 600;
        }

        #next-rank-info {
            color: #94a3b8;
        }

        .rank-benefits {
            margin-bottom: 1.5rem;
        }

        .rank-benefits h3 {
            font-size: 1.1rem;
            margin-bottom: 1rem;
            color: #f1f5f9;
        }

        .benefits-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .benefit-item {
            padding: 0.5rem;
            background: rgba(16, 185, 129, 0.1);
            border-left: 3px solid #10b981;
            color: #10b981;
        }

        .claim-btn {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(135deg, #f59e0b 0%, #dc2626 100%);
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .claim-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(245, 158, 11, 0.4);
        }

        .claim-btn:disabled {
            background: #64748b;
            cursor: not-allowed;
        }

        /* 予想セクション */
        .predictions-section {
            margin-bottom: 2rem;
        }

        .predictions-section h2 {
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            color: #f1f5f9;
        }

        .predictions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .prediction-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 1rem;
            padding: 1.5rem;
            border: 1px solid rgba(51, 65, 85, 0.5);
            transition: all 0.3s ease;
        }

        .prediction-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .prediction-card.free {
            border-color: rgba(148, 163, 184, 0.5);
        }

        .prediction-card.standard {
            border-color: rgba(16, 185, 129, 0.5);
        }

        .prediction-card.premium {
            border-color: rgba(139, 92, 246, 0.5);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .card-header h3 {
            font-size: 1.2rem;
            margin: 0;
        }

        .plan-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .plan-badge.free {
            background: rgba(148, 163, 184, 0.2);
            color: #94a3b8;
        }

        .plan-badge.standard {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }

        .plan-badge.premium {
            background: rgba(139, 92, 246, 0.2);
            color: #8b5cf6;
        }

        .race-info {
            margin-bottom: 1.5rem;
        }

        .race-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .confidence {
            font-size: 0.9rem;
            color: #10b981;
        }

        .view-btn {
            display: block;
            background: #3b82f6;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            text-decoration: none;
            text-align: center;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .view-btn:hover {
            background: #1d4ed8;
            transform: translateY(-2px);
        }

        /* プラン管理（無料会員のみ） */
        .plan-section {
            margin-bottom: 2rem;
        }

        .plan-section h2 {
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            color: #f1f5f9;
        }

        .plan-actions {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        /* ログアウトセクション（有料会員専用） */
        .logout-section-paid {
            margin-bottom: 2rem;
            text-align: center;
        }

        .action-btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }

        .action-btn.upgrade {
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
        }

        .action-btn.logout {
            background: rgba(30, 41, 59, 0.8);
            color: #e2e8f0;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        /* 有料会員用ログアウトボタン（目立つデザイン） */
        .action-btn.logout-primary {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.2) 0%, rgba(220, 38, 38, 0.2) 100%);
            color: #fca5a5;
            border: 1px solid rgba(239, 68, 68, 0.4);
            font-weight: 600;
            padding: 1rem 2rem;
            font-size: 1.1rem;
        }

        .action-btn.logout-primary:hover {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.3) 0%, rgba(220, 38, 38, 0.3) 100%);
            border-color: rgba(239, 68, 68, 0.6);
            color: #fecaca;
        }

        .action-btn:hover {
            transform: translateY(-2px);
        }

        /* アップグレード促進 */
        .upgrade-section {
            margin-bottom: 2rem;
        }

        .upgrade-card {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
            border-radius: 1rem;
            padding: 2rem;
            text-align: center;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .upgrade-card h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #f1f5f9;
        }

        .upgrade-card p {
            margin-bottom: 1.5rem;
            color: #94a3b8;
        }

        .upgrade-btn {
            display: inline-block;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            padding: 0.875rem 2rem;
            border-radius: 0.5rem;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .upgrade-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.4);
        }

        /* ポイント交換メニュー */
        .exchange-section {
            margin-top: 30px;
        }
        
        .exchange-card {
            background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .exchange-header {
            text-align: center;
            margin-bottom: 25px;
        }
        
        .exchange-header h2 {
            color: #ffffff;
            margin: 0 0 8px 0;
            font-size: 1.5rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .exchange-subtitle {
            color: #cbd5e0;
            margin: 0;
            font-size: 0.95rem;
        }
        
        .exchange-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .exchange-option {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .exchange-option:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }
        
        .orange-option {
            background: linear-gradient(135deg, #ff5722 0%, #e91e63 50%, #9c27b0 100%);
        }

        .orange-option:hover {
            box-shadow: 0 10px 25px rgba(255, 87, 34, 0.4);
        }

        .premium-option {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }

        .premium-option:hover {
            box-shadow: 0 10px 25px rgba(245, 87, 108, 0.3);
        }
        
        .exchange-cost {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 8px;
        }
        
        .exchange-reward {
            font-size: 1.1rem;
            margin-bottom: 15px;
            line-height: 1.4;
        }
        
        .exchange-btn {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }
        
        .exchange-btn:hover {
            background: rgba(255,255,255,0.3);
            border-color: rgba(255,255,255,0.5);
        }
        
        .exchange-note {
            text-align: center;
            color: #a0aec0;
            margin-top: 15px;
        }
        
        /* 🎯 シンプルプログレス表示 */
        .simple-progress-container {
            margin-bottom: 1rem;
        }

        .progress-info-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .progress-current {
            color: #10b981;
            font-weight: 600;
            font-size: 1rem;
        }

        .progress-target {
            color: #3b82f6;
            font-weight: 600;
            font-size: 1rem;
        }

        .progress-remaining {
            text-align: center;
            color: #fbbf24;
            font-weight: 600;
            margin-bottom: 1rem;
            font-size: 0.95rem;
        }

        .simple-progress-bar {
            width: 100%;
            height: 12px;
            background: rgba(30, 41, 59, 0.8);
            border-radius: 6px;
            overflow: hidden;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .simple-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #10b981 0%, #3b82f6 100%);
            border-radius: 6px;
            transition: width 0.6s ease;
            min-width: 2px;
        }

        /* セグメント式プログレスバー（旧システム・非表示） */
        .progress-segments {
            display: none;
        }

        .segment-item {
            margin-bottom: 1.2rem;
            border-radius: 8px;
            background: rgba(30, 41, 59, 0.6);
            padding: 12px;
            border: 1px solid rgba(59, 130, 246, 0.2);
            transition: all 0.3s ease;
        }

        /* 現在進行中のセグメント */
        .current-segment {
            background: rgba(30, 41, 59, 0.8);
            border: 1px solid rgba(251, 191, 36, 0.4);
            box-shadow: 0 4px 15px rgba(251, 191, 36, 0.1);
        }

        /* 達成済みセグメント（小さく表示） */
        .achieved-segment {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            padding: 8px 12px;
            margin-bottom: 0.8rem;
            opacity: 0.8;
        }

        /* 全達成セグメント */
        .completed-all {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.2), rgba(34, 197, 94, 0.15));
            border: 1px solid rgba(16, 185, 129, 0.4);
            box-shadow: 0 4px 20px rgba(16, 185, 129, 0.15);
        }

        /* セグメントヘッダー */
        .segment-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 8px;
            margin-bottom: 8px;
        }

        .segment-left {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .segment-emoji {
            font-size: 1.2rem;
        }

        .segment-title {
            font-weight: 600;
            color: #e2e8f0;
            font-size: 0.95rem;
        }

        .achieved-segment .segment-title {
            color: #10b981;
            font-size: 0.85rem;
        }

        .segment-progress {
            font-weight: 600;
            color: #fbbf24;
        }

        .segment-reward-small {
            font-size: 0.75rem;
            color: #10b981;
            opacity: 0.9;
        }

        .segment-bar {
            height: 16px;
            background: linear-gradient(90deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.8) 100%);
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 8px;
            border: 1px solid rgba(251, 191, 36, 0.4);
            position: relative;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.3);
        }

        .segment-fill {
            height: 100%;
            background: linear-gradient(90deg, #6b7280 0%, #4b5563 100%);
            transition: width 1.2s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 6px;
            min-width: 4px;
            position: relative;
            z-index: 2;
        }

        /* プログレス0%でも見えるように背景を調整 */
        .segment-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, rgba(107, 114, 128, 0.4) 0%, rgba(75, 85, 99, 0.3) 100%);
            border-radius: 6px;
            z-index: 1;
        }

        /* プログレスバーの外枠ハイライト */
        .segment-bar::after {
            content: '';
            position: absolute;
            top: -1px;
            left: -1px;
            right: -1px;
            bottom: -1px;
            background: linear-gradient(90deg, rgba(251, 191, 36, 0.3), rgba(245, 158, 11, 0.2));
            border-radius: 9px;
            z-index: 0;
        }

        .segment-label {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
        }

        .segment-goal {
            font-weight: 600;
            color: #fbbf24;
        }

        .segment-reward {
            color: #e2e8f0;
            font-size: 0.8rem;
            opacity: 0.9;
        }

        /* 次の目標情報 */
        .next-goal-info {
            text-align: center;
            background: rgba(30, 41, 59, 0.6);
            padding: 12px;
            border-radius: 8px;
            border: 1px solid rgba(251, 191, 36, 0.3);
            font-size: 0.95rem;
            color: #e2e8f0;
            font-weight: 500;
        }

        /* レスポンシブ */
        /* 旧プログレスバー（隠す） */
        .progress-fill {
            display: none;
        }

        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.4) 50%, transparent 100%);
            /* animation: shimmer 2s infinite; */
        }

        .progress-bronze {
            background: linear-gradient(90deg, #cd7f32 0%, #daa520 50%, #b8860b 100%);
            box-shadow: 0 1px 8px rgba(205, 127, 50, 0.5), inset 0 1px 2px rgba(255, 215, 0, 0.3);
        }

        .progress-silver {
            background: linear-gradient(90deg, #c0c0c0 0%, #e6e6fa 50%, #a8a8a8 100%);
            box-shadow: 0 1px 8px rgba(192, 192, 192, 0.5), inset 0 1px 2px rgba(255, 255, 255, 0.4);
        }

        .progress-gold {
            background: linear-gradient(90deg, #ffd700 0%, #ffef94 50%, #ffb347 100%);
            box-shadow: 0 2px 10px rgba(255, 215, 0, 0.6), inset 0 1px 3px rgba(255, 239, 148, 0.5);
        }

        .progress-platinum {
            background: linear-gradient(90deg, #e5e4e2 0%, #f8f8ff 50%, #bcc6cc 100%);
            box-shadow: 0 2px 10px rgba(229, 228, 226, 0.6), inset 0 1px 3px rgba(248, 248, 255, 0.6);
        }

        .progress-diamond {
            background: linear-gradient(90deg, #b9f2ff 0%, #87ceeb 30%, #00bfff 60%, #1e90ff 100%);
            box-shadow: 0 2px 12px rgba(0, 191, 255, 0.7), inset 0 1px 3px rgba(135, 206, 235, 0.7);
        }

        .progress-max {
            background: linear-gradient(90deg, #ff1493 0%, #ff69b4 20%, #ffd700 40%, #00ff7f 60%, #00bfff 80%, #9370db 100%);
            box-shadow: 0 2px 15px rgba(255, 20, 147, 0.8), inset 0 1px 3px rgba(255, 255, 255, 0.3);
            /* animation: rainbow-pulse 1.5s infinite, rainbow-shift 4s infinite; */
        }

        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        @keyframes rainbow-pulse {
            0%, 100% {
                box-shadow: 0 2px 15px rgba(255, 20, 147, 0.8), inset 0 1px 3px rgba(255, 255, 255, 0.3);
            }
            50% {
                box-shadow: 0 3px 20px rgba(255, 20, 147, 1), inset 0 2px 4px rgba(255, 255, 255, 0.5);
            }
        }

        @keyframes rainbow-shift {
            0% {
                background: linear-gradient(90deg, #ff1493 0%, #ff69b4 20%, #ffd700 40%, #00ff7f 60%, #00bfff 80%, #9370db 100%);
            }
            25% {
                background: linear-gradient(90deg, #9370db 0%, #ff1493 20%, #ff69b4 40%, #ffd700 60%, #00ff7f 80%, #00bfff 100%);
            }
            50% {
                background: linear-gradient(90deg, #00bfff 0%, #9370db 20%, #ff1493 40%, #ff69b4 60%, #ffd700 80%, #00ff7f 100%);
            }
            75% {
                background: linear-gradient(90deg, #00ff7f 0%, #00bfff 20%, #9370db 40%, #ff1493 60%, #ff69b4 80%, #ffd700 100%);
            }
            100% {
                background: linear-gradient(90deg, #ff1493 0%, #ff69b4 20%, #ffd700 40%, #00ff7f 60%, #00bfff 80%, #9370db 100%);
            }
        }

        /* ポイント表示のキラキラ演出 */
        #current-points.points-sparkle {
            /* animation: sparkle-effect 1s ease; */
        }

        @keyframes sparkle-effect {
            0% { transform: scale(1); }
            25% { transform: scale(1.1); }
            50% { 
                transform: scale(1.15);
                text-shadow: 0 0 20px #fbbf24;
            }
            75% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        /* プログレス情報の強化 */
        #next-rank-info {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 0.25rem;
        }

        .next-rank-label {
            font-size: 0.8rem;
            color: #94a3b8;
        }

        .points-needed {
            font-size: 1.1rem;
            font-weight: 700;
            color: #fbbf24;
        }

        .motivational-text {
            font-size: 0.85rem;
            color: #f59e0b;
            font-weight: 600;
            /* animation: pulse-glow 2s infinite; */
        }

        .max-rank-achieved {
            font-size: 1.2rem;
            font-weight: 700;
            color: #ff1493;
            /* animation: rainbow-text 3s infinite; */
        }

        .congratulations {
            font-size: 0.9rem;
            color: #ffd700;
            font-weight: 600;
        }

        @keyframes pulse-glow {
            0%, 100% {
                opacity: 1;
                text-shadow: 0 0 5px #f59e0b;
            }
            50% {
                opacity: 0.8;
                text-shadow: 0 0 10px #f59e0b, 0 0 15px #f59e0b;
            }
        }

        @keyframes rainbow-text {
            0% { color: #ff1493; }
            25% { color: #ffd700; }
            50% { color: #00ff00; }
            75% { color: #00bfff; }
            100% { color: #ff1493; }
        }

        /* 特典申請ボタンの脈打つアニメーション */
        .pulse-animation {
            /* animation: pulse-button 1.5s infinite; */
        }

        @keyframes pulse-button {
            0%, 100% {
                transform: scale(1);
                box-shadow: 0 10px 25px rgba(245, 158, 11, 0.4);
            }
            50% {
                transform: scale(1.05);
                box-shadow: 0 15px 35px rgba(245, 158, 11, 0.6);
            }
        }

        /* プレミアム特典の強調 */
        .premium-benefit {
            /* animation: premium-shine 3s infinite; */
        }

        @keyframes premium-shine {
            0%, 100% {
                background: rgba(16, 185, 129, 0.1);
                border-left-color: #10b981;
            }
            50% {
                background: rgba(16, 185, 129, 0.2);
                border-left-color: #34d399;
                box-shadow: 0 2px 10px rgba(16, 185, 129, 0.3);
            }
        }

        /* ポイント獲得通知 */
        .points-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            z-index: 10000;
            /* animation: slideIn 0.5s ease; */
        }
        
        .notification-content {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.1rem;
            font-weight: bold;
        }
        
        .points-added {
            background: rgba(255,255,255,0.2);
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 1.2rem;
        }
        
        .points-notification.fade-out {
            /* animation: slideOut 0.5s ease; */
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(400px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes slideOut {
            to {
                transform: translateX(400px);
                opacity: 0;
            }
        }
        
        /* 射幸心演出の追加効果 - スリムでエレガント */
        .progress-bar {
            position: relative;
            background: linear-gradient(90deg, rgba(30, 41, 59, 0.8) 0%, rgba(15, 23, 42, 0.9) 100%);
            border: 1px solid rgba(59, 130, 246, 0.3);
            box-shadow: inset 0 1px 4px rgba(0, 0, 0, 0.3), 0 1px 6px rgba(59, 130, 246, 0.15);
        }

        .progress-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent 0%, rgba(255, 255, 255, 0.05) 50%, transparent 100%);
            /* animation: sweep 3s infinite; */
        }

        @keyframes sweep {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        /* ポイント表示の躍動感 */
        .points-value {
            position: relative;
        }

        .points-value::after {
            content: '✨';
            position: absolute;
            right: -30px;
            top: 50%;
            transform: translateY(-50%);
            /* animation: twinkle 2s infinite; */
            opacity: 0;
        }

        #current-points:hover + .points-unit::after {
            animation-play-state: running;
            opacity: 1;
        }

        @keyframes twinkle {
            0%, 100% {
                opacity: 0;
                transform: translateY(-50%) scale(0.8);
            }
            50% {
                opacity: 1;
                transform: translateY(-50%) scale(1.2);
            }
        }

        /* モバイル対応の射幸心演出維持 */
        @media (max-width: 768px) {
            .dashboard-container {
                padding: 1rem;
            }

            .dashboard-header h1 {
                font-size: 2rem;
            }

            .status-card {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .points-header {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }
            
            .exchange-grid {
                grid-template-columns: 1fr;
            }
            
            .exchange-option {
                padding: 15px;
            }

            .predictions-grid {
                grid-template-columns: 1fr;
            }

            .plan-actions {
                flex-direction: column;
            }

            /* 会員ステータスグリッドのモバイル対応 */
            .status-grid {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto auto auto;
                gap: 1rem;
            }
            
            .main-status {
                grid-column: 1;
                grid-row: 1;
            }
            
            .rank-display-only {
                grid-column: 1;
                grid-row: 2;
            }
            
            .vip-status-card {
                grid-column: 1;
                grid-row: 3;
            }
            
            .plan-benefits-card {
                grid-column: 1;
                grid-row: 3;
            }
            
            .rank-guide-card {
                grid-column: 1;
                grid-row: 4;
            }
            
            .rank-list {
                grid-template-columns: repeat(2, 1fr);
                gap: 0.5rem;
            }

            /* モバイルでの射幸心演出調整 */
            #next-rank-info {
                align-items: center;
                text-align: center;
            }

            .motivational-text {
                font-size: 0.9rem;
            }

            .progress-fill::after {
                animation-duration: 1.5s;
            }
        }

        /* 期限切れ警告スタイル */
        .expiry-warning-section {
            margin-bottom: 30px;
        }

        .expiry-warning-card {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.05) 100%);
            border: 2px solid rgba(239, 68, 68, 0.3);
            border-radius: 16px;
            padding: 30px;
            display: flex;
            gap: 20px;
            align-items: flex-start;
        }

        .expiry-warning-icon {
            font-size: 3rem;
            flex-shrink: 0;
        }

        .expiry-warning-content {
            flex: 1;
        }

        .expiry-warning-content h3 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #ef4444;
            margin-bottom: 15px;
        }

        .expiry-details {
            background: rgba(15, 23, 42, 0.5);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .expiry-details p {
            color: var(--body-text-color);
            margin-bottom: 10px;
            line-height: 1.6;
        }

        .expiry-details p:last-child {
            margin-bottom: 0;
        }

        .expiry-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .expiry-action-card {
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
        }

        .expiry-action-card.secondary {
            background: rgba(100, 116, 139, 0.1);
            border-color: rgba(100, 116, 139, 0.3);
        }

        .expiry-action-card h4 {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--body-text-color);
            margin-bottom: 10px;
        }

        .expiry-action-card p {
            font-size: 0.9rem;
            color: var(--accent-text-color);
            margin-bottom: 15px;
        }

        .expiry-btn {
            display: inline-block;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 1rem;
        }

        .expiry-btn.renew {
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
        }

        .expiry-btn.renew:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
        }

        .expiry-btn.withdraw {
            background: rgba(100, 116, 139, 0.2);
            color: var(--body-text-color);
            border: 1px solid rgba(100, 116, 139, 0.5);
        }

        .expiry-btn.withdraw:hover {
            background: rgba(100, 116, 139, 0.3);
        }

        @media (max-width: 768px) {
            .expiry-warning-card {
                flex-direction: column;
                padding: 20px;
            }

            .expiry-actions {
                grid-template-columns: 1fr;
            }
        }

        /* 穴馬ページリンク */
        .dark-horse-link-section {
            margin-bottom: 30px;
        }

        .dark-horse-link-btn {
            display: flex;
            align-items: center;
            gap: 15px;
            background: linear-gradient(135deg, #f59e0b, #ea580c);
            border: 1px solid rgba(245, 158, 11, 0.3);
            border-radius: 16px;
            padding: 20px 24px;
            text-decoration: none;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .dark-horse-link-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 30px rgba(245, 158, 11, 0.4);
            border-color: rgba(245, 158, 11, 0.5);
        }

        .dark-horse-icon {
            font-size: 2rem;
            flex-shrink: 0;
        }

        .dark-horse-text {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .dark-horse-title {
            color: #fff;
            font-size: 1.1rem;
            font-weight: 700;
        }

        .dark-horse-subtitle {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.9rem;
        }

        .dark-horse-arrow {
            color: #fff;
            font-size: 1.5rem;
            font-weight: bold;
            flex-shrink: 0;
        }

        @media (max-width: 768px) {
            .dark-horse-link-btn {
                padding: 16px 18px;
            }

            .dark-horse-icon {
                font-size: 1.5rem;
            }

            .dark-horse-title {
                font-size: 1rem;
            }

            .dark-horse-subtitle {
                font-size: 0.85rem;
            }
        }
    </style>

    <script is:inline>
        // テスト用認証関数（開発環境用）
        window.setTestAuth = function(plan) {
            const testUser = {
                email: 'test@example.com',
                plan: plan,
                points: plan === 'premium' ? 300 : plan === 'standard' ? 100 : 30,
                name: 'テストユーザー',
                registrationDate: '2024-01-01',
                lastLogin: new Date().toISOString()
            };

            localStorage.setItem('user-plan', JSON.stringify(testUser));
            console.log(`✅ テスト認証設定完了: ${plan}プラン`, testUser);

            // ページリロードして変更を反映
            location.reload();
        };

        console.log('💡 テスト用: setTestAuth("premium"), setTestAuth("standard"), setTestAuth("free") が利用可能です');
    </script>

    <!-- 退会申請セクション（ダッシュボード下部） -->
    <div id="withdrawal-section" style="display: none; margin-top: 3rem; padding: 2rem; background: rgba(239, 68, 68, 0.05); border: 1px solid rgba(239, 68, 68, 0.2); border-radius: 12px;">
        <h3 style="color: #f87171; margin-bottom: 1rem;">退会について</h3>
        <p style="color: #94a3b8; margin-bottom: 1.5rem;">
            退会をご希望の場合は、下記ボタンからお手続きください。
        </p>
        <button id="withdrawal-btn" style="display: inline-block; padding: 0.75rem 1.5rem; background: #64748b; color: #fff; border: none; border-radius: 8px; transition: all 0.3s; cursor: pointer; font-family: inherit; font-size: 1rem;">
            退会申請
        </button>
    </div>

    <!-- 退会確認モーダル -->
    <div id="withdrawalModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 9999; align-items: center; justify-content: center;">
      <div style="background: #1e293b; padding: 3rem; border-radius: 16px; max-width: 500px; margin: 2rem;">
        <h3 style="color: #f87171; font-size: 1.5rem; margin-bottom: 1rem;">本当に退会しますか？</h3>
        <p style="color: #cbd5e1; line-height: 1.8; margin-bottom: 2rem;">
          退会後は全てのプレミアムコンテンツにアクセスできなくなります。<br>
          よろしければ、退会理由を教えてください。
        </p>

        <textarea id="withdrawalReason" placeholder="退会理由（任意）" style="width: 100%; padding: 1rem; border-radius: 8px; background: #0f172a; color: #e2e8f0; border: 1px solid #334155; margin-bottom: 1.5rem; min-height: 100px; font-family: inherit;"></textarea>

        <div style="display: flex; gap: 1rem;">
          <button id="confirmWithdrawal" style="flex: 1; padding: 1rem; background: #ef4444; color: #fff; border: none; border-radius: 8px; font-weight: bold; cursor: pointer;">
            退会する
          </button>
          <button id="cancelWithdrawal" style="flex: 1; padding: 1rem; background: #334155; color: #e2e8f0; border: none; border-radius: 8px; cursor: pointer;">
            キャンセル
          </button>
        </div>
      </div>
    </div>

    <script is:inline>
        // 退会セクション表示（ダッシュボード表示時に自動表示）
        const observer = new MutationObserver(function() {
            const dashboardSection = document.getElementById('dashboard-section');
            const withdrawalSection = document.getElementById('withdrawal-section');

            if (dashboardSection && withdrawalSection) {
                const dashboardVisible = dashboardSection.style.display !== 'none';
                if (dashboardVisible) {
                    withdrawalSection.style.display = 'block';
                }
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['style']
        });

        // 初回チェック
        setTimeout(function() {
            const dashboardSection = document.getElementById('dashboard-section');
            const withdrawalSection = document.getElementById('withdrawal-section');
            if (dashboardSection && withdrawalSection && dashboardSection.style.display !== 'none') {
                withdrawalSection.style.display = 'block';
            }
        }, 500);
    </script>

    <script is:inline>
        // 退会モーダル制御
        const modal = document.getElementById('withdrawalModal');
        const withdrawalBtn = document.getElementById('withdrawal-btn');
        const confirmBtn = document.getElementById('confirmWithdrawal');
        const cancelBtn = document.getElementById('cancelWithdrawal');
        const reasonTextarea = document.getElementById('withdrawalReason');

        // 退会ボタンクリック（プラン判定付き）
        if (withdrawalBtn) {
            withdrawalBtn.addEventListener('click', function() {
                const userPlan = localStorage.getItem('userPlan') || '';

                // 無料会員はモーダル表示、有料会員はwithdrawal-upsellへ遷移
                if (userPlan.toLowerCase() === 'free') {
                    modal.style.display = 'flex';
                } else {
                    window.location.href = '/withdrawal-upsell/';
                }
            });
        }

        // キャンセルボタンでモーダルを閉じる
        cancelBtn.addEventListener('click', function() {
            modal.style.display = 'none';
        });

        // 退会確定処理
        confirmBtn.addEventListener('click', async function() {
            const reason = reasonTextarea.value || '理由未記入';
            const email = localStorage.getItem('userEmail') || '';

            if (!email) {
                alert('メールアドレスが取得できませんでした。再度ログインしてください。');
                return;
            }

            // ボタンを無効化
            confirmBtn.disabled = true;
            confirmBtn.textContent = '処理中...';

            try {
                // 退会処理APIを呼び出し
                const response = await fetch('/.netlify/functions/process-withdrawal', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        email: email,
                        reason: reason
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    // 成功時: 完了メッセージ表示後トップページへ
                    alert('退会申請を受け付けました。確認メールをお送りしましたのでご確認ください。\n\n担当者より2営業日以内にご連絡いたします。');
                    window.location.href = '/';
                } else {
                    throw new Error(result.error || '退会申請の送信に失敗しました');
                }
            } catch (error) {
                alert(`エラーが発生しました: ${error.message}\n\nお手数ですが、お問い合わせフォームからご連絡ください。`);
                confirmBtn.disabled = false;
                confirmBtn.textContent = '退会する';
            }
        });

        // モーダル外クリックで閉じる
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });
    </script>
</BaseLayout>