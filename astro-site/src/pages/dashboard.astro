---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="ダッシュボード - NANKANアナリティクス">
    <div class="dashboard-container">
        <!-- ヘッダー -->
        <div class="dashboard-header">
            <h1>🎯 あなたの予想ダッシュボード</h1>
            <p class="subtitle">NANKANアナリティクス - AI競馬予想システム</p>
        </div>

        <!-- 会員ステータス -->
        <div class="status-section">
            <div class="status-card">
                <div class="status-icon">👤</div>
                <div class="status-info">
                    <h3>会員ステータス</h3>
                    <div id="membership-status" class="status-value">読み込み中...</div>
                    <div id="membership-details" class="status-details"></div>
                </div>
            </div>
        </div>

        <!-- 今日の予想 -->
        <div class="predictions-section">
            <h2>🏇 今日の予想</h2>
            <div class="predictions-grid">
                
                <!-- 無料予想 -->
                <div class="prediction-card free">
                    <div class="card-header">
                        <h3>🎁 無料予想</h3>
                        <span class="plan-badge free">FREE</span>
                    </div>
                    <div class="race-info">
                        <div class="race-title">メインレース（11R）</div>
                        <div class="confidence">予想精度: 87.3%</div>
                    </div>
                    <a href="/free-prediction/" class="view-btn">予想を見る</a>
                </div>

                <!-- Standard予想 -->
                <div id="standard-predictions" class="prediction-card standard" style="display: none;">
                    <div class="card-header">
                        <h3>⚡ Standard予想</h3>
                        <span class="plan-badge standard">STANDARD</span>
                    </div>
                    <div class="race-info">
                        <div class="race-title">後半3レース（10R-12R）</div>
                        <div class="confidence">予想精度: 89.1%</div>
                    </div>
                    <a href="/standard-predictions/" class="view-btn">予想を見る</a>
                </div>

                <!-- Premium予想 -->
                <div id="premium-predictions" class="prediction-card premium" style="display: none;">
                    <div class="card-header">
                        <h3>💎 Premium予想</h3>
                        <span class="plan-badge premium">PREMIUM</span>
                    </div>
                    <div class="race-info">
                        <div class="race-title">全レース（1R-12R）</div>
                        <div class="confidence">予想精度: 91.8%</div>
                    </div>
                    <a href="/premium-predictions/" class="view-btn">予想を見る</a>
                </div>
            </div>
        </div>

        <!-- プラン管理 -->
        <div class="plan-section">
            <h2>📋 プラン管理</h2>
            <div class="plan-actions">
                <a href="/pricing/" class="action-btn upgrade">プランをアップグレード</a>
                <button onclick="promptForEmail()" class="action-btn check">プラン確認</button>
            </div>
        </div>

        <!-- アップグレード促進（無料・Standard会員のみ表示） -->
        <div id="upgrade-promotion" class="upgrade-section" style="display: none;">
            <div class="upgrade-card">
                <h3>🚀 さらなる投資効率を目指しませんか？</h3>
                <p>上位プランで全レースの詳細予想と高精度分析データにアクセスできます</p>
                <a href="/pricing/" class="upgrade-btn">今すぐアップグレード</a>
            </div>
        </div>
    </div>

    <!-- プラン確認・ダッシュボード制御スクリプト -->
    <script>
        // DOM要素
        const membershipStatusEl = document.getElementById('membership-status');
        const membershipDetailsEl = document.getElementById('membership-details');
        const standardPredictions = document.getElementById('standard-predictions');
        const premiumPredictions = document.getElementById('premium-predictions');
        const upgradePromotion = document.getElementById('upgrade-promotion');

        // プラン確認とダッシュボード更新
        async function checkPlanAndUpdateDashboard() {
            try {
                const savedEmail = localStorage.getItem('user-email');
                
                if (!savedEmail) {
                    membershipStatusEl.innerHTML = '未登録';
                    membershipDetailsEl.innerHTML = `
                        <div>メールアドレスを入力してプランを確認してください</div>
                        <button onclick="promptForEmail()" class="email-input-btn">
                            メールアドレス入力
                        </button>
                    `;
                    return;
                }

                console.log(`[dashboard] プラン確認中: ${savedEmail}`);
                
                const response = await fetch(`/api/check-plan?email=${encodeURIComponent(savedEmail)}`);
                
                if (!response.ok) {
                    throw new Error(`プラン確認エラー: ${response.status}`);
                }

                const planData = await response.json();
                console.log('[dashboard] プラン確認結果:', planData);
                
                updateDashboard(savedEmail, planData);

            } catch (error) {
                console.error('[dashboard] エラー:', error);
                membershipStatusEl.innerHTML = 'エラーが発生しました';
                membershipDetailsEl.innerHTML = `
                    <div class="error">${error.message}</div>
                    <button onclick="promptForEmail()" class="email-input-btn">
                        再試行
                    </button>
                `;
            }
        }

        // ダッシュボード更新
        function updateDashboard(email, planData) {
            const planNames = {
                'free': '無料会員',
                'standard': 'Standard会員',
                'premium': 'Premium会員'
            };

            const plan = planData.plan || 'free';
            
            membershipStatusEl.innerHTML = planNames[plan];
            
            let detailsHtml = `<div class="user-email">${email}</div>`;
            if (planData.createdAt) {
                detailsHtml += `<div class="created-date">登録日: ${new Date(planData.createdAt).toLocaleDateString('ja-JP')}</div>`;
            }
            if (planData.expiresAt && planData.plan !== 'free') {
                detailsHtml += `<div class="expires-date">次回更新: ${new Date(planData.expiresAt).toLocaleDateString('ja-JP')}</div>`;
            }
            membershipDetailsEl.innerHTML = detailsHtml;

            // プランに応じて表示切り替え
            if (plan === 'standard' || plan === 'premium') {
                standardPredictions.style.display = 'block';
            }
            
            if (plan === 'premium') {
                premiumPredictions.style.display = 'block';
            } else if (plan === 'free' || plan === 'standard') {
                upgradePromotion.style.display = 'block';
            }
        }

        // メールアドレス入力プロンプト
        function promptForEmail() {
            const email = prompt('メールアドレスを入力してください：');
            if (email && email.includes('@')) {
                localStorage.setItem('user-email', email);
                checkPlanAndUpdateDashboard();
            } else if (email) {
                alert('正しいメールアドレスを入力してください。');
            }
        }

        // ページ読み込み時に実行
        document.addEventListener('DOMContentLoaded', () => {
            console.log('[dashboard] NANKANアナリティクス ダッシュボード読み込み');
            checkPlanAndUpdateDashboard();
        });
    </script>

    <style>
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            min-height: 100vh;
            color: #e2e8f0;
        }

        /* ヘッダー */
        .dashboard-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .dashboard-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .subtitle {
            font-size: 1.1rem;
            color: #94a3b8;
        }

        /* 会員ステータス */
        .status-section {
            margin-bottom: 3rem;
        }

        .status-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 1rem;
            padding: 2rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .status-icon {
            font-size: 3rem;
        }

        .status-info h3 {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            color: #3b82f6;
        }

        .status-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .status-details {
            font-size: 0.9rem;
            color: #94a3b8;
        }

        .user-email {
            margin-bottom: 0.25rem;
        }

        .created-date, .expires-date {
            font-size: 0.8rem;
            color: #64748b;
        }

        .email-input-btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            cursor: pointer;
            margin-top: 0.5rem;
        }

        /* 予想セクション */
        .predictions-section {
            margin-bottom: 3rem;
        }

        .predictions-section h2 {
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            color: #f1f5f9;
        }

        .predictions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .prediction-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 1rem;
            padding: 1.5rem;
            border: 1px solid rgba(51, 65, 85, 0.5);
            transition: all 0.3s ease;
        }

        .prediction-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .prediction-card.free {
            border-color: rgba(148, 163, 184, 0.5);
        }

        .prediction-card.standard {
            border-color: rgba(16, 185, 129, 0.5);
        }

        .prediction-card.premium {
            border-color: rgba(139, 92, 246, 0.5);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .card-header h3 {
            font-size: 1.2rem;
            margin: 0;
        }

        .plan-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .plan-badge.free {
            background: rgba(148, 163, 184, 0.2);
            color: #94a3b8;
        }

        .plan-badge.standard {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }

        .plan-badge.premium {
            background: rgba(139, 92, 246, 0.2);
            color: #8b5cf6;
        }

        .race-info {
            margin-bottom: 1.5rem;
        }

        .race-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .confidence {
            font-size: 0.9rem;
            color: #10b981;
        }

        .view-btn {
            display: block;
            background: #3b82f6;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            text-decoration: none;
            text-align: center;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .view-btn:hover {
            background: #1d4ed8;
            transform: translateY(-2px);
        }

        /* プラン管理 */
        .plan-section {
            margin-bottom: 3rem;
        }

        .plan-section h2 {
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            color: #f1f5f9;
        }

        .plan-actions {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .action-btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }

        .action-btn.upgrade {
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
        }

        .action-btn.check {
            background: rgba(30, 41, 59, 0.8);
            color: #e2e8f0;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .action-btn:hover {
            transform: translateY(-2px);
        }

        /* アップグレード促進 */
        .upgrade-section {
            margin-bottom: 3rem;
        }

        .upgrade-card {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
            border-radius: 1rem;
            padding: 2rem;
            text-align: center;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .upgrade-card h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #f1f5f9;
        }

        .upgrade-card p {
            margin-bottom: 1.5rem;
            color: #94a3b8;
        }

        .upgrade-btn {
            display: inline-block;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            padding: 0.875rem 2rem;
            border-radius: 0.5rem;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .upgrade-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.4);
        }

        .error {
            color: #ef4444;
            margin-bottom: 0.5rem;
        }

        /* レスポンシブ */
        @media (max-width: 768px) {
            .dashboard-container {
                padding: 1rem;
            }

            .dashboard-header h1 {
                font-size: 2rem;
            }

            .status-card {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .predictions-grid {
                grid-template-columns: 1fr;
            }

            .plan-actions {
                flex-direction: column;
            }
        }
    </style>
</BaseLayout>