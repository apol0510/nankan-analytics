---
export const prerender = true; // 静的サイト生成用に戻す
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="マイページ - NANKANアナリティクス">
    <div class="dashboard-container">
        <!-- ヘッダー -->
        <div class="dashboard-header">
            <h1>✨ マイページ</h1>
            <p class="subtitle">NANKANアナリティクス - AI競馬予想システム</p>
        </div>

        <!-- ログインフォーム（初期表示） -->
        <div id="login-section" class="login-section">
            <div class="login-card">
                <h2>🔐 簡単ログイン</h2>
                <p>メールアドレスを入力してログインしてください</p>
                <form id="magic-link-form">
                    <input 
                        type="email" 
                        id="email-input" 
                        placeholder="example@email.com"
                        required
                        class="email-input"
                    />
                    <button type="submit" class="submit-btn" id="magic-link-btn">
                        ログイン
                    </button>
                </form>
                <div id="success-message" class="success-message" style="display: none;"></div>
                <div id="error-message" class="error-message" style="display: none;"></div>
            </div>
        </div>

        <!-- ダッシュボード（ログイン後表示） -->
        <div id="dashboard-section" style="display: none;">
            <!-- 今回のログイン情報 -->
            <div id="login-info-section" class="login-info-section" style="display: none;">
                <div class="login-info-card">
                    <div class="login-info-icon">🎉</div>
                    <div class="login-info-content">
                        <h3 id="login-info-title">ログイン成功</h3>
                        <div id="login-info-message" class="login-info-message"></div>
                        <div id="login-info-points" class="login-info-points" style="display: none;">
                            <span class="points-icon">🎆</span>
                            <span id="login-points-text">ログインポイント獲得！</span>
                            <span id="login-points-value" class="points-value">+0pt</span>
                        </div>
                    </div>
                    <button id="login-info-close" class="close-btn">×</button>
                </div>
            </div>

            <!-- 会員ステータス -->
            <div class="status-section">
                <div class="status-grid">
                    <!-- メインステータスカード -->
                    <div class="status-card main-status">
                        <div class="status-header">
                            <div class="status-icon" id="main-status-icon">👤</div>
                            <div class="status-badge" id="status-badge">読み込み中</div>
                        </div>
                        <div class="status-info">
                            <h3>会員ステータス</h3>
                            <div id="membership-status" class="status-value">読み込み中...</div>
                            <div id="membership-details" class="status-details"></div>
                        </div>
                    </div>
                    
                    <!-- 統計情報グリッド -->
                    <div class="stats-mini-grid">
                        <div class="mini-stat-card">
                            <div class="mini-stat-icon">🔥</div>
                            <div class="mini-stat-info">
                                <div class="mini-stat-value" id="total-logins">-</div>
                                <div class="mini-stat-label">ログイン日数</div>
                            </div>
                        </div>
                        
                        <div class="mini-stat-card">
                            <div class="mini-stat-icon">📅</div>
                            <div class="mini-stat-info">
                                <div class="mini-stat-value" id="member-days">-</div>
                                <div class="mini-stat-label">会員歴</div>
                            </div>
                        </div>
                        
                        <div class="mini-stat-card">
                            <div class="mini-stat-icon">🎯</div>
                            <div class="mini-stat-info">
                                <div class="mini-stat-value" id="streak-days">-</div>
                                <div class="mini-stat-label">連続日数</div>
                            </div>
                        </div>
                        
                        <div class="mini-stat-card rank-card">
                            <div class="mini-stat-icon" id="current-rank-icon">🌱</div>
                            <div class="mini-stat-info">
                                <div class="mini-stat-value" id="current-rank-name">ビギナー</div>
                                <div class="mini-stat-label">現在ランク</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- VIP情報カード（Premiumのみ） -->
                    <div class="vip-status-card" id="vip-status-card" style="display: none;">
                        <div class="vip-header">
                            <div class="vip-icon">👑</div>
                            <div class="vip-title">VIP会員特典</div>
                        </div>
                        <div class="vip-benefits" id="vip-benefits">
                            <div class="vip-benefit">✨ 優先サポート</div>
                            <div class="vip-benefit">🏆 限定コンテンツ</div>
                            <div class="vip-benefit">💰 ボーナスポイント</div>
                        </div>
                    </div>
                    
                    <!-- プラン特典カード（Standard/Free用） -->
                    <div class="plan-benefits-card" id="plan-benefits-card" style="display: none;">
                        <div class="plan-header">
                            <div class="plan-icon" id="plan-icon">🎁</div>
                            <div class="plan-title" id="plan-title">プラン特典</div>
                        </div>
                        <div class="plan-benefits" id="plan-benefits">
                            <div class="plan-benefit">🏇 後半3レース予想</div>
                            <div class="plan-benefit">💰 デイリー10pt</div>
                        </div>
                    </div>
                    
                    <!-- ランク目安カード -->
                    <div class="rank-guide-card" id="rank-guide-card">
                        <div class="rank-guide-header">
                            <div class="rank-guide-icon">🏆</div>
                            <div class="rank-guide-title">ランク目安</div>
                        </div>
                        <div class="rank-list" id="rank-list">
                            <div class="rank-item">
                                <div class="rank-badge beginner">🌱</div>
                                <div class="rank-info">
                                    <div class="rank-name">ビギナー</div>
                                    <div class="rank-requirement">0-199pt</div>
                                </div>
                            </div>
                            <div class="rank-item">
                                <div class="rank-badge bronze">🥉</div>
                                <div class="rank-info">
                                    <div class="rank-name">ブロンズ</div>
                                    <div class="rank-requirement">200-599pt</div>
                                </div>
                            </div>
                            <div class="rank-item">
                                <div class="rank-badge silver">🥈</div>
                                <div class="rank-info">
                                    <div class="rank-name">シルバー</div>
                                    <div class="rank-requirement">600-1199pt</div>
                                </div>
                            </div>
                            <div class="rank-item">
                                <div class="rank-badge gold">🥇</div>
                                <div class="rank-info">
                                    <div class="rank-name">ゴールド</div>
                                    <div class="rank-requirement">1200-2999pt</div>
                                </div>
                            </div>
                            <div class="rank-item">
                                <div class="rank-badge platinum">🏆</div>
                                <div class="rank-info">
                                    <div class="rank-name">プラチナ</div>
                                    <div class="rank-requirement">3000-7999pt</div>
                                </div>
                            </div>
                            <div class="rank-item">
                                <div class="rank-badge diamond">💎</div>
                                <div class="rank-info">
                                    <div class="rank-name">ダイヤモンド</div>
                                    <div class="rank-requirement">8000pt+</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ポイントカード -->
            <div class="points-section">
                <div class="points-card">
                    <div class="points-header">
                        <h2>💎 累計ポイント</h2>
                        <div class="points-value">
                            <span id="current-points">0</span>
                            <span class="points-unit">pt</span>
                        </div>
                    </div>
                    <div class="points-progress">
                        <div class="progress-bar">
                            <div id="progress-fill" class="progress-fill"></div>
                        </div>
                        <div class="progress-info">
                            <span id="current-rank">🥉 ブロンズ</span>
                            <span id="next-rank-info">次のランクまで: 500pt</span>
                        </div>
                    </div>
                    <div class="rank-benefits">
                        <h3>ランク特典</h3>
                        <div id="rank-benefits-list" class="benefits-list"></div>
                    </div>
                    <button id="claim-reward-btn" class="claim-btn" style="display: none;">
                        🎁 特典を申請する
                    </button>
                </div>
            </div>

            <!-- ポイント交換メニュー -->
            <div class="exchange-section">
                <div class="exchange-card">
                    <div class="exchange-header">
                        <h2>🎁 ポイント交換</h2>
                        <p class="exchange-subtitle">ポイントを特典と交換できます</p>
                    </div>
                    
                    <div class="exchange-grid">
                        <!-- 100pt特典 -->
                        <div class="exchange-option">
                            <div class="exchange-cost">100pt</div>
                            <div class="exchange-reward">Standard会員
1日パス</div>
                            <button class="exchange-btn" onclick="requestExchange(100, 'Standard会員1日パス')">
                                交換申請
                            </button>
                        </div>
                        
                        <!-- 300pt特典 -->
                        <div class="exchange-option">
                            <div class="exchange-cost">300pt</div>
                            <div class="exchange-reward">特別攻略
レポート</div>
                            <button class="exchange-btn" onclick="requestExchange(300, '特別攻略レポート配信')">
                                交換申請
                            </button>
                        </div>
                        
                        <!-- 500pt特典 -->
                        <div class="exchange-option">
                            <div class="exchange-cost">500pt</div>
                            <div class="exchange-reward">Premium会員
1日パス</div>
                            <button class="exchange-btn" onclick="requestExchange(500, 'Premium会員1日パス')">
                                交換申請
                            </button>
                        </div>
                        
                        <!-- 1000pt特典 -->
                        <div class="exchange-option">
                            <div class="exchange-cost">1000pt</div>
                            <div class="exchange-reward">個別相談
30分</div>
                            <button class="exchange-btn" onclick="requestExchange(1000, '個別相談30分')">
                                交換申請
                            </button>
                        </div>
                        
                        <!-- 2000pt特典 -->
                        <div class="exchange-option premium-option">
                            <div class="exchange-cost">2000pt</div>
                            <div class="exchange-reward">月額料金
500円割引</div>
                            <button class="exchange-btn" onclick="requestExchange(2000, '月額料金500円割引')">
                                交換申請
                            </button>
                        </div>
                        
                        <!-- 3000pt特典 -->
                        <div class="exchange-option premium-option">
                            <div class="exchange-cost">3000pt</div>
                            <div class="exchange-reward">Premium会員
1ヶ月無料</div>
                            <button class="exchange-btn" onclick="requestExchange(3000, 'Premium会員1ヶ月無料')">
                                交換申請
                            </button>
                        </div>
                    </div>
                    
                    <div class="exchange-note">
                        <small>※ 交換申請後、管理者が確認後に特典を提供いたします。</small>
                    </div>
                </div>
            </div>

            <!-- 今日の予想 -->
            <div class="predictions-section">
                <h2>🏇 今日の予想</h2>
                <div class="predictions-grid">
                    
                    <!-- 無料予想 -->
                    <div id="free-predictions" class="prediction-card free">
                        <div class="card-header">
                            <h3>🎁 無料予想</h3>
                            <span class="plan-badge free">FREE</span>
                        </div>
                        <div class="race-info">
                            <div class="race-title">メインレース（11R）</div>
                            <div class="confidence">予想精度: 87.3%</div>
                        </div>
                        <a href="/free-prediction/" class="view-btn">予想を見る</a>
                    </div>

                    <!-- Standard予想 -->
                    <div id="standard-predictions" class="prediction-card standard" style="display: none;">
                        <div class="card-header">
                            <h3>⚡ Standard予想</h3>
                            <span class="plan-badge standard">STANDARD</span>
                        </div>
                        <div class="race-info">
                            <div class="race-title">後半3レース（10R-12R）</div>
                            <div class="confidence">予想精度: 89.1%</div>
                        </div>
                        <a href="/standard-predictions/" class="view-btn">予想を見る</a>
                    </div>

                    <!-- Premium予想 -->
                    <div id="premium-predictions" class="prediction-card premium" style="display: none;">
                        <div class="card-header">
                            <h3>💎 Premium予想</h3>
                            <span class="plan-badge premium">PREMIUM</span>
                        </div>
                        <div class="race-info">
                            <div class="race-title">全レース（1R-12R）</div>
                            <div class="confidence">予想精度: 91.8%</div>
                        </div>
                        <a href="/premium-predictions/" class="view-btn">予想を見る</a>
                    </div>
                </div>
            </div>

            <!-- プラン管理 -->
            <div class="plan-section">
                <h2>📋 プラン管理</h2>
                <div class="plan-actions">
                    <a href="/pricing/" class="action-btn upgrade">プランをアップグレード</a>
                    <button id="logout-btn" class="action-btn logout">ログアウト</button>
                </div>
            </div>

            <!-- アップグレード促進（無料・Standard会員のみ表示） -->
            <div id="upgrade-promotion" class="upgrade-section" style="display: none;">
                <div class="upgrade-card">
                    <h3>🚀 さらなる投資効率を目指しませんか？</h3>
                    <p>上位プランで全レースの詳細予想と高精度分析データによる買い目にアクセスできます</p>
                    <a href="/pricing/" class="upgrade-btn">今すぐアップグレード</a>
                </div>
            </div>
        </div>
    </div>

    <!-- 簡略化された認証システム -->
    <script>

        // 簡略化されたセッション管理
        function isAuthenticated() {
            const userPlanData = localStorage.getItem('user-plan');
            const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
            const userPlan = localStorage.getItem('userPlan');
            
            return !!(userPlanData || isLoggedIn || userPlan);
        }
        
        async function getCustomerData() {
            console.log('🔍 getCustomerData 開始');
            
            // 新しい決済システムのデータを最優先
            const userPlanData = localStorage.getItem('user-plan');
            console.log('📦 user-plan データ:', userPlanData);
            
            if (userPlanData) {
                try {
                    const userData = JSON.parse(userPlanData);
                    console.log('📋 解析したuserData:', userData);
                    
                    // 実際のポイントをFunctionsから取得
                    console.log('🚀 fetchUserPoints 呼び出し開始:', userData.email);
                    const realPoints = await fetchUserPoints(userData.email);
                    console.log('🎯 取得したrealPoints:', realPoints);
                    
                    const result = {
                        email: userData.email,
                        plan: userData.plan || 'free',
                        points: realPoints,
                        hasClaimedReward: localStorage.getItem('hasClaimedReward') === 'true',
                        registrationDate: userData.registeredAt,
                        name: 'お客様'
                    };
                    console.log('✅ getCustomerData 返却値:', result);
                    return result;
                } catch (e) {
                    console.warn('user-plan解析エラー:', e);
                }
            }
            
            // 古いシステムのデータをフォールバック
            const email = localStorage.getItem('userEmail');
            const plan = localStorage.getItem('userPlan') || 'free';
            
            if (email || plan !== 'free') {
                // 実際のポイントをFunctionsから取得
                const realPoints = await fetchUserPoints(email);
                return {
                    email: email || 'member@example.com',
                    plan: plan,
                    points: realPoints,
                    hasClaimedReward: localStorage.getItem('hasClaimedReward') === 'true',
                    name: 'お客様'
                };
            }
            
            return null;
        }

        // Functionsからユーザーポイントを取得（実際のAirtableデータ優先）
        async function fetchUserPoints(email) {
            console.log('📝 fetchUserPoints 呼び出し:', email);
            if (!email) {
                console.log('⚠️ メールアドレスが空です');
                return 0;
            }
            
            try {
                const functionsUrl = window.location.hostname === 'localhost' 
                    ? 'http://localhost:9999/.netlify/functions/get-user-points'
                    : '/.netlify/functions/get-user-points';
                
                const response = await fetch(`${functionsUrl}?email=${encodeURIComponent(email)}`);
                
                if (!response.ok) {
                    console.error('ポイント取得エラー:', response.status);
                    return 0;
                }
                
                const data = await response.json();
                const points = data.points || 0;
                console.log(`📊 Airtableから取得: ${points}pt (email: ${email})`);
                return points;
                
            } catch (error) {
                console.error('⚠️ ポイント取得エラー:', error);
                console.log('🔄 エラーのため0ptを返します');
                return 0;
            }
        }

        // ランク定義 - より長期的な達成感のある設計
        const RANK_THRESHOLDS = {
            ビギナー: { min: 0, max: 199, name: '🌱 ビギナー', next: 200 },
            ブロンズ: { min: 200, max: 599, name: '🥉 ブロンズ', next: 600 },
            シルバー: { min: 600, max: 1199, name: '🥈 シルバー', next: 1200 },
            ゴールド: { min: 1200, max: 2999, name: '🥇 ゴールド', next: 3000 },
            プラチナ: { min: 3000, max: 7999, name: '🏆 プラチナ', next: 8000 },
            ダイヤモンド: { min: 8000, max: Infinity, name: '💎 ダイヤモンド', next: null }
        };

        // ランク特典
        const RANK_BENEFITS = {
            ビギナー: ['毎日のポイント獲得'],
            ブロンズ: ['毎日のポイント獲得', '月間レポート'],
            シルバー: ['毎日のポイント獲得', '月間レポート', '特典申請可能'],
            ゴールド: ['毎日のポイント獲得', '優先サポート', '月間レポート', '特典申請可能'],
            プラチナ: ['毎日のポイント獲得', '優先サポート', '詳細分析レポート', '特典申請可能'],
            ダイヤモンド: ['毎日のポイント獲得', '個別AI分析', 'VIPサポート', '特典申請可能']
        };

        // 簡略化されたマジックリンクフォーム処理
        document.getElementById('magic-link-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('email-input').value;
            const button = document.getElementById('magic-link-btn');
            
            button.disabled = true;
            button.textContent = '送信中...';
            
            try {
                // Netlify Functions経由でAirtableから正確なプラン情報を取得（エラーハンドリング強化）
                let response;
                let data;
                
                try {
                    // 開発環境では直接Functions サーバーを呼び出す
                    const functionsUrl = window.location.hostname === 'localhost' 
                        ? 'http://localhost:9999/.netlify/functions/auth-user'
                        : '/.netlify/functions/auth-user';
                    
                    response = await fetch(functionsUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ email: email })
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Functions error: ${response.status}`);
                    }
                    
                    data = await response.json();
                } catch (fetchError) {
                    console.error('Functions呼び出しエラー:', fetchError);
                    
                    // エラー表示して処理を停止
                    throw new Error('認証システムエラー。再度お試しください。');
                }
                
                if (data.success && data.user) {
                    console.log('✅ ログイン成功:', data.user);
                    
                    // セッション情報保存
                    localStorage.setItem('isLoggedIn', 'true');
                    localStorage.setItem('userEmail', data.user.email);
                    localStorage.setItem('userPlan', data.user.plan);
                    
                    const planNames = {
                        'free': '無料会員',
                        'Free': '無料会員',
                        'standard': 'Standard会員',
                        'Standard': 'Standard会員',
                        'premium': 'Premium会員',
                        'Premium': 'Premium会員'
                    };
                    
                    const planDisplayName = planNames[data.user.plan] || data.user.plan;
                    
                    // ログイン情報をダッシュボードに保存（画面切り替え後に表示用）
                    const loginInfo = {
                        planDisplayName: planDisplayName,
                        pointsAdded: data.user.pointsAdded,
                        totalPoints: data.user.points,
                        email: data.user.email
                    };
                    localStorage.setItem('loginInfo', JSON.stringify(loginInfo));
                    
                    // ログインポイント付与通知
                    if (data.user.pointsAdded > 0) {
                        const message = `✅ ${planDisplayName}でログイン！ログインポイント${data.user.pointsAdded}pt獲得`;
                        console.log('成功メッセージ:', message);
                        showSuccess(message);
                        console.log('ポイント通知表示:', data.user.pointsAdded);
                        showPointsNotification(data.user.pointsAdded);
                    } else {
                        const message = `✅ ${planDisplayName}でログインしました（本日のポイントは付与済み）`;
                        console.log('成功メッセージ（ポイント付与済み）:', message);
                        showSuccess(message);
                    }
                    
                    document.getElementById('email-input').value = '';
                    
                    // ダッシュボード表示用データ準備（Functionsから取得した実データを使用）
                    const dashboardData = {
                        email: data.user.email,
                        plan: data.user.plan,
                        points: data.user.points,  // Functions から取得した実際のポイント
                        hasClaimedReward: localStorage.getItem('hasClaimedReward') === 'true',
                        registrationDate: data.user.registeredAt || data.user.lastLogin,
                        name: 'お客様'
                    };
                    
                    setTimeout(() => {
                        showDashboard(dashboardData);
                        // ナビゲーション更新のためイベント発火
                        window.dispatchEvent(new Event('storage'));
                    }, 1000);
                } else {
                    throw new Error('Invalid customer data');
                }
                
            } catch (error) {
                console.error('Login error:', error);
                showError(`認証エラー: ${error.message}`);
            } finally {
                button.disabled = false;
                button.textContent = 'ログイン';
            }
        });

        // URLパラメータからトークン認証処理（簡略化）
        async function handleTokenAuth() {
            const urlParams = new URLSearchParams(window.location.search);
            const token = urlParams.get('token');
            const email = urlParams.get('email');
            
            if (token && email) {
                console.log('マジックリンク認証開始:', email);
                
                try {
                    // 簡略化された認証：メールアドレスからプランを推定
                    const mockCustomer = {
                        email: email,
                        plan: email.includes('premium') ? 'premium' : (email.includes('standard') ? 'standard' : 'free'),
                        registrationDate: new Date().toISOString()
                    };
                    
                    // セッション情報保存
                    localStorage.setItem('isLoggedIn', 'true');
                    localStorage.setItem('userEmail', mockCustomer.email);
                    localStorage.setItem('userPlan', mockCustomer.plan);
                    
                    console.log('認証成功:', mockCustomer);
                    // URLからパラメータを削除
                    window.history.replaceState({}, document.title, window.location.pathname);
                    // ダッシュボード表示
                    showDashboard(mockCustomer);
                    
                } catch (error) {
                    console.error('認証エラー:', error);
                    showError('認証に失敗しました');
                }
            }
        }

        // ダッシュボード表示
        function showDashboard(customerData) {
            console.log('🎨 showDashboard 開始, customerData:', customerData);
            
            // セクション切り替え
            document.getElementById('login-section').style.display = 'none';
            document.getElementById('dashboard-section').style.display = 'block';
            
            // ログイン情報表示
            showLoginInfo();
            
            // 会員情報表示
            updateMembershipInfo(customerData);
            
            // ポイント表示
            console.log('🎯 updatePointsDisplay 呼び出し, points:', customerData.points);
            updatePointsDisplay(customerData.points, customerData.hasClaimedReward);
            
            // プラン別コンテンツ表示
            showPlanContent(customerData.plan);
        }

        // ログイン情報表示
        function showLoginInfo() {
            const loginInfoData = localStorage.getItem('loginInfo');
            if (loginInfoData) {
                try {
                    const loginInfo = JSON.parse(loginInfoData);
                    const loginInfoSection = document.getElementById('login-info-section');
                    const loginInfoMessage = document.getElementById('login-info-message');
                    const loginInfoPoints = document.getElementById('login-info-points');
                    const loginPointsValue = document.getElementById('login-points-value');

                    // メッセージ設定
                    if (loginInfo.pointsAdded > 0) {
                        loginInfoMessage.textContent = `${loginInfo.planDisplayName}でログイン成功！`;
                        loginPointsValue.textContent = `+${loginInfo.pointsAdded}pt`;
                        loginInfoPoints.style.display = 'flex';
                    } else {
                        loginInfoMessage.textContent = `${loginInfo.planDisplayName}でログインしました（本日のポイントは付与済み）`;
                        loginInfoPoints.style.display = 'none';
                    }

                    // セクション表示
                    loginInfoSection.style.display = 'block';
                    
                    // ログイン情報を一度表示したら削除（リロード時に再表示しないため）
                    localStorage.removeItem('loginInfo');
                    
                } catch (e) {
                    console.error('ログイン情報の解析エラー:', e);
                }
            }
        }

        // 会員情報更新（統計情報付き）
        function updateMembershipInfo(data) {
            const planNames = {
                'free': '🎁 無料会員',
                'Free': '🎁 無料会員',
                'standard': '⚡ Standard会員',
                'Standard': '⚡ Standard会員',
                'premium': '💎 Premium会員',
                'Premium': '💎 Premium会員'
            };
            
            const planIcons = {
                'free': '🎁',
                'Free': '🎁',
                'standard': '⚡',
                'Standard': '⚡',
                'premium': '💎',
                'Premium': '💎'
            };
            
            const planBadgeTexts = {
                'free': 'FREE',
                'Free': 'FREE',
                'standard': 'STANDARD',
                'Standard': 'STANDARD',
                'premium': 'PREMIUM',
                'Premium': 'PREMIUM'
            };
            
            // メインステータス更新
            document.getElementById('membership-status').textContent = planNames[data.plan] || '🎁 無料会員';
            document.getElementById('main-status-icon').textContent = planIcons[data.plan] || '🎁';
            document.getElementById('status-badge').textContent = planBadgeTexts[data.plan] || 'FREE';
            
            let detailsHtml = `<div class="email">${data.email}</div>`;
            if (data.name && data.name !== 'お客様') {
                detailsHtml += `<div class="name">お名前: ${data.name}</div>`;
            }
            if (data.registrationDate) {
                const regDate = new Date(data.registrationDate);
                const daysSinceRegistration = Math.floor((new Date() - regDate) / (1000 * 60 * 60 * 24));
                detailsHtml += `<div class="registered">登録日: ${regDate.toLocaleDateString('ja-JP')}</div>`;
                
                // 会員歴を表示
                document.getElementById('member-days').textContent = `${daysSinceRegistration}日`;
            }
            
            document.getElementById('membership-details').innerHTML = detailsHtml;
            
            // モック統計データとランク表示（開発環境用）
            updateMockStats(data.plan, data.points || 0);
            updateCurrentRankDisplay(data.points || 0);
            updateRankGuide(data.points || 0);
            
            // プラン別特典カード表示
            const vipCard = document.getElementById('vip-status-card');
            const planCard = document.getElementById('plan-benefits-card');
            
            if (data.plan === 'premium' || data.plan === 'Premium') {
                // Premium会員はVIPカードを表示
                vipCard.style.display = 'block';
                planCard.style.display = 'none';
                updateVipBenefits(data.plan);
            } else if (data.plan === 'standard' || data.plan === 'Standard') {
                // Standard会員はプラン特典カードを表示
                vipCard.style.display = 'none';
                planCard.style.display = 'block';
                updatePlanBenefits('standard');
            } else {
                // Free会員は両方非表示
                vipCard.style.display = 'none';
                planCard.style.display = 'none';
            }
        }
        
        // モック統計データ更新
        function updateMockStats(plan, points) {
            console.log('📊 updateMockStats 呼び出し:', { plan, points });
            
            // プランに応じたモックデータ
            const mockData = {
                free: { logins: 5, streak: 2, earned: '15pt' },
                Free: { logins: 5, streak: 2, earned: '15pt' },
                standard: { logins: 25, streak: 7, earned: '890pt' },
                Standard: { logins: 25, streak: 7, earned: '890pt' },
                premium: { logins: 45, streak: 12, earned: '2.1k pt' },
                Premium: { logins: 45, streak: 12, earned: '2.1k pt' }
            };
            
            const stats = mockData[plan] || mockData.free;
            
            // 要素の存在チェック付きで更新
            const totalLoginsEl = document.getElementById('total-logins');
            const streakDaysEl = document.getElementById('streak-days');
            const totalEarnedEl = document.getElementById('total-earned');
            
            if (totalLoginsEl) {
                totalLoginsEl.textContent = `${stats.logins}回`;
            } else {
                console.warn('⚠️ total-logins 要素が見つかりません');
            }
            
            if (streakDaysEl) {
                streakDaysEl.textContent = `${stats.streak}日`;
            } else {
                console.warn('⚠️ streak-days 要素が見つかりません');
            }
            
            if (totalEarnedEl) {
                totalEarnedEl.textContent = stats.earned;
            } else {
                console.warn('⚠️ total-earned 要素が見つかりません');
            }
            
            console.log('✅ updateMockStats 完了');
        }
        
        // VIP特典更新
        function updateVipBenefits(plan) {
            const benefits = {
                standard: [
                    '⚡ 後半3レース予想',
                    '📊 統計データ閲覧',
                    '💰 デイリー10pt'
                ],
                Standard: [
                    '⚡ 後半3レース予想',
                    '📊 統計データ閲覧',
                    '💰 デイリー10pt'
                ],
                premium: [
                    '💎 全レース予想',
                    '🏆 優先サポート',
                    '💰 デイリー50pt'
                ],
                Premium: [
                    '💎 全レース予想',
                    '🏆 優先サポート',
                    '💰 デイリー50pt'
                ]
            };
            
            const planBenefits = benefits[plan] || benefits.standard;
            document.getElementById('vip-benefits').innerHTML = planBenefits
                .map(benefit => `<div class="vip-benefit">${benefit}</div>`)
                .join('');
        }
        
        // プラン特典更新（Standard用）
        function updatePlanBenefits(plan) {
            const benefits = {
                standard: [
                    '🏇 後半3レース予想',
                    '📊 統計データ閲覧',
                    '💰 デイリー10pt'
                ]
            };
            
            const planBenefits = benefits[plan] || benefits.standard;
            document.getElementById('plan-benefits').innerHTML = planBenefits
                .map(benefit => `<div class="plan-benefit">${benefit}</div>`)
                .join('');
        }
        
        // 現在ランク表示更新
        function updateCurrentRankDisplay(points) {
            const RANK_INFO = {
                'ビギナー': { icon: '🌱', emoji: '🌱', name: 'ビギナー' },
                'ブロンズ': { icon: '🥉', emoji: '🥉', name: 'ブロンズ' },
                'シルバー': { icon: '🥈', emoji: '🥈', name: 'シルバー' },
                'ゴールド': { icon: '🥇', emoji: '🥇', name: 'ゴールド' },
                'プラチナ': { icon: '🏆', emoji: '🏆', name: 'プラチナ' },
                'ダイヤモンド': { icon: '💎', emoji: '💎', name: 'ダイヤモンド' }
            };
            
            // ランク判定ロジックと同じものを使用
            let currentRankKey = 'ビギナー';
            for (const [key, threshold] of Object.entries(RANK_THRESHOLDS)) {
                if (points >= threshold.min && points <= threshold.max) {
                    currentRankKey = key;
                    break;
                }
            }
            
            const rankInfo = RANK_INFO[currentRankKey];
            if (rankInfo) {
                document.getElementById('current-rank-icon').textContent = rankInfo.icon;
                document.getElementById('current-rank-name').textContent = rankInfo.name;
            }
        }
        
        // ランク目安ガイド更新
        function updateRankGuide(currentPoints) {
            const rankItems = document.querySelectorAll('.rank-item');
            
            // 現在ランクをハイライト
            let currentRankKey = 'ビギナー';
            for (const [key, threshold] of Object.entries(RANK_THRESHOLDS)) {
                if (currentPoints >= threshold.min && currentPoints <= threshold.max) {
                    currentRankKey = key;
                    break;
                }
            }
            
            // ランクアイテムにハイライトを設定
            rankItems.forEach((item, index) => {
                const rankNames = ['ビギナー', 'ブロンズ', 'シルバー', 'ゴールド', 'プラチナ', 'ダイヤモンド'];
                
                if (rankNames[index] === currentRankKey) {
                    item.classList.add('current');
                } else {
                    item.classList.remove('current');
                }
            });
        }

        // ポイント獲得通知表示
        function showPointsNotification(points) {
            console.log('showPointsNotification 呼び出し:', points);
            const notification = document.createElement('div');
            notification.className = 'points-notification';
            notification.innerHTML = `
                <div class="notification-content">
                    🎆 ログインポイント獲得！
                    <span class="points-added">+${points}pt</span>
                </div>
            `;
            document.body.appendChild(notification);
            console.log('ポイント通知をDOMに追加:', notification);
            
            // アニメーション後に削除
            setTimeout(() => {
                notification.classList.add('fade-out');
                setTimeout(() => notification.remove(), 500);
            }, 3000);
        }
        
        // ポイント表示更新（射幸心を煽る演出付き）
        function updatePointsDisplay(points, hasClaimedReward = false) {
            console.log('ポイント表示更新:', points);
            
            // ポイント数をアニメーション付きで表示
            animatePointsDisplay(points);
            
            // ランク判定
            let currentRankKey = 'ビギナー';
            for (const [key, threshold] of Object.entries(RANK_THRESHOLDS)) {
                if (points >= threshold.min && points <= threshold.max) {
                    currentRankKey = key;
                    break;
                }
            }
            
            const rankData = RANK_THRESHOLDS[currentRankKey];
            document.getElementById('current-rank').textContent = rankData.name;
            
            // 次のランクまでの情報と進捗バー
            const progressFill = document.getElementById('progress-fill');
            const nextRankInfo = document.getElementById('next-rank-info');
            
            if (rankData.next) {
                const pointsToNext = rankData.next - points;
                const progressPercentage = Math.round(((points - rankData.min) / (rankData.next - rankData.min)) * 100);
                
                // モチベーション向上の文言
                let motivationalText = '';
                if (progressPercentage >= 80) {
                    motivationalText = '🔥 あと一歩で昇格！';
                } else if (progressPercentage >= 60) {
                    motivationalText = '⚡ 昇格まであと少し！';
                } else if (progressPercentage >= 40) {
                    motivationalText = '🌟 順調に成長中！';
                } else {
                    motivationalText = '💪 頑張って貯めよう！';
                }
                
                nextRankInfo.innerHTML = `
                    <span class="next-rank-label">次のランクまで</span>
                    <span class="points-needed">${pointsToNext}pt (${progressPercentage}%)</span>
                    <span class="motivational-text">${motivationalText}</span>
                `;
                
                // より視覚的に満足感のある進捗計算
                // 累積ポイントの全体的な進捗も考慮
                const overallProgress = Math.min(95, (points / 10000) * 100); // 10000pt で95%
                const currentRankProgress = ((points - rankData.min) / (rankData.next - rankData.min)) * 100;
                
                // 両方を組み合わせてより長い進捗感を演出
                const finalProgress = Math.max(
                    currentRankProgress,
                    Math.min(currentRankProgress + (overallProgress * 0.3), 85)
                );
                
                const safeProgress = Math.max(15, Math.min(100, finalProgress));
                
                console.log('プログレス計算:', {
                    points,
                    min: rankData.min,
                    next: rankData.next,
                    currentRankProgress: Math.round(currentRankProgress),
                    overallProgress: Math.round(overallProgress),
                    finalProgress: Math.round(safeProgress)
                });
                
                // アニメーション付きでプログレスバー更新
                animateProgressBar(progressFill, safeProgress);
                
                // 進捗に応じてバーの色を変更（射幸心演出）
                updateProgressBarColor(progressFill, safeProgress, currentRankKey);
                
            } else {
                // ダイヤモンドランクでも継続的な達成感を演出
                const diamondProgress = Math.min(100, 60 + ((points - 8000) / 2000) * 40);
                
                nextRankInfo.innerHTML = `
                    <span class="max-rank-achieved">🎉 最高ランク達成！</span>
                    <span class="congratulations">ポイント: ${points}pt - 伝説の領域！</span>
                `;
                animateProgressBar(progressFill, diamondProgress);
                updateProgressBarColor(progressFill, diamondProgress, currentRankKey);
            }
            
            // ランク特典表示（より魅力的に）
            const benefits = RANK_BENEFITS[currentRankKey] || RANK_BENEFITS['ビギナー'];
            document.getElementById('rank-benefits-list').innerHTML = benefits
                .map(b => `<div class="benefit-item premium-benefit">⭐ ${b}</div>`)
                .join('');
            
            // 特典申請ボタン表示判定（より目立つように）
            if (points >= 1000 && !hasClaimedReward) {
                const button = document.getElementById('claim-reward-btn');
                if (button) {
                    button.style.display = 'block';
                    button.classList.add('pulse-animation');
                }
            }
        }

        // ポイント数のアニメーション表示
        function animatePointsDisplay(targetPoints) {
            const pointsElement = document.getElementById('current-points');
            const currentPoints = parseInt(pointsElement.textContent) || 0;
            const duration = 1500; // 1.5秒
            const steps = 30;
            const increment = (targetPoints - currentPoints) / steps;
            
            let step = 0;
            const timer = setInterval(() => {
                step++;
                const currentValue = currentPoints + (increment * step);
                pointsElement.textContent = Math.round(currentValue);
                
                if (step >= steps) {
                    clearInterval(timer);
                    pointsElement.textContent = targetPoints;
                    // 完了時にキラキラ演出
                    pointsElement.classList.add('points-sparkle');
                    setTimeout(() => {
                        pointsElement.classList.remove('points-sparkle');
                    }, 1000);
                }
            }, duration / steps);
        }

        // プログレスバーのアニメーション
        function animateProgressBar(progressElement, targetProgress) {
            const currentWidth = parseFloat(progressElement.style.width) || 0;
            const duration = 1200; // 1.2秒
            const steps = 24;
            const increment = (targetProgress - currentWidth) / steps;
            
            let step = 0;
            const timer = setInterval(() => {
                step++;
                const currentValue = currentWidth + (increment * step);
                progressElement.style.width = `${currentValue}%`;
                
                if (step >= steps) {
                    clearInterval(timer);
                    progressElement.style.width = `${targetProgress}%`;
                }
            }, duration / steps);
        }

        // プログレスバーの色更新（進捗に応じて）
        function updateProgressBarColor(progressElement, progress, rankKey) {
            progressElement.classList.remove(
                'progress-bronze', 'progress-silver', 'progress-gold', 
                'progress-platinum', 'progress-diamond', 'progress-max'
            );
            
            if (progress >= 90) {
                progressElement.classList.add('progress-max');
            } else if (rankKey === 'ダイヤモンド') {
                progressElement.classList.add('progress-diamond');
            } else if (rankKey === 'プラチナ') {
                progressElement.classList.add('progress-platinum');
            } else if (rankKey === 'ゴールド') {
                progressElement.classList.add('progress-gold');
            } else if (rankKey === 'シルバー') {
                progressElement.classList.add('progress-silver');
            } else {
                progressElement.classList.add('progress-bronze');
            }
        }

        // プラン別コンテンツ表示
        function showPlanContent(plan) {
            console.log('showPlanContent 呼び出し:', plan);
            
            const planLower = (plan || '').toLowerCase();
            
            // 無料予想の表示制御
            if (planLower === 'free' || planLower === '' || !planLower) {
                console.log('無料予想を表示（Free会員）');
                document.getElementById('free-predictions').style.display = 'block';
            } else {
                console.log('無料予想を非表示（有料会員）');
                document.getElementById('free-predictions').style.display = 'none';
            }
            
            // Standard予想の表示制御（Standard会員のみ）
            if (planLower === 'standard') {
                console.log('Standard予想を表示');
                document.getElementById('standard-predictions').style.display = 'block';
            } else {
                console.log('Standard予想を非表示');
                document.getElementById('standard-predictions').style.display = 'none';
            }
            
            // Premium予想の表示制御
            if (planLower === 'premium') {
                console.log('Premium予想を表示');
                document.getElementById('premium-predictions').style.display = 'block';
            }
            
            // アップグレード促進の表示制御
            if (planLower !== 'premium') {
                console.log('アップグレード促進を表示');
                document.getElementById('upgrade-promotion').style.display = 'block';
            }
        }

        // 成功メッセージ表示
        function showSuccess(message) {
            console.log('showSuccess 呼び出し:', message);
            const successEl = document.getElementById('success-message');
            console.log('success-message 要素:', successEl);
            if (successEl) {
                successEl.textContent = message;
                successEl.style.display = 'block';
                console.log('成功メッセージ表示済み');
                setTimeout(() => {
                    successEl.style.display = 'none';
                }, 10000);
            } else {
                console.error('success-message 要素が見つかりません');
            }
        }

        // エラー表示
        function showError(message) {
            const errorEl = document.getElementById('error-message');
            errorEl.textContent = message;
            errorEl.style.display = 'block';
            setTimeout(() => {
                errorEl.style.display = 'none';
            }, 5000);
        }

        // 特典申請（簡略化）
        document.getElementById('claim-reward-btn')?.addEventListener('click', async () => {
            const customer = getCustomerData();
            if (!customer || !customer.email) {
                showError('ログイン情報が取得できません');
                return;
            }
            
            if (confirm('特典を申請しますか？\n\n申請後は取り消しできません。')) {
                const button = document.getElementById('claim-reward-btn');
                button.disabled = true;
                button.textContent = '申請中...';
                
                try {
                    // 簡略化：ローカル処理
                    setTimeout(() => {
                        button.textContent = '✅ 申請済み';
                        button.style.background = '#64748b';
                        alert('特典申請を受け付けました！\n3営業日以内にメールでご連絡いたします。');
                        
                        // ローカルストレージに申請済みフラグを保存
                        localStorage.setItem('hasClaimedReward', 'true');
                    }, 1000);
                    
                } catch (error) {
                    console.error('特典申請エラー:', error);
                    button.disabled = false;
                    button.textContent = '🎁 特典を申請する';
                    alert('申請に失敗しました: ' + error.message);
                }
            }
        });

        // ポイント交換申請関数
        window.requestExchange = async function(requiredPoints, rewardName) {
            const customer = await getCustomerData();
            
            if (!customer || !customer.email) {
                alert('ログインが必要です');
                return;
            }
            
            if (customer.points < requiredPoints) {
                alert(`ポイントが不足しています。\n必要: ${requiredPoints}pt\n現在: ${customer.points}pt`);
                return;
            }
            
            const subject = `ポイント交換申請: ${rewardName}`;
            const body = `
ユーザー: ${customer.email}
プラン: ${customer.plan}
申請: ${requiredPoints}pt → ${rewardName}
現在のポイント: ${customer.points}pt
申請日時: ${new Date().toLocaleString()}

※この申請は自動送信されました。管理者が確認後にご連絡いたします。
            `.trim();
            
            // メール申請を開く
            window.location.href = `mailto:support@keiba.link?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
        };

        // ログアウト（簡略化）
        window.logout = function() {
            // 全てのログイン情報をクリア
            localStorage.removeItem('user-plan');
            localStorage.removeItem('isLoggedIn');
            localStorage.removeItem('userPlan');
            localStorage.removeItem('userData');
            localStorage.removeItem('userEmail');
            localStorage.removeItem('hasClaimedReward');
            
            // ナビゲーション更新イベントを発火
            window.dispatchEvent(new CustomEvent('userLoggedOut'));
            
            // ホームページにリダイレクト
            setTimeout(() => {
                window.location.href = '/';
            }, 500);
        };

        // ページ読み込み時の初期化（簡略化）
        document.addEventListener('DOMContentLoaded', async () => {
            // ログアウトボタンにイベントリスナーを追加
            const logoutBtn = document.getElementById('logout-btn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', () => {
                    logout();
                });
            }
            
            // ログイン情報の閉じるボタン
            const loginInfoCloseBtn = document.getElementById('login-info-close');
            if (loginInfoCloseBtn) {
                loginInfoCloseBtn.addEventListener('click', () => {
                    document.getElementById('login-info-section').style.display = 'none';
                });
            }
            
            // マジックリンク認証チェック
            await handleTokenAuth();
            
            // 既存セッションチェック
            console.log('🔐 認証チェック開始');
            if (isAuthenticated()) {
                console.log('✅ 認証済み、顧客データ取得開始');
                const customer = await getCustomerData();
                console.log('👤 取得した顧客データ:', customer);
                if (customer) {
                    console.log('🎨 showDashboard 実行');
                    showDashboard(customer);
                } else {
                    console.log('⚠️ 顧客データがnull');
                }
            } else {
                console.log('❌ 未認証');
            }
        });
    </script>

    <style>
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            min-height: 100vh;
            color: #e2e8f0;
        }

        /* ヘッダー */
        .dashboard-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .dashboard-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .subtitle {
            font-size: 1.1rem;
            color: #94a3b8;
        }

        /* ログインセクション */
        .login-section {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 400px;
        }

        .login-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 1rem;
            padding: 2.5rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
            max-width: 400px;
            width: 100%;
        }

        .login-card h2 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            text-align: center;
        }

        .login-card p {
            color: #94a3b8;
            text-align: center;
            margin-bottom: 2rem;
        }

        .email-input {
            width: 100%;
            padding: 0.75rem;
            background: rgba(15, 23, 42, 0.5);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 0.5rem;
            color: #e2e8f0;
            font-size: 1rem;
            margin-bottom: 1rem;
        }

        .email-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .submit-btn {
            width: 100%;
            padding: 0.875rem;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.4);
        }

        .error-message {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #ef4444;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-top: 1rem;
            text-align: center;
        }

        .success-message {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            color: #10b981;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-top: 1rem;
            text-align: center;
        }

        /* ログイン情報セクション */
        .login-info-section {
            margin-bottom: 2rem;
            animation: slideInFromTop 0.5s ease;
        }

        .login-info-card {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            border-radius: 1rem;
            padding: 1.5rem;
            color: white;
            display: flex;
            align-items: center;
            gap: 1rem;
            position: relative;
            box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3);
        }

        .login-info-icon {
            font-size: 2rem;
        }

        .login-info-content {
            flex: 1;
        }

        .login-info-content h3 {
            margin: 0 0 0.5rem 0;
            font-size: 1.2rem;
        }

        .login-info-message {
            margin-bottom: 0.5rem;
            font-size: 0.95rem;
            opacity: 0.9;
        }

        .login-info-points {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
            margin-top: 0.5rem;
        }

        .points-icon {
            font-size: 1.2rem;
        }

        .points-value {
            background: rgba(255, 255, 255, 0.2);
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 1.1rem;
            font-weight: bold;
        }

        .close-btn {
            position: absolute;
            top: 0.5rem;
            right: 0.75rem;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s;
        }

        .close-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        @keyframes slideInFromTop {
            from {
                transform: translateY(-20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* 会員ステータス */
        .status-section {
            margin-bottom: 2rem;
        }

        .status-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 1rem;
            padding: 2rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .status-icon {
            font-size: 3rem;
        }

        .status-info h3 {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            color: #3b82f6;
        }

        .status-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .status-details {
            font-size: 0.9rem;
            color: #94a3b8;
        }

        .email {
            margin-bottom: 0.25rem;
        }

        .expires {
            font-size: 0.85rem;
            color: #10b981;
        }

        /* 会員ステータスグリッド */
        .status-section {
            margin-bottom: 2rem;
        }
        
        .status-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: auto auto auto;
            gap: 1.5rem;
        }
        
        /* メインステータスカード */
        .main-status {
            grid-column: 1;
            grid-row: 1 / 3;
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(139, 92, 246, 0.1) 100%);
            border-radius: 1rem;
            padding: 2rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .main-status::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(255, 255, 255, 0.05) 50%, transparent 100%);
            animation: status-shine 4s infinite;
        }
        
        @keyframes status-shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .status-icon {
            font-size: 2.5rem;
            filter: drop-shadow(0 2px 8px rgba(59, 130, 246, 0.3));
        }
        
        .status-badge {
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .status-info h3 {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            color: #3b82f6;
        }
        
        .status-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .status-details {
            font-size: 0.9rem;
            color: #94a3b8;
            line-height: 1.5;
        }
        
        /* ミニ統計グリッド */
        .stats-mini-grid {
            grid-column: 2;
            grid-row: 1;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
        
        .mini-stat-card {
            background: rgba(30, 41, 59, 0.6);
            border: 1px solid rgba(59, 130, 246, 0.2);
            border-radius: 0.75rem;
            padding: 1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            transition: all 0.3s ease;
        }
        
        .mini-stat-card:hover {
            transform: translateY(-2px);
            border-color: rgba(59, 130, 246, 0.4);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
        }
        
        .mini-stat-icon {
            font-size: 1.5rem;
            filter: drop-shadow(0 1px 3px rgba(59, 130, 246, 0.2));
        }
        
        .mini-stat-value {
            font-size: 1.2rem;
            font-weight: 700;
            color: #3b82f6;
            margin-bottom: 0.2rem;
        }
        
        .mini-stat-label {
            font-size: 0.75rem;
            color: #94a3b8;
            line-height: 1;
        }
        
        /* VIPステータスカード */
        .vip-status-card {
            grid-column: 2;
            grid-row: 2;
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1) 0%, rgba(255, 165, 0, 0.1) 100%);
            border: 1px solid rgba(255, 215, 0, 0.3);
            border-radius: 1rem;
            padding: 1.5rem;
            position: relative;
            overflow: hidden;
        }
        
        .vip-status-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(255, 215, 0, 0.1) 50%, transparent 100%);
            animation: vip-shine 3s infinite;
        }
        
        @keyframes vip-shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .vip-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .vip-icon {
            font-size: 1.5rem;
            filter: drop-shadow(0 2px 4px rgba(255, 215, 0, 0.3));
        }
        
        .vip-title {
            color: #fbbf24;
            font-weight: 700;
            font-size: 1rem;
        }
        
        .vip-benefits {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .vip-benefit {
            font-size: 0.85rem;
            color: #fbbf24;
            background: rgba(255, 215, 0, 0.1);
            padding: 0.5rem;
            border-radius: 0.5rem;
            border-left: 3px solid #fbbf24;
        }
        
        /* プラン特典カード（Standard/Free用） */
        .plan-benefits-card {
            grid-column: 2;
            grid-row: 2;
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(5, 150, 105, 0.1) 100%);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 1rem;
            padding: 1.5rem;
            position: relative;
            overflow: hidden;
        }
        
        .plan-benefits-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(16, 185, 129, 0.1) 50%, transparent 100%);
            animation: plan-shine 3s infinite;
        }
        
        @keyframes plan-shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .plan-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .plan-icon {
            font-size: 1.5rem;
            filter: drop-shadow(0 2px 4px rgba(16, 185, 129, 0.3));
        }
        
        .plan-title {
            color: #10b981;
            font-weight: 700;
            font-size: 1rem;
        }
        
        .plan-benefits {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .plan-benefit {
            font-size: 0.85rem;
            color: #10b981;
            background: rgba(16, 185, 129, 0.1);
            padding: 0.5rem;
            border-radius: 0.5rem;
            border-left: 3px solid #10b981;
        }
        
        /* ランクカード特別スタイル */
        .rank-card {
            background: linear-gradient(135deg, rgba(139, 92, 246, 0.15) 0%, rgba(99, 102, 241, 0.15) 100%);
            border: 1px solid rgba(139, 92, 246, 0.4);
        }
        
        .rank-card:hover {
            border-color: rgba(139, 92, 246, 0.6);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.2);
        }
        
        /* ランク目安カード */
        .rank-guide-card {
            grid-column: 1 / 3;
            grid-row: 3;
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.1) 0%, rgba(139, 92, 246, 0.1) 100%);
            border: 1px solid rgba(99, 102, 241, 0.3);
            border-radius: 1rem;
            padding: 1.5rem;
            position: relative;
            overflow: hidden;
        }
        
        .rank-guide-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(99, 102, 241, 0.1) 50%, transparent 100%);
            animation: rank-shine 4s infinite;
        }
        
        @keyframes rank-shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .rank-guide-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .rank-guide-icon {
            font-size: 1.5rem;
            filter: drop-shadow(0 2px 4px rgba(99, 102, 241, 0.3));
        }
        
        .rank-guide-title {
            color: #6366f1;
            font-weight: 700;
            font-size: 1rem;
        }
        
        .rank-list {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
        }
        
        @media (max-width: 480px) {
            .rank-list {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        .rank-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            background: rgba(99, 102, 241, 0.05);
            border-radius: 0.5rem;
            border: 1px solid rgba(99, 102, 241, 0.1);
            transition: all 0.3s ease;
        }
        
        .rank-item:hover {
            background: rgba(99, 102, 241, 0.1);
            border-color: rgba(99, 102, 241, 0.2);
            transform: translateY(-1px);
        }
        
        .rank-item.current {
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
            border: 2px solid #6366f1;
            box-shadow: 0 2px 8px rgba(99, 102, 241, 0.3);
        }
        
        .rank-badge {
            font-size: 1.2rem;
            width: 2rem;
            height: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            flex-shrink: 0;
        }
        
        .rank-badge.beginner { background: rgba(34, 197, 94, 0.2); }
        .rank-badge.bronze { background: rgba(205, 127, 50, 0.2); }
        .rank-badge.silver { background: rgba(192, 192, 192, 0.2); }
        .rank-badge.gold { background: rgba(255, 215, 0, 0.2); }
        .rank-badge.platinum { background: rgba(229, 228, 226, 0.2); }
        .rank-badge.diamond { background: rgba(0, 191, 255, 0.2); }
        
        .rank-info {
            display: flex;
            flex-direction: column;
            gap: 0.1rem;
        }
        
        .rank-name {
            font-size: 0.8rem;
            font-weight: 600;
            color: #e2e8f0;
        }
        
        .rank-requirement {
            font-size: 0.7rem;
            color: #94a3b8;
        }
        
        .email {
            margin-bottom: 0.25rem;
        }
        
        .expires {
            font-size: 0.85rem;
            color: #10b981;
        }

        /* ポイントセクション */
        .points-section {
            margin-bottom: 2rem;
        }

        .points-card {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(139, 92, 246, 0.1) 100%);
            border-radius: 1rem;
            padding: 2rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .points-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .points-header h2 {
            font-size: 1.5rem;
            margin: 0;
        }

        .points-value {
            display: flex;
            align-items: baseline;
            gap: 0.5rem;
        }

        #current-points {
            font-size: 3rem;
            font-weight: 700;
            background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .points-unit {
            font-size: 1.5rem;
            color: #94a3b8;
        }

        .points-progress {
            margin-bottom: 2rem;
        }

        .progress-bar {
            height: 16px;
            background: linear-gradient(90deg, rgba(30, 41, 59, 0.8) 0%, rgba(15, 23, 42, 0.9) 100%);
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 1rem;
            border: 1px solid rgba(59, 130, 246, 0.3);
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #fbbf24 0%, #f59e0b 100%);
            transition: width 1.2s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 6px;
            position: relative;
            box-shadow: 0 1px 6px rgba(251, 191, 36, 0.3);
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
        }

        #current-rank {
            font-weight: 600;
        }

        #next-rank-info {
            color: #94a3b8;
        }

        .rank-benefits {
            margin-bottom: 1.5rem;
        }

        .rank-benefits h3 {
            font-size: 1.1rem;
            margin-bottom: 1rem;
            color: #f1f5f9;
        }

        .benefits-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .benefit-item {
            padding: 0.5rem;
            background: rgba(16, 185, 129, 0.1);
            border-left: 3px solid #10b981;
            color: #10b981;
        }

        .claim-btn {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(135deg, #f59e0b 0%, #dc2626 100%);
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .claim-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(245, 158, 11, 0.4);
        }

        .claim-btn:disabled {
            background: #64748b;
            cursor: not-allowed;
        }

        /* 予想セクション */
        .predictions-section {
            margin-bottom: 2rem;
        }

        .predictions-section h2 {
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            color: #f1f5f9;
        }

        .predictions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .prediction-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 1rem;
            padding: 1.5rem;
            border: 1px solid rgba(51, 65, 85, 0.5);
            transition: all 0.3s ease;
        }

        .prediction-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .prediction-card.free {
            border-color: rgba(148, 163, 184, 0.5);
        }

        .prediction-card.standard {
            border-color: rgba(16, 185, 129, 0.5);
        }

        .prediction-card.premium {
            border-color: rgba(139, 92, 246, 0.5);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .card-header h3 {
            font-size: 1.2rem;
            margin: 0;
        }

        .plan-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .plan-badge.free {
            background: rgba(148, 163, 184, 0.2);
            color: #94a3b8;
        }

        .plan-badge.standard {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }

        .plan-badge.premium {
            background: rgba(139, 92, 246, 0.2);
            color: #8b5cf6;
        }

        .race-info {
            margin-bottom: 1.5rem;
        }

        .race-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .confidence {
            font-size: 0.9rem;
            color: #10b981;
        }

        .view-btn {
            display: block;
            background: #3b82f6;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            text-decoration: none;
            text-align: center;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .view-btn:hover {
            background: #1d4ed8;
            transform: translateY(-2px);
        }

        /* プラン管理 */
        .plan-section {
            margin-bottom: 2rem;
        }

        .plan-section h2 {
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            color: #f1f5f9;
        }

        .plan-actions {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .action-btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }

        .action-btn.upgrade {
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
        }

        .action-btn.logout {
            background: rgba(30, 41, 59, 0.8);
            color: #e2e8f0;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .action-btn:hover {
            transform: translateY(-2px);
        }

        /* アップグレード促進 */
        .upgrade-section {
            margin-bottom: 2rem;
        }

        .upgrade-card {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
            border-radius: 1rem;
            padding: 2rem;
            text-align: center;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .upgrade-card h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #f1f5f9;
        }

        .upgrade-card p {
            margin-bottom: 1.5rem;
            color: #94a3b8;
        }

        .upgrade-btn {
            display: inline-block;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            padding: 0.875rem 2rem;
            border-radius: 0.5rem;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .upgrade-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.4);
        }

        /* ポイント交換メニュー */
        .exchange-section {
            margin-top: 30px;
        }
        
        .exchange-card {
            background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .exchange-header {
            text-align: center;
            margin-bottom: 25px;
        }
        
        .exchange-header h2 {
            color: #ffffff;
            margin: 0 0 8px 0;
            font-size: 1.5rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .exchange-subtitle {
            color: #cbd5e0;
            margin: 0;
            font-size: 0.95rem;
        }
        
        .exchange-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .exchange-option {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .exchange-option:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }
        
        .premium-option {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        
        .premium-option:hover {
            box-shadow: 0 10px 25px rgba(245, 87, 108, 0.3);
        }
        
        .exchange-cost {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 8px;
        }
        
        .exchange-reward {
            font-size: 1.1rem;
            margin-bottom: 15px;
            line-height: 1.4;
        }
        
        .exchange-btn {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }
        
        .exchange-btn:hover {
            background: rgba(255,255,255,0.3);
            border-color: rgba(255,255,255,0.5);
        }
        
        .exchange-note {
            text-align: center;
            color: #a0aec0;
            margin-top: 15px;
        }
        
        /* レスポンシブ */
        /* 射幸心を煽るプログレスバースタイル */
        .progress-fill {
            background: linear-gradient(90deg, #fbbf24 0%, #f59e0b 100%);
            transition: width 1.2s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.4) 50%, transparent 100%);
            animation: shimmer 2s infinite;
        }

        .progress-bronze {
            background: linear-gradient(90deg, #cd7f32 0%, #daa520 50%, #b8860b 100%);
            box-shadow: 0 1px 8px rgba(205, 127, 50, 0.5), inset 0 1px 2px rgba(255, 215, 0, 0.3);
        }

        .progress-silver {
            background: linear-gradient(90deg, #c0c0c0 0%, #e6e6fa 50%, #a8a8a8 100%);
            box-shadow: 0 1px 8px rgba(192, 192, 192, 0.5), inset 0 1px 2px rgba(255, 255, 255, 0.4);
        }

        .progress-gold {
            background: linear-gradient(90deg, #ffd700 0%, #ffef94 50%, #ffb347 100%);
            box-shadow: 0 2px 10px rgba(255, 215, 0, 0.6), inset 0 1px 3px rgba(255, 239, 148, 0.5);
        }

        .progress-platinum {
            background: linear-gradient(90deg, #e5e4e2 0%, #f8f8ff 50%, #bcc6cc 100%);
            box-shadow: 0 2px 10px rgba(229, 228, 226, 0.6), inset 0 1px 3px rgba(248, 248, 255, 0.6);
        }

        .progress-diamond {
            background: linear-gradient(90deg, #b9f2ff 0%, #87ceeb 30%, #00bfff 60%, #1e90ff 100%);
            box-shadow: 0 2px 12px rgba(0, 191, 255, 0.7), inset 0 1px 3px rgba(135, 206, 235, 0.7);
        }

        .progress-max {
            background: linear-gradient(90deg, #ff1493 0%, #ff69b4 20%, #ffd700 40%, #00ff7f 60%, #00bfff 80%, #9370db 100%);
            box-shadow: 0 2px 15px rgba(255, 20, 147, 0.8), inset 0 1px 3px rgba(255, 255, 255, 0.3);
            animation: rainbow-pulse 1.5s infinite, rainbow-shift 4s infinite;
        }

        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        @keyframes rainbow-pulse {
            0%, 100% {
                box-shadow: 0 2px 15px rgba(255, 20, 147, 0.8), inset 0 1px 3px rgba(255, 255, 255, 0.3);
            }
            50% {
                box-shadow: 0 3px 20px rgba(255, 20, 147, 1), inset 0 2px 4px rgba(255, 255, 255, 0.5);
            }
        }

        @keyframes rainbow-shift {
            0% {
                background: linear-gradient(90deg, #ff1493 0%, #ff69b4 20%, #ffd700 40%, #00ff7f 60%, #00bfff 80%, #9370db 100%);
            }
            25% {
                background: linear-gradient(90deg, #9370db 0%, #ff1493 20%, #ff69b4 40%, #ffd700 60%, #00ff7f 80%, #00bfff 100%);
            }
            50% {
                background: linear-gradient(90deg, #00bfff 0%, #9370db 20%, #ff1493 40%, #ff69b4 60%, #ffd700 80%, #00ff7f 100%);
            }
            75% {
                background: linear-gradient(90deg, #00ff7f 0%, #00bfff 20%, #9370db 40%, #ff1493 60%, #ff69b4 80%, #ffd700 100%);
            }
            100% {
                background: linear-gradient(90deg, #ff1493 0%, #ff69b4 20%, #ffd700 40%, #00ff7f 60%, #00bfff 80%, #9370db 100%);
            }
        }

        /* ポイント表示のキラキラ演出 */
        #current-points.points-sparkle {
            animation: sparkle-effect 1s ease;
        }

        @keyframes sparkle-effect {
            0% { transform: scale(1); }
            25% { transform: scale(1.1); }
            50% { 
                transform: scale(1.15);
                text-shadow: 0 0 20px #fbbf24;
            }
            75% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        /* プログレス情報の強化 */
        #next-rank-info {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 0.25rem;
        }

        .next-rank-label {
            font-size: 0.8rem;
            color: #94a3b8;
        }

        .points-needed {
            font-size: 1.1rem;
            font-weight: 700;
            color: #fbbf24;
        }

        .motivational-text {
            font-size: 0.85rem;
            color: #f59e0b;
            font-weight: 600;
            animation: pulse-glow 2s infinite;
        }

        .max-rank-achieved {
            font-size: 1.2rem;
            font-weight: 700;
            color: #ff1493;
            animation: rainbow-text 3s infinite;
        }

        .congratulations {
            font-size: 0.9rem;
            color: #ffd700;
            font-weight: 600;
        }

        @keyframes pulse-glow {
            0%, 100% {
                opacity: 1;
                text-shadow: 0 0 5px #f59e0b;
            }
            50% {
                opacity: 0.8;
                text-shadow: 0 0 10px #f59e0b, 0 0 15px #f59e0b;
            }
        }

        @keyframes rainbow-text {
            0% { color: #ff1493; }
            25% { color: #ffd700; }
            50% { color: #00ff00; }
            75% { color: #00bfff; }
            100% { color: #ff1493; }
        }

        /* 特典申請ボタンの脈打つアニメーション */
        .pulse-animation {
            animation: pulse-button 1.5s infinite;
        }

        @keyframes pulse-button {
            0%, 100% {
                transform: scale(1);
                box-shadow: 0 10px 25px rgba(245, 158, 11, 0.4);
            }
            50% {
                transform: scale(1.05);
                box-shadow: 0 15px 35px rgba(245, 158, 11, 0.6);
            }
        }

        /* プレミアム特典の強調 */
        .premium-benefit {
            animation: premium-shine 3s infinite;
        }

        @keyframes premium-shine {
            0%, 100% {
                background: rgba(16, 185, 129, 0.1);
                border-left-color: #10b981;
            }
            50% {
                background: rgba(16, 185, 129, 0.2);
                border-left-color: #34d399;
                box-shadow: 0 2px 10px rgba(16, 185, 129, 0.3);
            }
        }

        /* ポイント獲得通知 */
        .points-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            z-index: 10000;
            animation: slideIn 0.5s ease;
        }
        
        .notification-content {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.1rem;
            font-weight: bold;
        }
        
        .points-added {
            background: rgba(255,255,255,0.2);
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 1.2rem;
        }
        
        .points-notification.fade-out {
            animation: slideOut 0.5s ease;
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(400px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes slideOut {
            to {
                transform: translateX(400px);
                opacity: 0;
            }
        }
        
        /* 射幸心演出の追加効果 - スリムでエレガント */
        .progress-bar {
            position: relative;
            background: linear-gradient(90deg, rgba(30, 41, 59, 0.8) 0%, rgba(15, 23, 42, 0.9) 100%);
            border: 1px solid rgba(59, 130, 246, 0.3);
            box-shadow: inset 0 1px 4px rgba(0, 0, 0, 0.3), 0 1px 6px rgba(59, 130, 246, 0.15);
        }

        .progress-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent 0%, rgba(255, 255, 255, 0.05) 50%, transparent 100%);
            animation: sweep 3s infinite;
        }

        @keyframes sweep {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        /* ポイント表示の躍動感 */
        .points-value {
            position: relative;
        }

        .points-value::after {
            content: '✨';
            position: absolute;
            right: -30px;
            top: 50%;
            transform: translateY(-50%);
            animation: twinkle 2s infinite;
            opacity: 0;
        }

        #current-points:hover + .points-unit::after {
            animation-play-state: running;
            opacity: 1;
        }

        @keyframes twinkle {
            0%, 100% {
                opacity: 0;
                transform: translateY(-50%) scale(0.8);
            }
            50% {
                opacity: 1;
                transform: translateY(-50%) scale(1.2);
            }
        }

        /* モバイル対応の射幸心演出維持 */
        @media (max-width: 768px) {
            .dashboard-container {
                padding: 1rem;
            }

            .dashboard-header h1 {
                font-size: 2rem;
            }

            .status-card {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .points-header {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }
            
            .exchange-grid {
                grid-template-columns: 1fr;
            }
            
            .exchange-option {
                padding: 15px;
            }

            .predictions-grid {
                grid-template-columns: 1fr;
            }

            .plan-actions {
                flex-direction: column;
            }

            /* 会員ステータスグリッドのモバイル対応 */
            .status-grid {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto auto auto;
                gap: 1rem;
            }
            
            .main-status {
                grid-column: 1;
                grid-row: 1;
            }
            
            .stats-mini-grid {
                grid-column: 1;
                grid-row: 2;
            }
            
            .vip-status-card {
                grid-column: 1;
                grid-row: 3;
            }
            
            .plan-benefits-card {
                grid-column: 1;
                grid-row: 3;
            }
            
            .rank-guide-card {
                grid-column: 1;
                grid-row: 4;
            }
            
            .rank-list {
                grid-template-columns: repeat(2, 1fr);
                gap: 0.5rem;
            }

            /* モバイルでの射幸心演出調整 */
            #next-rank-info {
                align-items: center;
                text-align: center;
            }

            .motivational-text {
                font-size: 0.9rem;
            }

            .progress-fill::after {
                animation-duration: 1.5s;
            }
        }
    </style>
</BaseLayout>