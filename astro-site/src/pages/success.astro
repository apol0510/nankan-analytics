---
// 決済成功ページ
---

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>決済完了 | NANKANアナリティクス</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #e2e8f0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .success-container {
            background: rgba(30, 41, 59, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(34, 197, 94, 0.3);
            border-radius: 16px;
            padding: 48px;
            width: 100%;
            max-width: 500px;
            text-align: center;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
        }

        .success-icon {
            font-size: 64px;
            margin-bottom: 24px;
        }

        .success-title {
            font-size: 28px;
            font-weight: 700;
            color: #10b981;
            margin-bottom: 16px;
        }

        .success-message {
            color: #cbd5e1;
            font-size: 16px;
            line-height: 1.6;
            margin-bottom: 32px;
        }

        .next-steps {
            background: rgba(15, 23, 42, 0.6);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 32px;
            text-align: left;
        }

        .next-steps h3 {
            color: #f1f5f9;
            font-size: 18px;
            margin-bottom: 16px;
        }

        .next-steps ul {
            list-style: none;
            color: #94a3b8;
        }

        .next-steps li {
            display: flex;
            align-items: flex-start;
            margin-bottom: 8px;
        }

        .next-steps li::before {
            content: "✓";
            color: #10b981;
            font-weight: bold;
            margin-right: 12px;
            margin-top: 2px;
            flex-shrink: 0;
        }

        .btn {
            display: inline-block;
            padding: 12px 24px;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            color: white;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin: 8px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.4);
        }

        .btn-outline {
            background: transparent;
            color: #94a3b8;
            border: 1px solid rgba(148, 163, 184, 0.3);
        }

        .btn-outline:hover {
            color: #f1f5f9;
            border-color: rgba(148, 163, 184, 0.6);
        }

        .support-note {
            font-size: 14px;
            color: #64748b;
            margin-top: 24px;
            padding: 16px;
            background: rgba(15, 23, 42, 0.4);
            border-radius: 8px;
        }
    </style>
</head>
<body>
    <div class="success-container">
        <div class="success-icon">🎉</div>
        <h1 class="success-title">決済が完了しました！</h1>
        <p class="success-message" id="success-message">
            NANKANアナリティクスへのご加入ありがとうございます。<br>
            <span id="plan-description">アカウントのアップグレード処理中...</span>
        </p>

        <div class="next-steps">
            <h3>次のステップ</h3>
            <ul id="next-steps-list">
                <li>確認メールが送信されました（数分以内に届きます）</li>
                <li>ダッシュボードで機能にアクセス可能です</li>
                <li>今日のAI予想レポートをご覧いただけます</li>
            </ul>
        </div>

        <div id="action-buttons">
            <a href="/dashboard" class="btn">ダッシュボードへ</a>
            <a href="/premium-predictions" class="btn btn-outline" id="prediction-link">AI予想を見る</a>
        </div>

        <div class="support-note">
            ご不明な点がございましたら、<br>
            サポート（support@nankan-analytics.keiba.link）までお気軽にお問い合わせください。
        </div>
    </div>

    <script type="module">
        import { createClient } from 'https://cdn.skypack.dev/@supabase/supabase-js';
        
        // Supabase設定
        const supabaseUrl = 'https://qysycsrhaatudnksbpqe.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF5c3ljc3JoYWF0dWRua3NicHFlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU5MzM3MjcsImV4cCI6MjA3MTUwOTcyN30.UDWi7FYqpJNpMhvMMaZoGMXwuD1R2PNH4Tk6Xs1u1pU';
        const client = createClient(supabaseUrl, supabaseAnonKey);
        
        // メイン処理を async 関数でラップ
        async function handlePaymentSuccess() {
            // URLパラメータからセッションIDを取得
            const urlParams = new URLSearchParams(window.location.search);
            const sessionId = urlParams.get('session_id');
            
            if (!sessionId) {
                console.warn('No session ID found in URL');
                updatePageContent('standard'); // デフォルトをstandardに変更
                return;
            }
            
            console.log('Payment completed with session:', sessionId);
            
            try {
                // 現在のユーザー取得
                const { data: { user }, error: userError } = await client.auth.getUser();
                
                if (user && !userError) {
                    // セッションIDからプラン情報を判定
                    let planType = 'standard'; // デフォルトをstandardに設定（テスト決済のデフォルト）
                    
                    // ローカルストレージから直前の決済情報を確認
                    const lastCheckoutData = localStorage.getItem('last_checkout_data');
                    console.log('[SUCCESS] Last checkout data from localStorage:', lastCheckoutData);
                    
                    if (lastCheckoutData) {
                        const checkoutInfo = JSON.parse(lastCheckoutData);
                        console.log('[SUCCESS] Parsed checkout info:', checkoutInfo);
                        console.log('[SUCCESS] Price ID:', checkoutInfo.priceId);
                        
                        // price IDから判定（完全一致で判定）
                        if (checkoutInfo.priceId === 'price_1RzEMaFA5w33p4Wycj2oSBOz') {
                            planType = 'standard';
                            console.log('[SUCCESS] Plan determined as STANDARD');
                        } else if (checkoutInfo.priceId === 'price_1RzEVfFA5w33p4Wy7GPtIHfv') {
                            planType = 'premium';
                            console.log('[SUCCESS] Plan determined as PREMIUM');
                        } else {
                            console.warn('[SUCCESS] Unknown price ID:', checkoutInfo.priceId);
                            // URLパラメータからヒントを取得（フォールバック）
                            if (sessionId.includes('standard') || checkoutInfo.priceId.includes('RzEMa')) {
                                planType = 'standard';
                            } else if (sessionId.includes('premium') || checkoutInfo.priceId.includes('RzEVf')) {
                                planType = 'premium';
                            }
                        }
                    } else {
                        console.warn('[SUCCESS] No checkout data found in localStorage');
                    }
                    
                    // 既存のテストサブスクリプションをクリア（新しいプランで上書き）
                    const existingTest = localStorage.getItem('test_subscription_' + user.id);
                    if (existingTest) {
                        console.log('[SUCCESS] Removing existing test subscription:', existingTest);
                        localStorage.removeItem('test_subscription_' + user.id);
                    }
                    
                    // テスト用サブスクリプション情報をローカルストレージに保存
                    const testSubscription = {
                        userId: user.id,
                        planType: planType,
                        status: 'active',
                        sessionId: sessionId,
                        priceId: lastCheckoutData ? JSON.parse(lastCheckoutData).priceId : 'unknown',
                        timestamp: new Date().toISOString()
                    };
                    
                    localStorage.setItem('test_subscription_' + user.id, JSON.stringify(testSubscription));
                    console.log('[SUCCESS] Test subscription saved:', testSubscription);
                    console.log('[SUCCESS] Plan type:', planType);
                    
                    // プランに応じて表示内容を更新
                    updatePageContent(planType);
                    
                    // 他のページに行く際のキャッシュ対策
                    // sessionStorageにフラグを立てて、他ページでリフレッシュを促す
                    sessionStorage.setItem('subscription_updated', 'true');
                    sessionStorage.setItem('new_plan_type', planType);
                    
                    // 決済データをクリア
                    localStorage.removeItem('last_checkout_data');
                } else {
                    console.error('User not found:', userError);
                }
            } catch (error) {
                console.error('Error handling payment success:', error);
                // エラー時もstandardプランとして表示（決済したことは確実なので）
                updatePageContent('standard');
            }
        }
        
        // プランに応じてページ内容を更新
        function updatePageContent(planType) {
            console.log('[SUCCESS] updatePageContent called with planType:', planType);
            
            const planDescription = document.getElementById('plan-description');
            const nextStepsList = document.getElementById('next-steps-list');
            const predictionLink = document.getElementById('prediction-link');
            
            if (!planDescription || !nextStepsList || !predictionLink) {
                console.error('[SUCCESS] Required DOM elements not found:', {
                    planDescription: !!planDescription,
                    nextStepsList: !!nextStepsList,
                    predictionLink: !!predictionLink
                });
                return;
            }
            
            console.log('[SUCCESS] All DOM elements found, updating content...');
            
            if (planType === 'standard') {
                // スタンダードプラン用の表示
                planDescription.textContent = 'スタンダードプランへのアップグレードが完了しました。';
                
                nextStepsList.innerHTML = `
                    <li>確認メールが送信されました（数分以内に届きます）</li>
                    <li>ダッシュボードで後半3レース予想にアクセス可能です</li>
                    <li>10R・11R・12Rの詳細予想をご覧いただけます</li>
                    <li>基礎コンテンツと分析レポートもご利用いただけます</li>
                `;
                
                predictionLink.href = '/standard-predictions';
                predictionLink.textContent = 'スタンダード予想を見る';
                console.log('[SUCCESS] Standard plan content updated');
                
            } else if (planType === 'premium') {
                // プレミアムプラン用の表示
                planDescription.textContent = 'プレミアムプランへのアップグレードが完了し、全機能がご利用いただけるようになりました。';
                
                nextStepsList.innerHTML = `
                    <li>確認メールが送信されました（数分以内に届きます）</li>
                    <li>ダッシュボードですべての機能にアクセス可能です</li>
                    <li>1R〜12R 全レースの予想をすぐにご覧いただけます</li>
                    <li>過去データと詳細分析もご利用いただけます</li>
                `;
                
                predictionLink.href = '/premium-predictions';
                predictionLink.textContent = '全レース予想を見る';
                console.log('[SUCCESS] Premium plan content updated');
                
            } else {
                // プラン判定できない場合（テスト決済なのでstandardとして扱う）
                planDescription.textContent = 'NANKANアナリティクスへのご加入ありがとうございます。';
                
                nextStepsList.innerHTML = `
                    <li>確認メールが送信されました（数分以内に届きます）</li>
                    <li>ダッシュボードで後半レース予想にアクセス可能です</li>
                    <li>AI予想と分析レポートをご覧いただけます</li>
                `;
                
                predictionLink.href = '/dashboard';
                predictionLink.textContent = 'ダッシュボードへ';
                console.log('[SUCCESS] Default plan content updated');
            }
            
            console.log('[SUCCESS] Page content update completed for plan:', planType);
        }
        
        // ページ初期化
        document.addEventListener('DOMContentLoaded', async () => {
            // 成功メッセージの表示アニメーション
            const container = document.querySelector('.success-container');
            container.style.opacity = '0';
            container.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                container.style.transition = 'all 0.6s ease';
                container.style.opacity = '1';
                container.style.transform = 'translateY(0)';
            }, 100);
            
            // 決済処理を実行
            await handlePaymentSuccess();
        });
    </script>
</body>
</html>