---
export const prerender = true;
import BaseLayout from '../layouts/BaseLayout.astro';
import AccessControl from '../components/AccessControl.astro';
import allRacesData from '../data/allRacesPrediction.json';
import { processRaceData, processUnifiedRaceData, normalizeHorseData, getRoleDisplayConfig, validateDataIntegrity, getHorseConfidenceFromMark, calculateMarkBasedConfidence, convertToStarRating, calculateDynamicRisk, getRiskLevelText, getRecommendationStars, generateStandardizedBets, calculateHitRateAndReturn, getPredictionDataWithStrategies } from '../lib/shared-prediction-logic.js';

// 共有ロジックを使用してデータを処理（元のデータを直接使用）
const { mainRace, race12R, sortedRaces } = processRaceData(allRacesData);

// 元のデータを直接使用（根本解決）
const { raceInfo, strategies, horses, analysis, preview, allHorses, totalHorses } = mainRace;
const { raceInfo: race12RInfo, strategies: race12RStrategies, horses: race12RHorses, allHorses: race12RAllHorses } = race12R;


---

<BaseLayout title={`プレミアム予想 | ${raceInfo.title}`} description={`AI技術による${raceInfo.track}競馬${raceInfo.raceName}の詳細分析。機械学習モデルによる高精度予想の有料版を提供中。`}>
    <AccessControl requiredPlan="premium">
        <div class="page-container">
        <!-- ヘッダーセクション -->
        <div class="header-section">
            <div class="ai-badge">
                <span class="pulse"></span>
                <span class="ai-status">AI分析完了</span>
            </div>
            <h1 class="race-title">2025年8月22日 川崎競馬 - 全12レース総合予想</h1>
            <div class="ai-metrics">
                <div class="metric">
                    <div class="metric-value">12</div>
                    <div class="metric-label">分析レース数</div>
                </div>
                <div class="metric">
                    <div class="metric-value">8</div>
                    <div class="metric-label">高信頼度レース</div>
                </div>
                <div class="metric">
                    <div class="metric-value">A+</div>
                    <div class="metric-label">総合推奨度</div>
                </div>
                <div class="metric">
                    <div class="metric-value">142%</div>
                    <div class="metric-label">全体期待回収率</div>
                </div>
            </div>
        </div>

        <!-- プレミアム会員バッジ -->
        <div class="premium-status">
            <span class="premium-icon">👑</span>
            <span class="premium-status-text">プレミアム会員限定コンテンツ</span>
        </div>

        <!-- 全レースアコーディオン（データドリブン） -->
        {sortedRaces.map((raceData) => {
            const raceNum = raceData.raceNumber.replace('R', '');
            const isMainRace = raceData.isMainRace;

            // 20年運営対応: データ正規化システム使用
            const normalizedHorses = normalizeHorseData(raceData);
            const raceHorses = normalizedHorses; // 正規化されたデータを使用

            // データ整合性チェック（開発環境でのみログ出力）
            const integrity = validateDataIntegrity(raceData);
            if (integrity.length > 0) {
                console.warn(`Race ${raceData.raceNumber} integrity issues:`, integrity);
            }

            // 統一システムで戦略を生成

            // 新しい戦略データを全レースに適用（統一システム使用）
            const processedData = getPredictionDataWithStrategies(raceData.horses);
            const raceStrategies = processedData;

            // リスク表示用のスコア変数を定義
            const raceMainHorseScore = getHorseConfidenceFromMark(raceData.horses.main);
            const raceSubHorseScore = getHorseConfidenceFromMark(raceData.horses.sub);
            
            return (
                <div class={`race-${raceNum}r-accordion`}>
                    <div class="race-accordion-header" onclick={`toggleRace${raceNum}R()`}>
                        <div class="race-basic-info">
                            <span class="race-number">{raceData.raceNumber}</span>
                            <span class="race-name">{raceData.raceName}</span>
                            <span class="race-tier-badge">{`第${raceNum}レース`}</span>
                            {isMainRace && <span class="main-race-badge">メインレース</span>}
                        </div>
                        <div class="race-preview">
                            <span class="toggle-icon" id={`toggle-${raceNum}r`}>▼</span>
                        </div>
                    </div>
                    
                    <div class="race-accordion-content" id={`race-${raceNum}r`} style="max-height: 0; opacity: 0;">
                        <div class={`race-content-${raceNum}r`}>
                            
                            <!-- AI選出馬分析 -->
                            <div class="analysis-section">
                                <h2 class="section-title">
                                    <span>🤖</span>
                                    <span>AIモデル選出馬 - XGBoost×LSTM統合分析</span>
                                </h2>

                                {/* 20年運営対応: role-based表示（本命）- 最も大きく表示 */}
                                {raceHorses && raceHorses.filter(h => h.role === '本命').map((horse, index) => {
                                    const roleConfig = getRoleDisplayConfig(horse.role);
                                    return (
                                    <div class="horse-card horse-card-main">
                                        <div class="horse-header">
                                            <div>
                                                <span class={roleConfig.markClass}>{horse.displayMark}</span>
                                                <span class="horse-number">{horse.number}</span>
                                                <span class="horse-name">{horse.name}</span>
                                                <span class={roleConfig.typeClass} style={roleConfig.style}>{horse.role}</span>
                                            </div>
                                        </div>
                                        <div class="ai-factors">
                                            {/* 累積スコアと星評価のみ表示 */}
                                            {horse.factors && horse.factors.filter(factor =>
                                                factor.text.includes('累積スコア') ||
                                                factor.text.includes('総合評価')
                                            ).map(factor => (
                                                <div class="factor">
                                                    <span class="factor-icon">{factor.icon}</span>
                                                    <span>{factor.text}</span>
                                                </div>
                                            ))}
                                        </div>
                                        
                                        {/* 本命馬のみ特徴量重要度を表示 */}
                                        {raceData.horses?.main?.importance && (
                                            <div class="feature-importance">
                                                <h4 style="color: #94a3b8; font-size: 0.9rem; margin-bottom: 10px;">特徴量重要度</h4>
                                                {raceData.horses.main.importance.map(item => (
                                                    <div class="importance-bar">
                                                        <span class="importance-label">{item.label}</span>
                                                        <div class="importance-value">
                                                            <div class="importance-fill" style={`width: ${item.value * 100}%;`}>{Math.round(item.value * 100)}%</div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                    );
                                })}

                                {/* 20年運営対応: role-based表示（対抗）- 中サイズで表示 */}
                                {raceHorses && raceHorses.filter(h => h.role === '対抗').map((horse, index) => {
                                    const roleConfig = getRoleDisplayConfig(horse.role);
                                    return (
                                    <div class="horse-card horse-card-sub">
                                        <div class="horse-header">
                                            <div>
                                                <span class={roleConfig.markClass}>{horse.displayMark}</span>
                                                <span class="horse-number">{horse.number}</span>
                                                <span class="horse-name">{horse.name}</span>
                                                <span class={roleConfig.typeClass} style={roleConfig.style}>{horse.role}</span>
                                            </div>
                                        </div>
                                        <div class="ai-factors">
                                            {/* 累積スコアと星評価のみ表示 */}
                                            {horse.factors && horse.factors.filter(factor =>
                                                factor.text.includes('累積スコア') ||
                                                factor.text.includes('総合評価')
                                            ).map(factor => (
                                                <div class="factor">
                                                    <span class="factor-icon">{factor.icon}</span>
                                                    <span>{factor.text}</span>
                                                </div>
                                            ))}
                                        </div>
                                        
                                        {/* 対抗馬の特徴量重要度を表示 */}
                                        {raceData.horses?.sub?.importance && (
                                            <div class="feature-importance">
                                                <h4 style="color: #94a3b8; font-size: 0.9rem; margin-bottom: 10px;">特徴量重要度</h4>
                                                {raceData.horses.sub.importance.map(item => (
                                                    <div class="importance-bar">
                                                        <span class="importance-label">{item.label}</span>
                                                        <div class="importance-value">
                                                            <div class="importance-fill" style={`width: ${item.value * 100}%;`}>{Math.round(item.value * 100)}%</div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                    );
                                })}

                                {/* 20年運営対応: role-based表示（単穴）- 中サイズで表示 */}
                                {raceHorses && raceHorses.filter(h => h.role === '単穴').map((horse, index) => {
                                    const roleConfig = getRoleDisplayConfig(horse.role);
                                    return (
                                    <div class="horse-card horse-card-sub">
                                        <div class="horse-header">
                                            <div>
                                                <span class={roleConfig.markClass}>{horse.displayMark}</span>
                                                <span class="horse-number">{horse.number}</span>
                                                <span class="horse-name">{horse.name}</span>
                                                <span class={roleConfig.typeClass} style={roleConfig.style}>{horse.role}</span>
                                            </div>
                                        </div>
                                        <div class="ai-factors">
                                            {/* 累積スコアと星評価のみ表示 */}
                                            {horse.factors && horse.factors.filter(factor =>
                                                factor.text.includes('累積スコア') ||
                                                factor.text.includes('総合評価')
                                            ).map(factor => (
                                                <div class="factor">
                                                    <span class="factor-icon">{factor.icon}</span>
                                                    <span>{factor.text}</span>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    );
                                })}

                                {/* 20年運営対応: role-based表示（連下）- まとめて表示 */}
                                {raceHorses && raceHorses.filter(h => h.role === '連下').length > 0 && (
                                    <div class="horse-card horse-card-minor">
                                        <div class="horse-header">
                                            <div>
                                                <span class="horse-mark-minor">{raceHorses.find(h => h.role === '連下')?.displayMark || '△'}</span>
                                                <span style="color: #f59e0b; font-weight: 600;">連下候補馬</span>
                                            </div>
                                        </div>
                                        <div class="horse-grid">
                                            {raceHorses.filter(h => h.role === '連下').map(horse => {
                                                const scoreText = horse.factors?.find(f => f.text.includes('累積スコア'))?.text;
                                                const score = scoreText ? scoreText.match(/\d+/)?.[0] : '';
                                                return (
                                                    <div class="horse-grid-item">
                                                        <span class="horse-number-small">{horse.number}</span>
                                                        <span class="horse-name-small">{horse.name}{score ? `(${score}pt)` : ''}</span>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    </div>
                                )}

                                {/* 20年運営対応: role-based表示（押さえ）- まとめて表示 */}
                                {raceHorses && raceHorses.filter(h => h.role === '押さえ').length > 0 && (
                                    <div class="horse-card horse-card-minor">
                                        <div class="horse-header">
                                            <div>
                                                <span class="horse-mark-minor">{raceHorses.find(h => h.role === '押さえ')?.displayMark || '×'}</span>
                                                <span style="color: #64748b; font-weight: 600;">抑え候補馬</span>
                                            </div>
                                        </div>
                                        <div class="horse-grid">
                                            {raceHorses.filter(h => h.role === '押さえ').map(horse => {
                                                const scoreText = horse.factors?.find(f => f.text.includes('累積スコア'))?.text;
                                                const score = scoreText ? scoreText.match(/\d+/)?.[0] : '';
                                                return (
                                                    <div class="horse-grid-item">
                                                        <span class="horse-number-small">{horse.number}</span>
                                                        <span class="horse-name-small">{horse.name}{score ? `(${score}pt)` : ''}</span>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    </div>
                                )}
                            </div>

                            <!-- AI推奨投資戦略 -->
                            {raceStrategies && (
                                <div class="recommendation-section">
                                    <h2 class="section-title">
                                        <span>📊</span>
                                        <span>AI推奨投資戦略 - 期待度別最適化買い目</span>
                                    </h2>

                                    <!-- 🎯 戦略組み合わせ効果説明 -->
                                    {raceStrategies.combinationTip && (
                                        <div class="strategy-combination-tips" style="background: rgba(59, 130, 246, 0.1); border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                                            <div style="color: #3b82f6; font-weight: 600; margin-bottom: 8px; display: flex; align-items: center; gap: 8px;">
                                                <span>{raceStrategies.combinationTip.icon}</span>
                                                <span>{raceStrategies.combinationTip.title}</span>
                                            </div>
                                            <div style="color: #94a3b8; font-size: 0.95rem; line-height: 1.5;">
                                                <strong style="color: #e2e8f0;">{raceStrategies.combinationTip.message}</strong><br>
                                                {raceStrategies.combinationTip.description}
                                            </div>
                                        </div>
                                    )}

                                    <!-- 戦略1: 的中率重視型 -->
                                    {raceStrategies.strategies && raceStrategies.strategies[0] && (
                                        <div class="bet-strategy">
                                            <div class="strategy-title">🎯 少点数的中型（推奨度 {'★'.repeat(raceStrategies.strategies[0].recommendation)}）</div>
                                            <div style="color: #94a3b8; margin-bottom: 15px;">
                                                AIモデル予測: 的中率{raceStrategies.strategies[0].hitRate}% / 期待回収率{raceStrategies.strategies[0].returnRate}%
                                            </div>
                                            <div class="bet-list">
                                                {raceStrategies.strategies[0].bets && raceStrategies.strategies[0].bets.map(bet => {
                                                    const betStr = typeof bet === 'string' ? bet : (bet?.horses || bet?.numbers || JSON.stringify(bet));
                                                    // 点数計算: ⇔は双方向、2倍、→は単方向
                                                    let points = 1;
                                                    if (betStr && typeof betStr === 'string') {
                                                        if (betStr.includes('⇔')) {
                                                            const targets = betStr.split('⇔')[1]?.split(',').length || 1;
                                                            points = targets * 2;
                                                        } else if (betStr.includes('→')) {
                                                            const targets = betStr.split('→')[1]?.split(',').length || 1;
                                                            points = targets;
                                                        }
                                                    }
                                                    return (
                                                    <div class="bet-item">
                                                        <span class="bet-type">馬単</span>
                                                        <span class="bet-horses">{betStr}</span>
                                                        <span class="bet-points">{points}点</span>
                                                    </div>
                                                );
                                            })}
                                            </div>
                                            <div style="color: #94a3b8; font-size: 0.9rem; margin-top: 10px;">
                                                リスク: {raceStrategies.strategies[0].riskLevel}（本命{raceMainHorseScore}pt基準）
                                            </div>
                                            <div class="risk-indicator">
                                                <span style="color: #64748b; font-size: 0.85rem;">期待度:</span>
                                                <div class="risk-bar active expectation-high" style="width: 90%;"></div>
                                                <div class="risk-bar"></div>
                                                <div class="risk-bar"></div>
                                            </div>
                                        </div>
                                    )}

                                    <!-- 戦略2: バランス型 -->
                                    {raceStrategies.strategies[1] && (
                                        <div class="bet-strategy">
                                            <div class="strategy-title">⚖️ バランス型（推奨度 {'★'.repeat(raceStrategies.strategies[1].recommendation)}）</div>
                                            <div style="color: #94a3b8; margin-bottom: 15px;">
                                                AIモデル予測: 的中率{raceStrategies.strategies[1].hitRate}% / 期待回収率{raceStrategies.strategies[1].returnRate}%
                                            </div>
                                            <div class="bet-list">
                                                {raceStrategies.strategies[1].bets && raceStrategies.strategies[1].bets.map(bet => {
                                                    const betStr = typeof bet === 'string' ? bet : (bet?.horses || bet?.numbers || JSON.stringify(bet) || '');
                                                    // 点数計算: ⇔は双方向、2倍、→は単方向
                                                    let points = 1;
                                                    if (betStr && typeof betStr === 'string') {
                                                        if (betStr.includes('⇔')) {
                                                            const targets = betStr.split('⇔')[1]?.split(',').length || 1;
                                                            points = targets * 2;
                                                        } else if (betStr.includes('→')) {
                                                            const targets = betStr.split('→')[1]?.split(',').length || 1;
                                                            points = targets;
                                                        }
                                                    }
                                                    return (
                                                        <div class="bet-item">
                                                            <span class="bet-type">馬単</span>
                                                            <span class="bet-horses">{betStr}</span>
                                                            <span class="bet-points">{points}点</span>
                                                        </div>
                                                    );
                                                })}
                                            </div>
                                            <div style="color: #94a3b8; font-size: 0.9rem; margin-top: 10px;">
                                                リスク: {raceStrategies.strategies[1].riskLevel}（本命{raceMainHorseScore}pt+対抗{raceSubHorseScore}pt平均基準）
                                            </div>
                                            <div class="risk-indicator">
                                                <span style="color: #64748b; font-size: 0.85rem;">期待度:</span>
                                                <div class="risk-bar active expectation-medium" style="width: 60%;"></div>
                                                <div class="risk-bar"></div>
                                                <div class="risk-bar"></div>
                                            </div>
                                        </div>
                                    )}

                                    <!-- 戦略3: 高配当狙い -->
                                    {raceStrategies.strategies[2] && (
                                        <div class="bet-strategy">
                                            <div class="strategy-title">🚀 高配当追求型（推奨度 {'★'.repeat(raceStrategies.strategies[2].recommendation)}）</div>
                                            <div style="color: #94a3b8; margin-bottom: 15px;">
                                                AIモデル予測: 的中率{raceStrategies.strategies[2].hitRate}% / 期待回収率{raceStrategies.strategies[2].returnRate}%
                                            </div>
                                            <div class="bet-list">
                                                {raceStrategies.strategies[2].bets && raceStrategies.strategies[2].bets.map(bet => {
                                                    const betStr = typeof bet === 'string' ? bet : (bet?.horses || bet?.numbers || JSON.stringify(bet) || '');
                                                    // 点数計算: ⇔は双方向、2倍、→は単方向
                                                    let points = 1;
                                                    if (betStr && typeof betStr === 'string') {
                                                        if (betStr.includes('⇔')) {
                                                            const targets = betStr.split('⇔')[1]?.split(',').length || 1;
                                                            points = targets * 2;
                                                        } else if (betStr.includes('→')) {
                                                            const targets = betStr.split('→')[1]?.split(',').length || 1;
                                                            points = targets;
                                                        }
                                                    }
                                                    return (
                                                        <div class="bet-item">
                                                            <span class="bet-type">馬単</span>
                                                            <span class="bet-horses">{betStr}</span>
                                                            <span class="bet-points">{points}点</span>
                                                        </div>
                                                    );
                                                })}
                                            </div>
                                            <div style="color: #94a3b8; font-size: 0.9rem; margin-top: 10px;">
                                                リスク: {raceStrategies.strategies[2].riskLevel}（本命{raceMainHorseScore}pt+対抗{raceSubHorseScore}pt平均基準）
                                            </div>
                                            <div class="risk-indicator">
                                                <span style="color: #64748b; font-size: 0.85rem;">期待度:</span>
                                                <div class="risk-bar active expectation-low" style="width: 30%;"></div>
                                                <div class="risk-bar"></div>
                                                <div class="risk-bar"></div>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            )}

                        </div>
                    </div>
                </div>
            );
        })}

        </div>
    </AccessControl>
</BaseLayout>

<style>
    body {
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        color: #e2e8f0;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        margin: 0;
        padding: 0;
        line-height: 1.6;
    }

    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px 20px;
    }

    .header-section {
        background: linear-gradient(135deg, rgba(139, 92, 246, 0.1) 0%, rgba(59, 130, 246, 0.1) 100%);
        border-radius: 20px;
        padding: 40px;
        margin-bottom: 40px;
        border: 1px solid rgba(139, 92, 246, 0.2);
        text-align: center;
    }

    .ai-badge {
        display: inline-flex;
        align-items: center;
        gap: 10px;
        background: rgba(16, 185, 129, 0.1);
        border: 1px solid rgba(16, 185, 129, 0.3);
        padding: 8px 20px;
        border-radius: 25px;
        margin-bottom: 20px;
    }

    .pulse {
        width: 8px;
        height: 8px;
        background: #10b981;
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(16, 185, 129, 0); }
        100% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0); }
    }

    .ai-status {
        color: #10b981;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .race-title {
        font-size: 2.5rem;
        font-weight: 800;
        background: linear-gradient(135deg, #8b5cf6, #3b82f6);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 30px;
        line-height: 1.2;
    }

    .ai-metrics {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 30px;
    }

    .metric {
        text-align: center;
        padding: 20px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .metric-value {
        font-size: 2rem;
        font-weight: 800;
        color: #3b82f6;
        margin-bottom: 5px;
    }

    .metric-label {
        color: #94a3b8;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .premium-status {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        background: linear-gradient(135deg, #f59e0b, #fb923c);
        color: white;
        padding: 15px 30px;
        border-radius: 25px;
        margin-bottom: 30px;
        font-weight: 600;
        box-shadow: 0 4px 15px rgba(245, 158, 11, 0.3);
    }

    .premium-icon {
        font-size: 1.2rem;
    }

    /* アコーディオン統一スタイル */
    [class*="race-"][class*="r-accordion"] {
        background: rgba(16, 185, 129, 0.05);
        border-radius: 12px;
        border: 1px solid rgba(16, 185, 129, 0.2);
        margin-bottom: 25px;
        overflow: hidden;
    }

    .race-accordion-header {
        padding: 20px 25px;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(16, 185, 129, 0.05) 100%);
        transition: all 0.3s ease;
        border-bottom: 1px solid rgba(16, 185, 129, 0.2);
    }

    .race-accordion-header:hover {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.15) 0%, rgba(16, 185, 129, 0.08) 100%);
    }

    .race-basic-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .race-number {
        background: linear-gradient(135deg, #8b5cf6, #7c3aed);
        color: white;
        padding: 8px 15px;
        border-radius: 8px;
        font-weight: 700;
        font-size: 1.1rem;
    }

    .race-name {
        color: #e2e8f0;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .race-tier-badge {
        background: rgba(16, 185, 129, 0.2);
        color: #10b981;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .main-race-badge {
        background: linear-gradient(135deg, #f59e0b, #fb923c);
        color: white;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 700;
        text-transform: uppercase;
        animation: pulse-gold 2s infinite;
    }

    @keyframes pulse-gold {
        0%, 100% { box-shadow: 0 0 5px rgba(245, 158, 11, 0.5); }
        50% { box-shadow: 0 0 20px rgba(245, 158, 11, 0.8); }
    }

    .toggle-icon {
        font-size: 1.2rem;
        color: #10b981;
        transition: transform 0.3s ease;
    }

    .race-accordion-content {
        overflow: hidden;
        transition: all 0.3s ease;
        background: rgba(15, 23, 42, 0.95);
    }

    .analysis-section {
        margin-bottom: 40px;
        padding: 30px;
        background: rgba(30, 41, 59, 0.7);
        border-radius: 15px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .section-title {
        display: flex;
        align-items: center;
        gap: 12px;
        font-size: 1.4rem;
        font-weight: 700;
        color: #e2e8f0;
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 2px solid rgba(139, 92, 246, 0.3);
    }

    .section-title span:first-child {
        font-size: 1.5rem;
    }

    .horse-card {
        background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.8) 100%);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 20px;
        border: 1px solid rgba(100, 116, 139, 0.3);
        transition: all 0.3s ease;
    }

    .horse-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        border-color: rgba(139, 92, 246, 0.5);
    }

    .horse-card-main {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(30, 41, 59, 0.9) 100%);
    }

    .horse-card-sub {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(30, 41, 59, 0.9) 100%);
    }

    .horse-card-minor {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(30, 41, 59, 0.9) 100%);
    }

    .horse-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .horse-mark-main {
        font-size: 1.8rem;
        color: #10b981;
        font-weight: 900;
        margin-right: 10px;
    }

    .horse-mark-sub {
        font-size: 1.5rem;
        color: #3b82f6;
        font-weight: 900;
        margin-right: 10px;
    }

    .horse-mark-minor {
        font-size: 1.3rem;
        color: #f59e0b;
        font-weight: 900;
        margin-right: 10px;
    }

    .horse-number {
        background: linear-gradient(135deg, #8b5cf6, #7c3aed);
        color: white;
        padding: 4px 10px;
        border-radius: 6px;
        font-weight: 700;
        margin-right: 15px;
        font-size: 0.9rem;
    }

    .horse-name {
        font-size: 1.2rem;
        font-weight: 700;
        color: #e2e8f0;
        margin-right: 15px;
    }

    .ai-factors {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 15px;
    }

    .factor {
        display: flex;
        align-items: center;
        gap: 8px;
        background: rgba(139, 92, 246, 0.1);
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 0.9rem;
        color: #e2e8f0;
        border: 1px solid rgba(139, 92, 246, 0.2);
    }

    .factor-icon {
        color: #8b5cf6;
        font-weight: 600;
    }

    .feature-importance {
        margin-top: 20px;
        padding: 20px;
        background: rgba(15, 23, 42, 0.8);
        border-radius: 10px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .importance-bar {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 12px;
    }

    .importance-label {
        min-width: 120px;
        color: #94a3b8;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .importance-value {
        flex: 1;
        height: 16px;
        background: rgba(100, 116, 139, 0.3);
        border-radius: 8px;
        position: relative;
        overflow: hidden;
    }

    .importance-fill {
        height: 100%;
        background: linear-gradient(90deg, #8b5cf6, #3b82f6);
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        font-weight: 600;
        color: white;
        transition: width 0.8s ease;
    }

    .horse-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 15px;
    }

    .horse-grid-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        background: rgba(15, 23, 42, 0.6);
        border-radius: 8px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .horse-number-small {
        background: linear-gradient(135deg, #6b7280, #4b5563);
        color: white;
        padding: 3px 8px;
        border-radius: 4px;
        font-weight: 700;
        font-size: 0.8rem;
        min-width: 25px;
        text-align: center;
    }

    .horse-name-small {
        color: #e2e8f0;
        font-weight: 600;
        font-size: 0.85rem;
    }

    .premium-analysis {
        margin-top: 15px;
        padding: 15px;
        background: rgba(15, 23, 42, 0.8);
        border-radius: 8px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .recommendation-section {
        margin-bottom: 40px;
        padding: 30px;
        background: rgba(30, 41, 59, 0.7);
        border-radius: 15px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .bet-strategy {
        background: rgba(15, 23, 42, 0.8);
        border-radius: 12px;
        padding: 25px;
        margin-bottom: 25px;
        border: 1px solid rgba(100, 116, 139, 0.3);
        transition: all 0.3s ease;
    }

    .bet-strategy:hover {
        border-color: rgba(139, 92, 246, 0.5);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .strategy-title {
        font-size: 1.2rem;
        font-weight: 700;
        color: #e2e8f0;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .bet-list {
        margin-bottom: 20px;
    }

    .bet-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 15px;
        margin-bottom: 10px;
        background: rgba(30, 41, 59, 0.6);
        border-radius: 8px;
        border: 1px solid rgba(100, 116, 139, 0.2);
    }

    .bet-type {
        background: linear-gradient(135deg, #8b5cf6, #7c3aed);
        color: white;
        padding: 4px 12px;
        border-radius: 15px;
        font-weight: 600;
        font-size: 0.85rem;
        min-width: 60px;
        text-align: center;
    }

    .bet-horses {
        color: #e2e8f0;
        font-weight: 600;
        flex: 1;
        text-align: center;
    }

    .bet-points {
        color: #10b981;
        font-weight: 700;
        background: rgba(16, 185, 129, 0.1);
        padding: 4px 10px;
        border-radius: 15px;
        border: 1px solid rgba(16, 185, 129, 0.3);
    }

    .risk-indicator {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .risk-bar {
        height: 6px;
        width: 30px;
        background: rgba(100, 116, 139, 0.3);
        border-radius: 3px;
    }

    .risk-bar.active.expectation-high {
        background: linear-gradient(90deg, #10b981, #059669);  /* 緑: 最高の期待度 */
    }

    .risk-bar.active.expectation-medium {
        background: linear-gradient(90deg, #3b82f6, #2563eb);  /* 青: 中程度の期待度 */
    }

    .risk-bar.active.expectation-low {
        background: linear-gradient(90deg, #94a3b8, #64748b);  /* グレー: 標準の期待度 */
    }

    .expected-return {
        text-align: center;
        padding: 15px;
        background: rgba(139, 92, 246, 0.05);
        border-radius: 8px;
        border: 1px solid rgba(139, 92, 246, 0.2);
    }

    .return-value {
        font-size: 1.2rem;
        font-weight: 700;
        color: #8b5cf6;
        margin-bottom: 5px;
    }

    /* レスポンシブ対応 */
    @media (max-width: 768px) {
        .page-container {
            padding: 20px 15px;
        }

        .race-title {
            font-size: 1.8rem;
        }

        .ai-metrics {
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .horse-card {
            padding: 20px;
        }

        .race-accordion-header {
            padding: 15px 20px;
        }

        .race-basic-info {
            flex-wrap: wrap;
            gap: 10px;
        }

        .horse-grid {
            grid-template-columns: 1fr;
        }

        .importance-label {
            min-width: 100px;
            font-size: 0.8rem;
        }
    }

    /* 信頼度表示スタイル */
    .confidence {
        background: rgba(16, 185, 129, 0.1);
        color: #10b981;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.85rem;
        font-weight: 600;
        border: 1px solid rgba(16, 185, 129, 0.3);
    }

    .confidence-score {
        font-weight: 600;
        font-size: 0.9rem;
        padding: 2px 8px;
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.05);
    }
</style>

<script is:inline>
    function toggleAccordion(id) {
        const content = document.getElementById(id);
        const icon = document.getElementById(id + 'Icon');
        
        if (content.style.maxHeight === '0px' || content.style.maxHeight === '') {
            content.style.maxHeight = content.scrollHeight + 'px';
            content.style.opacity = '1';
            icon.textContent = '◎';
        } else {
            content.style.maxHeight = '0px';
            content.style.opacity = '0';
            icon.textContent = '▼';
        }
    }

    // アコーディオン共通化: すべてのtoggle関数を動的生成
    function createToggleFunction(raceNumber) {
        return function() {
            const content = document.getElementById(`race-${raceNumber}r`);
            const icon = document.getElementById(`toggle-${raceNumber}r`);
            
            if (!content || !icon) return;
            
            if (content.style.maxHeight === '0px' || content.style.maxHeight === '') {
                content.style.maxHeight = content.scrollHeight + 'px';
                content.style.opacity = '1';
                icon.textContent = '◎';
                icon.style.transform = 'rotate(180deg)';
            } else {
                content.style.maxHeight = '0px';
                content.style.opacity = '0';
                icon.textContent = '▼';
                icon.style.transform = 'rotate(0deg)';
            }
        };
    }
    
    // 1R-12Rのすべてのトグル関数を生成
    for (let i = 1; i <= 12; i++) {
        window[`toggleRace${i}R`] = createToggleFunction(i);
    }
</script>